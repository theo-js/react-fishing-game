[{"C:\\www\\react-fishing-game\\src\\index.tsx":"1","C:\\www\\react-fishing-game\\src\\reportWebVitals.ts":"2","C:\\www\\react-fishing-game\\src\\App.tsx":"3","C:\\www\\react-fishing-game\\src\\store\\index.js":"4","C:\\www\\react-fishing-game\\src\\components\\Game\\index.tsx":"5","C:\\www\\react-fishing-game\\src\\interfaces\\game.ts":"6","C:\\www\\react-fishing-game\\src\\store\\actions\\types.ts":"7","C:\\www\\react-fishing-game\\src\\store\\actions\\inventory.ts":"8","C:\\www\\react-fishing-game\\src\\store\\actions\\game.ts":"9","C:\\www\\react-fishing-game\\src\\store\\actions\\position.ts":"10","C:\\www\\react-fishing-game\\src\\store\\selectors\\fishing.ts":"11","C:\\www\\react-fishing-game\\src\\store\\selectors\\game.ts":"12","C:\\www\\react-fishing-game\\src\\store\\selectors\\inventory.ts":"13","C:\\www\\react-fishing-game\\src\\utils\\math.ts":"14","C:\\www\\react-fishing-game\\src\\utils\\position.ts":"15","C:\\www\\react-fishing-game\\src\\store\\reducers\\index.ts":"16","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\index.tsx":"17","C:\\www\\react-fishing-game\\src\\components\\Game\\Barometer\\index.tsx":"18","C:\\www\\react-fishing-game\\src\\components\\Game\\AudioPlayer\\index.tsx":"19","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\Initial\\index.tsx":"20","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\index.tsx":"21","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\ThrowLine\\index.tsx":"22","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\Battle\\index.tsx":"23","C:\\www\\react-fishing-game\\src\\components\\Game\\GameNotification\\index.tsx":"24","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\WaitFish\\index.tsx":"25","C:\\www\\react-fishing-game\\src\\store\\reducers\\position.ts":"26","C:\\www\\react-fishing-game\\src\\store\\reducers\\game.ts":"27","C:\\www\\react-fishing-game\\src\\store\\reducers\\inventory.ts":"28","C:\\www\\react-fishing-game\\src\\store\\reducers\\fishing.ts":"29","C:\\www\\react-fishing-game\\src\\utils\\throttle.ts":"30","C:\\www\\react-fishing-game\\src\\store\\actions\\fishing.ts":"31","C:\\www\\react-fishing-game\\src\\store\\selectors\\position.ts":"32","C:\\www\\react-fishing-game\\src\\components\\Game\\evolution\\index.ts":"33","C:\\www\\react-fishing-game\\src\\components\\Game\\animations\\index.ts":"34","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\index.tsx":"35","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Status\\index.tsx":"36","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Credits\\index.tsx":"37","C:\\www\\react-fishing-game\\src\\components\\Game\\Barometer\\TensionGauge\\index.tsx":"38","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Beginner\\index.tsx":"39","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Advanced\\index.tsx":"40","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Expert\\index.tsx":"41","C:\\www\\react-fishing-game\\src\\components\\ProgressCircle\\index.tsx":"42","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Starter\\index.tsx":"43","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\King\\index.tsx":"44","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Intermediate\\index.tsx":"45","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Abyss\\index.tsx":"46","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Inventory\\index.tsx":"47","C:\\www\\react-fishing-game\\src\\utils\\time.ts":"48","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Sell\\index.tsx":"49","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Buy\\index.tsx":"50","C:\\www\\react-fishing-game\\src\\components\\fishes\\Default\\index.tsx":"51","C:\\www\\react-fishing-game\\src\\components\\misc\\Modal\\index.tsx":"52","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\FishArea\\index.tsx":"53","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\FishGroup\\index.tsx":"54","C:\\www\\react-fishing-game\\src\\interfaces\\position.ts":"55","C:\\www\\react-fishing-game\\src\\hooks\\useLazyAudio\\index.ts":"56","C:\\www\\react-fishing-game\\src\\utils\\tests\\time.test.ts":"57","C:\\www\\react-fishing-game\\src\\utils\\tests\\position.test.ts":"58","C:\\www\\react-fishing-game\\src\\utils\\tests\\math.test.ts":"59","C:\\www\\react-fishing-game\\src\\setupTests.ts":"60","C:\\www\\react-fishing-game\\src\\react-app-env.d.ts":"61","C:\\www\\react-fishing-game\\src\\interfaces\\items.ts":"62","C:\\www\\react-fishing-game\\src\\interfaces\\fishes.ts":"63","C:\\www\\react-fishing-game\\src\\interfaces\\evolution.ts":"64","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\INITIAL.tsx":"65","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\index.tsx":"66","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\index.test.tsx":"67","C:\\www\\react-fishing-game\\src\\components\\misc\\Slider\\index.tsx":"68","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\BAG.tsx":"69","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\THROW_LINE.tsx":"70","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\THROWN.tsx":"71","C:\\www\\react-fishing-game\\src\\components\\misc\\Spinners\\Wave\\index.tsx":"72"},{"size":517,"mtime":1627509175440,"results":"73","hashOfConfig":"74"},{"size":440,"mtime":1627509175451,"results":"75","hashOfConfig":"74"},{"size":302,"mtime":1627509174917,"results":"76","hashOfConfig":"74"},{"size":402,"mtime":1627509175464,"results":"77","hashOfConfig":"74"},{"size":22206,"mtime":1628612120997,"results":"78","hashOfConfig":"74"},{"size":1133,"mtime":1628421969316,"results":"79","hashOfConfig":"74"},{"size":1354,"mtime":1628205265489,"results":"80","hashOfConfig":"74"},{"size":1551,"mtime":1627509175460,"results":"81","hashOfConfig":"74"},{"size":1447,"mtime":1628368314085,"results":"82","hashOfConfig":"74"},{"size":145,"mtime":1627509175461,"results":"83","hashOfConfig":"74"},{"size":1038,"mtime":1627509175473,"results":"84","hashOfConfig":"74"},{"size":1992,"mtime":1628235016782,"results":"85","hashOfConfig":"74"},{"size":1027,"mtime":1627509175475,"results":"86","hashOfConfig":"74"},{"size":532,"mtime":1627509175478,"results":"87","hashOfConfig":"74"},{"size":1677,"mtime":1627509175479,"results":"88","hashOfConfig":"74"},{"size":350,"mtime":1627509175468,"results":"89","hashOfConfig":"74"},{"size":4342,"mtime":1627509175345,"results":"90","hashOfConfig":"74"},{"size":4050,"mtime":1628207143022,"results":"91","hashOfConfig":"74"},{"size":2936,"mtime":1627734877707,"results":"92","hashOfConfig":"74"},{"size":9541,"mtime":1628549850218,"results":"93","hashOfConfig":"74"},{"size":2299,"mtime":1627509175386,"results":"94","hashOfConfig":"74"},{"size":20345,"mtime":1628474223151,"results":"95","hashOfConfig":"74"},{"size":16831,"mtime":1628609581818,"results":"96","hashOfConfig":"74"},{"size":6235,"mtime":1627927907659,"results":"97","hashOfConfig":"74"},{"size":8878,"mtime":1628475782726,"results":"98","hashOfConfig":"74"},{"size":820,"mtime":1627509175471,"results":"99","hashOfConfig":"74"},{"size":4817,"mtime":1628212248711,"results":"100","hashOfConfig":"74"},{"size":4430,"mtime":1627924659461,"results":"101","hashOfConfig":"74"},{"size":2230,"mtime":1627924756113,"results":"102","hashOfConfig":"74"},{"size":275,"mtime":1627509175485,"results":"103","hashOfConfig":"74"},{"size":4994,"mtime":1628610774078,"results":"104","hashOfConfig":"74"},{"size":558,"mtime":1627509175476,"results":"105","hashOfConfig":"74"},{"size":1506,"mtime":1628533395129,"results":"106","hashOfConfig":"74"},{"size":1834,"mtime":1628537083448,"results":"107","hashOfConfig":"74"},{"size":5055,"mtime":1627509175328,"results":"108","hashOfConfig":"74"},{"size":6011,"mtime":1627509175339,"results":"109","hashOfConfig":"74"},{"size":2723,"mtime":1627933151025,"results":"110","hashOfConfig":"74"},{"size":1958,"mtime":1627509175210,"results":"111","hashOfConfig":"74"},{"size":1317,"mtime":1627509175363,"results":"112","hashOfConfig":"74"},{"size":1319,"mtime":1627509175360,"results":"113","hashOfConfig":"74"},{"size":1315,"mtime":1627509175366,"results":"114","hashOfConfig":"74"},{"size":1497,"mtime":1627509175421,"results":"115","hashOfConfig":"74"},{"size":1303,"mtime":1627509175384,"results":"116","hashOfConfig":"74"},{"size":1317,"mtime":1627509175382,"results":"117","hashOfConfig":"74"},{"size":1327,"mtime":1627509175379,"results":"118","hashOfConfig":"74"},{"size":1318,"mtime":1627509175357,"results":"119","hashOfConfig":"74"},{"size":14308,"mtime":1627509175235,"results":"120","hashOfConfig":"74"},{"size":1092,"mtime":1628023170193,"results":"121","hashOfConfig":"74"},{"size":10985,"mtime":1627896075405,"results":"122","hashOfConfig":"74"},{"size":12889,"mtime":1627896103995,"results":"123","hashOfConfig":"74"},{"size":21198,"mtime":1628614830027,"results":"124","hashOfConfig":"74"},{"size":4982,"mtime":1628602597830,"results":"125","hashOfConfig":"74"},{"size":1926,"mtime":1627509175370,"results":"126","hashOfConfig":"74"},{"size":2223,"mtime":1628615432109,"results":"127","hashOfConfig":"74"},{"size":466,"mtime":1628208890216,"results":"128","hashOfConfig":"74"},{"size":711,"mtime":1627839630541,"results":"129","hashOfConfig":"74"},{"size":1476,"mtime":1627942850615,"results":"130","hashOfConfig":"74"},{"size":3873,"mtime":1627509175483,"results":"131","hashOfConfig":"74"},{"size":1138,"mtime":1627509175481,"results":"132","hashOfConfig":"74"},{"size":246,"mtime":1627509175453,"results":"133","hashOfConfig":"74"},{"size":39,"mtime":1627509175450,"results":"134","hashOfConfig":"74"},{"size":428,"mtime":1627509175447,"results":"135","hashOfConfig":"74"},{"size":946,"mtime":1627934171855,"results":"136","hashOfConfig":"74"},{"size":360,"mtime":1627509175443,"results":"137","hashOfConfig":"74"},{"size":6607,"mtime":1628519259185,"results":"138","hashOfConfig":"74"},{"size":3329,"mtime":1628523121462,"results":"139","hashOfConfig":"74"},{"size":394,"mtime":1628253300600,"results":"140","hashOfConfig":"74"},{"size":4765,"mtime":1628612904455,"results":"141","hashOfConfig":"74"},{"size":1558,"mtime":1628367861812,"results":"142","hashOfConfig":"74"},{"size":8619,"mtime":1628508659261,"results":"143","hashOfConfig":"74"},{"size":8677,"mtime":1628610845341,"results":"144","hashOfConfig":"74"},{"size":1802,"mtime":1628522153815,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"j4rwdu",{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"148"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"148"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"148"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"148"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"148"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"148"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"148"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"148"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"212","usedDeprecatedRules":"148"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"148"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"148"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"148"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"148"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"148"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"148"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"148"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"148"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"148"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"148"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"281"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"148"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"304"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"148"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"C:\\www\\react-fishing-game\\src\\index.tsx",[],["316","317"],"C:\\www\\react-fishing-game\\src\\reportWebVitals.ts",[],"C:\\www\\react-fishing-game\\src\\App.tsx",[],"C:\\www\\react-fishing-game\\src\\store\\index.js",[],["318","319"],"C:\\www\\react-fishing-game\\src\\components\\Game\\index.tsx",["320","321","322","323","324","325","326","327","328","329","330","331","332","333","334"],"C:\\www\\react-fishing-game\\src\\interfaces\\game.ts",[],"C:\\www\\react-fishing-game\\src\\store\\actions\\types.ts",[],"C:\\www\\react-fishing-game\\src\\store\\actions\\inventory.ts",[],"C:\\www\\react-fishing-game\\src\\store\\actions\\game.ts",["335"],"import React from 'react'\r\nimport { GameProcess, GameNotif, TutorialEntry } from '../../interfaces/game'\r\nimport {\r\n    SET_GAME_PROCESS,\r\n    ENABLE_BGM,\r\n    OPEN_MAIN_MENU,\r\n    SET_IS_MAIN_MENU_CLOSING,\r\n    SET_FISHROD_LEVEL,\r\n    GAME_NOTIFICATION,\r\n    COMPLETED_TUTORIAL_ENTRY\r\n} from './types'\r\n\r\nexport const setGameProcessAction = (process: GameProcess) => ({ type: SET_GAME_PROCESS, payload: process })\r\nexport const enableBGMAction = (isEnabled: boolean) => ({ type: ENABLE_BGM, payload: isEnabled })\r\n\r\nexport const openMainMenuAction = () => dispatch => {\r\n    dispatch(completeTutorialEntryAction(TutorialEntry.BAG)) // Mark mainmenu tutorial as completed\r\n    dispatch({ type: OPEN_MAIN_MENU, payload: true })\r\n}\r\nexport const closeMainMenuAction = (delay: number = 700) => dispatch => {\r\n    // Wait until closing animation is finished \r\n    dispatch({ type: SET_IS_MAIN_MENU_CLOSING, payload: true })\r\n    window.setTimeout(() => {\r\n        dispatch({ type: OPEN_MAIN_MENU, payload: false })\r\n        dispatch({ type: SET_IS_MAIN_MENU_CLOSING, payload: false })\r\n    }, delay)\r\n}\r\n\r\nexport const setRodLevelAction = (fishrodID: string) => ({ type: SET_FISHROD_LEVEL, payload: fishrodID })\r\nexport const setGameNotificationAction = (notif: GameNotif|null) => ({ type: GAME_NOTIFICATION, payload: notif })\r\n\r\nexport const completeTutorialEntryAction = (entry: TutorialEntry) => ({ type: COMPLETED_TUTORIAL_ENTRY, payload: entry })","C:\\www\\react-fishing-game\\src\\store\\actions\\position.ts",[],"C:\\www\\react-fishing-game\\src\\store\\selectors\\fishing.ts",[],"C:\\www\\react-fishing-game\\src\\store\\selectors\\game.ts",[],"C:\\www\\react-fishing-game\\src\\store\\selectors\\inventory.ts",[],"C:\\www\\react-fishing-game\\src\\utils\\math.ts",[],"C:\\www\\react-fishing-game\\src\\utils\\position.ts",[],"C:\\www\\react-fishing-game\\src\\store\\reducers\\index.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\index.tsx",["336","337","338"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport Inventory from './Inventory'\r\nimport Status from './Status'\r\nimport Shop from './Shop'\r\nimport Credits from './Credits'\r\nimport styles from './index.module.sass'\r\nimport { CgInbox, BiStats, AiTwotoneShop, FaHandsHelping } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { closeMainMenuAction } from '../../../store/actions/game'\r\nimport { isMainMenuClosingSelector } from '../../../store/selectors/game'\r\n\r\ninterface Props {\r\n    closeMenu?: () => void,\r\n    isMenuClosing?: boolean\r\n}\r\n\r\nexport enum SectionID {\r\n    INVENTORY = 'INVENTORY',\r\n    STATS = 'STATS',\r\n    SHOPPING = 'SHOPPING',\r\n    CREDITS = 'CREDITS'\r\n}\r\n\r\nexport const MainMenu: React.FC<Props> = ({ closeMenu, isMenuClosing }) => {\r\n    const [currentSection, setCurrentSection] = useState<SectionID>(SectionID.INVENTORY)\r\n\r\n    // Keyboard events\r\n    useEffect(() => {\r\n        function handleKeyPress(e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 8: // Backspace\r\n                case 46: // Delete\r\n                    closeMenu()\r\n                    break\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keypress', handleKeyPress, false)\r\n        return () => document.removeEventListener('keypress', handleKeyPress, false)\r\n    }, [])\r\n\r\n    const currentSectionJSX = useMemo(() => {\r\n        switch(currentSection) {\r\n            case SectionID.INVENTORY:\r\n                return <Inventory setCurrentSection={setCurrentSection} />\r\n                break\r\n            case SectionID.STATS:\r\n                return <Status setCurrentSection={setCurrentSection} />\r\n                break\r\n            case SectionID.CREDITS:\r\n                return <Credits />\r\n            default: return <Shop />\r\n        }\r\n    }, [currentSection])\r\n\r\n    return (\r\n        <div\r\n            className={`${styles.mainMenu} ${isMenuClosing ? styles.closing : ''}`}\r\n            onClick={closeMenu}\r\n        >\r\n            <main className={styles.menuContent} onClick={e => e.stopPropagation()}>\r\n                {currentSectionJSX}\r\n            </main>\r\n            <nav className={styles.menuNavigation}>\r\n                <ul>\r\n                    <li\r\n                        title=\"Inventory\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.INVENTORY)}}\r\n                        className={`${currentSection === SectionID.INVENTORY ? styles.active : ''} ${styles.inventory}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Inventory </span><CgInbox />\r\n                    </li>\r\n                    <li\r\n                        title=\"Status\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.STATS)}}\r\n                        className={`${currentSection === SectionID.STATS ? styles.active : ''} ${styles.stats}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Status </span><BiStats />\r\n                    </li>\r\n                    <li\r\n                        title=\"Shopping\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.SHOPPING)}}\r\n                        className={`${currentSection === SectionID.SHOPPING ? styles.active : ''} ${styles.shopping}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Shopping </span><AiTwotoneShop />\r\n                    </li>\r\n                    <li\r\n                        title=\"Credits\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.CREDITS)}}\r\n                        className={`${currentSection === SectionID.CREDITS ? styles.active : ''} ${styles.credits}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Credits </span><FaHandsHelping />\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    isMenuClosing: isMainMenuClosingSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    closeMenu: () => dispatch(closeMainMenuAction())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainMenu)","C:\\www\\react-fishing-game\\src\\components\\Game\\Barometer\\index.tsx",["339"],"import React, { useMemo } from 'react'\r\nimport TensionGauge from './TensionGauge'\r\nimport { pxToM } from '../../../utils/position'\r\nimport { GameProcess } from '../../../interfaces/game'\r\nimport { FishRodLevel } from '../../../interfaces/evolution'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { processSelector } from '../../../store/selectors/game'\r\n\r\ninterface Props {\r\n    rodLevel: FishRodLevel,\r\n    baitDistance: number,\r\n    // Redux\r\n    gameProcess?: GameProcess\r\n}\r\n\r\ninterface StepMatch {\r\n    steps: number[],\r\n    subSteps: number[]\r\n}\r\n\r\nexport const Barometer: React.FC<Props> = ({\r\n    rodLevel,\r\n    baitDistance,\r\n    // Redux\r\n    gameProcess\r\n}) => {\r\n    const maxLength = useMemo((): number => pxToM(rodLevel.maxLength), [rodLevel])\r\n    const lineStepLength = useMemo((): number => 10, [])\r\n    const lineSteps = useMemo((): number => Math.ceil(maxLength/lineStepLength), [maxLength, lineStepLength])\r\n    const lineStepMatches = useMemo((): StepMatch => {\r\n        let matches = { steps: [], subSteps: [] }\r\n        for(let i = 0; i < (lineSteps+1)*2 - 1; i++) {\r\n            if (i%2 === 0) {\r\n                matches.steps.push(i*lineStepLength/2)\r\n            } else {\r\n                matches.subSteps.push(i*lineStepLength/2)\r\n            }\r\n        }\r\n        return matches\r\n    }, [lineSteps, lineStepLength])\r\n    const nextStep = useMemo((): number => {\r\n        return lineSteps*lineStepLength\r\n    }, [lineSteps, lineStepLength])\r\n    const lineStepsJSX = useMemo(() => {\r\n        let JSX = []\r\n        // How much times step length in maxLength\r\n        for (let i = 0; i <= nextStep; i++) {\r\n            const isReached = baitDistance >= i ? styles.reached : ''\r\n            if (lineStepMatches.steps.includes(i)) {\r\n                // Step\r\n                JSX.push(<div key={i} className={`${styles.step} ${isReached} ${i === 0 ? styles.origin : ''}`}>\r\n                    <span><strong>{i}</strong></span>\r\n                </div>)\r\n            } else if (lineStepMatches.subSteps.includes(i)) {\r\n                // Substep\r\n                JSX.push(<div key={i} className={`${styles.subStep} ${isReached}`}></div>)\r\n            } else continue\r\n        }\r\n        return JSX\r\n    }, [lineSteps, lineStepLength, baitDistance])\r\n    const linePercentage = useMemo((): number => baitDistance/maxLength*100, [baitDistance, maxLength])\r\n\r\n    return <div className={`${styles.barometer} ${rodLevel.className}`}>\r\n        <nav>\r\n            <div className={styles.handle}></div>\r\n            <div className={styles.tip}>\r\n                <div className={styles.lineLengthScale}>\r\n                    <div\r\n                        className={styles.lengthLimit}\r\n                        style={{ width: `${maxLength/nextStep*100}%` }}\r\n                    >\r\n                        <meter\r\n                            className={styles.lineLength}\r\n                            min={0}\r\n                            max={maxLength}\r\n                            value={baitDistance}\r\n                            high={maxLength*3/4}\r\n                            low={maxLength/4}\r\n                            optimum={maxLength}\r\n                        >\r\n                        </meter>\r\n                        <label style={{ width: `${linePercentage}%` }}>\r\n                            <span className={styles.tooltip}>\r\n                                <span><strong>{baitDistance}</strong>m</span>\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n                    {lineStepsJSX}\r\n                </div>\r\n                {gameProcess === GameProcess.BATTLE && (\r\n                    // Line tension gauge\r\n                    <TensionGauge />\r\n                )}\r\n            </div>\r\n        </nav>\r\n    </div>\r\n}\r\n\r\n// Redux connection\r\nconst mapStateToProps = state => ({\r\n    gameProcess: processSelector(state)\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatch => ({})\r\n)(Barometer)","C:\\www\\react-fishing-game\\src\\components\\Game\\AudioPlayer\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\Initial\\index.tsx",["340","341","342","343","344","345","346","347","348"],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\ThrowLine\\index.tsx",["349","350","351","352","353","354","355","356","357","358","359"],"import { Dispatch, SetStateAction, ReactNode, useCallback, useRef, useEffect, useState, useMemo } from 'react'\r\nimport ProgressCircle from '../../../ProgressCircle'\r\nimport { LoadTutorial } from '../../tutorial/index'\r\nimport { GameProcess, GameProcessComponent, TutorialEntry } from '../../../../interfaces/game'\r\nimport { Coordinates, Path } from '../../../../interfaces/position'\r\nimport { FishRodLevel } from '../../../../interfaces/evolution'\r\nimport { getVectorLength, getNextCoordinatesOfPath } from '../../../../utils/position'\r\nimport throttle from '../../../../utils/throttle'\r\nimport { splashAnim } from '../../animations'\r\nimport useLazyAudio from '../../../../hooks/useLazyAudio'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { useDispatch } from 'react-redux'\r\nimport { emitBaitFallEventAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    setProcess: Dispatch<SetStateAction<GameProcess>>,\r\n    scrollToBait: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    scrollToPlayer: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    rodAngle: number,\r\n    setRodAngle: Dispatch<SetStateAction<number>>,\r\n    rodOffset: Coordinates,\r\n    setRodOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitOffset: Coordinates,\r\n    setBaitOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitOffsetLimit: Path,\r\n    baitLakeCoords: Coordinates,\r\n    lakeRef: any,\r\n    baitRef: any,\r\n    setBaitType: Dispatch<SetStateAction<string>>,\r\n    playerCoordinates: Coordinates,\r\n    rodLevel: FishRodLevel,\r\n    setIsBarometerVisible: Dispatch<SetStateAction<boolean>>,\r\n    isBarometerVisible: boolean\r\n}\r\n\r\nexport const maxAngle: number = 70\r\nexport const minAngle: number = -70\r\n\r\nconst ThrowLineProcess = (({\r\n    setProcess,\r\n    scrollToBait,\r\n    scrollToPlayer,\r\n    rodAngle,\r\n    setRodAngle,\r\n    rodOffset,\r\n    setRodOffset,\r\n    baitOffset,\r\n    setBaitOffset,\r\n    baitOffsetLimit,\r\n    baitRef,\r\n    baitLakeCoords,\r\n    lakeRef,\r\n    setBaitType,\r\n    playerCoordinates,\r\n    rodLevel,\r\n    isBarometerVisible,\r\n    setIsBarometerVisible\r\n }) => {\r\n    // State\r\n    const [gaugeValue, setGaugeValue] = useState<number>(0)\r\n    const [spaceFired, setSpaceFired] = useState<boolean>(false)\r\n    const [isPushing, setIsPushing] = useState<boolean>(false)\r\n    const [isPreparingThrow, setIsPreparingThrow] = useState<boolean>(false)\r\n    const [isThrowing, setIsThrowing] = useState<boolean>(false)\r\n    const [hasThrown, setHasThrown] = useState<boolean>(false)\r\n    const [processFrozen, setProcessFrozen] = useState<boolean>(false)\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const emitBaitFallEvent = useCallback(() => dispatch(emitBaitFallEventAction()), [])\r\n\r\n    // Refs\r\n    const lastTouchX = useRef<number>(null)\r\n    const gaugeRef = useRef<any>(null)\r\n    const gaugeValueRef = useRef<number>(0)\r\n    const requestRef = useRef<any>(null)\r\n    const directionRef = useRef<number>(rodAngle)\r\n    const stepRef = useRef<number>(0)\r\n    const remainingDistanceRef = useRef<number>(0)\r\n\r\n    // Audio\r\n    const baitDropSE = useLazyAudio({ src: 'se/bait-drop.mp3' })\r\n    const badassSE = useLazyAudio({ src: 'se/badass.mp3', volume: .5 })\r\n\r\n    // Go back to initial process\r\n    const goBack = useCallback(\r\n        (): void => {\r\n            if (processFrozen) return\r\n            // Set fishing rod to initial position before\r\n            setRodAngle(0)\r\n            setRodOffset({ x: 0, y: -20 })\r\n            setBaitOffset({ x: 0, y: -20, transition: '.2s ease all' })\r\n            setBaitType('default')\r\n            setProcess(GameProcess.INITIAL)\r\n        }, [processFrozen]\r\n    )\r\n\r\n    // Move fishing rod forward on process start\r\n    useEffect(() => {\r\n        setRodOffset({ x: 0, y: 0 })\r\n        setBaitOffset({ x: 0, y: 0 })\r\n        scrollToPlayer()\r\n    }, [])\r\n\r\n    // Hide barometer\r\n    useEffect(() => isBarometerVisible && setIsBarometerVisible(false), [])\r\n\r\n    // Move fishing rod direction\r\n    const changeRodDirection = useCallback(\r\n        (angle: number) => {\r\n            if (processFrozen) return\r\n            if (!isThrowing) {\r\n                setRodAngle(angle)\r\n                setRodOffset({ x: -angle/4, y: -Math.abs(angle)/2 })\r\n                setBaitOffset({x: -angle, y: -Math.abs(angle)/2 })\r\n            }\r\n        }, [isThrowing, processFrozen]\r\n    )\r\n\r\n    // Throw bait at the right distance and direction\r\n    useEffect(() => {\r\n        if (isThrowing) {\r\n            // Display barometer\r\n            setIsBarometerVisible(true)\r\n            // Initial throw speed\r\n            stepRef.current = remainingDistanceRef.current / 15 // stepRef.current is the distance travelled in px / frame\r\n\r\n            const move = (): void => {\r\n                if (remainingDistanceRef.current > 0) {\r\n                    // Bait is still moving\r\n                    // Get next coordinates\r\n                    let nextCoords: Coordinates = getNextCoordinatesOfPath(directionRef.current, stepRef.current)\r\n                    let nextOffset: Coordinates = { x: baitOffset.x - nextCoords.x, y: baitOffset.y + nextCoords.y }\r\n                    remainingDistanceRef.current = Math.floor(remainingDistanceRef.current - stepRef.current)\r\n                    /*\r\n                        Detect collision against lake borders before it happens\r\n                        and change direction in that case\r\n                    */\r\n                    if (nextOffset.x > baitOffsetLimit.to.x) {\r\n                        // Handle right limit collision\r\n                        // Deviate\r\n                        directionRef.current *= -1\r\n                        // Kinetic energy loss\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    } else if (nextOffset.y > baitOffsetLimit.to.y) {\r\n                        // Handle bottom limit collision\r\n                        directionRef.current = directionRef.current - 270\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    } else if (nextOffset.x < baitOffsetLimit.from.x) {\r\n                        // Handle left limit collision\r\n                        directionRef.current *= -1\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    /*} else if (nextOffset.y < baitOffsetLimit.from.y) {\r\n                        // Handle top limit collision\r\n                        directionRef.current = directionRef.current - 270\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    */\r\n                    }\r\n\r\n                    // Apply translation and scroll\r\n                    setBaitOffset(nextOffset)\r\n                    scrollToBait()\r\n\r\n                    // Ease-out\r\n                    stepRef.current *= .999 // Deceleration coeff\r\n                    throttle(move, 100)\r\n                } else {\r\n                    // Bait has reached the correct distance\r\n                    emitBaitFallEvent()\r\n                    setIsThrowing(false)\r\n                    setBaitType('immersed')\r\n                    // Play bait drop sound effect\r\n                    try {\r\n                        baitDropSE.play()\r\n                    } catch (err) {\r\n                        console.log(err)\r\n                    }\r\n                    // Play \"badass\"\" sound effect if throw was particularly high\r\n                    if (gaugeValueRef.current >= 90) {\r\n                        window.setTimeout(() => {\r\n                            try {\r\n                                badassSE.play()\r\n                            } catch (err) {\r\n                                console.log('Failed to play \"badass\" sound effect')\r\n                            }\r\n                        }, 1000)\r\n                    }\r\n                    // Play splash animation on bait\r\n                    baitRef.current && splashAnim(baitLakeCoords, lakeRef.current)\r\n                    // Wait for fish\r\n                    gaugeValueRef.current = 0\r\n                    setProcess(GameProcess.WAIT_FISH)\r\n                    return\r\n                }\r\n            }\r\n            throttle(move, 100)()\r\n        }\r\n    }, [isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords])\r\n\r\n    const confirmThrow = useCallback(\r\n        (): void => {\r\n            if (processFrozen) return\r\n            if (gaugeValueRef.current >= 5) {\r\n                const reach = Math.round(gaugeValueRef.current)/100 * rodLevel.maxLength\r\n                remainingDistanceRef.current = reach\r\n                setIsThrowing(true)\r\n                setBaitOffset({ x: 0, y: 0 })\r\n                // Initial direction\r\n                directionRef.current = rodAngle\r\n            }\r\n            setIsPreparingThrow(false)\r\n            setGaugeValue(0)\r\n        }, [rodLevel, rodAngle, processFrozen]\r\n    )\r\n\r\n    // Attach event listeners\r\n    useEffect(() => {\r\n        function handleKeyDown (e: KeyboardEvent): void {\r\n            switch (e.key) {\r\n                case 'Backspace':\r\n                case 'Delete':\r\n                case '0':\r\n                    e.preventDefault()\r\n                    if (processFrozen) break\r\n                    if (!isThrowing) {\r\n                        goBack()\r\n                    }\r\n                    break\r\n                case 'ArrowLeft':\r\n                    e.preventDefault()\r\n                    if (processFrozen) break\r\n                    if (!isThrowing) {\r\n                        // Increase fishrod angle\r\n                        const addOffset = 4\r\n                        if (rodAngle < maxAngle) {\r\n                            let newAngle = 0\r\n                            if (rodAngle + addOffset >= maxAngle) newAngle = maxAngle\r\n                            else newAngle = rodAngle + addOffset\r\n                            changeRodDirection(newAngle)\r\n                        }\r\n                    }\r\n                    break\r\n                case 'ArrowUp':\r\n                    e.preventDefault()\r\n                    break\r\n                case 'ArrowRight':\r\n                    e.preventDefault()\r\n                    if (processFrozen) break\r\n                    if (!isThrowing) {\r\n                        // Decrease fishrod angle\r\n                        const subOffset = 4\r\n                        if (rodAngle > minAngle) {\r\n                            let newAngle = 0\r\n                            if (rodAngle - subOffset <= minAngle) newAngle = minAngle\r\n                            else newAngle = rodAngle - subOffset\r\n                            changeRodDirection(newAngle)\r\n                        }\r\n                    }\r\n                    break\r\n                case 'ArrowDown':\r\n                    e.preventDefault()\r\n                    break\r\n                case ' ': // Space\r\n                case 'Enter': // Enter\r\n                    e.preventDefault()\r\n                    if (processFrozen) break\r\n                    if (!isThrowing) {\r\n                        if (!spaceFired) { // Prevent mousedown event from firing multiple times\r\n                            setSpaceFired(true)\r\n                            if(!isPreparingThrow) {\r\n                                setIsPreparingThrow(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    break\r\n            }\r\n        }\r\n        function handleKeyUp (e: KeyboardEvent): void {\r\n            if (processFrozen) return\r\n            if (!isThrowing) {\r\n                switch (e.key) {\r\n                    case ' ':\r\n                    case 'Enter':\r\n                        setSpaceFired(false)\r\n                        if (isPreparingThrow) {\r\n                            confirmThrow()\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n        function handleMouseDown (e: Event): void {\r\n            if (processFrozen) return\r\n            if (!isThrowing) {\r\n                setSpaceFired(true)\r\n                if(!isPreparingThrow) {\r\n                    setIsPreparingThrow(true)\r\n\r\n                }\r\n            }\r\n        }\r\n        function handleMouseUp (e: Event): void {\r\n            if (processFrozen) return\r\n            setSpaceFired(false)\r\n            if (isPreparingThrow) {\r\n                confirmThrow()\r\n            }\r\n        }\r\n        function handleTouchMove (e: TouchEvent) {\r\n            if (processFrozen) return\r\n            const currentTouchX = e.touches[0].clientX\r\n            if (lastTouchX.current !== null && !isThrowing) {\r\n                e.stopPropagation()\r\n                if (currentTouchX > lastTouchX.current) {\r\n                    // Swap right\r\n                    // Decrease fishrod angle\r\n                    const subOffset: number = 8\r\n                    if (rodAngle > minAngle) {\r\n                        let newAngle: number = 0\r\n                        if (rodAngle - subOffset <= minAngle) newAngle = minAngle\r\n                        else newAngle = rodAngle - subOffset\r\n                        changeRodDirection(newAngle)\r\n                    }\r\n                } else if (currentTouchX < lastTouchX.current) {\r\n                    // Swap left\r\n                    // Increase fishrod angle\r\n                    const addOffset: number = 6\r\n                    if (rodAngle < maxAngle) {\r\n                        let newAngle: number = 0\r\n                        if (rodAngle + addOffset >= maxAngle) newAngle = maxAngle\r\n                        else newAngle = rodAngle + addOffset\r\n                        changeRodDirection(newAngle)\r\n                    }\r\n                }\r\n            }\r\n            lastTouchX.current = currentTouchX\r\n        }\r\n        const handleTouchMoveThrottle = throttle(handleTouchMove, 50)\r\n    \r\n        document.addEventListener('keydown', handleKeyDown, false)\r\n        document.addEventListener('keyup', handleKeyUp, false)\r\n        document.addEventListener('mousedown', handleMouseDown, false)\r\n        document.addEventListener('mouseup', handleMouseUp, false)\r\n        // Touch events\r\n        document.addEventListener('touchmove', handleTouchMoveThrottle, false)\r\n        if (gaugeRef.current) {\r\n            gaugeRef.current.addEventListener('touchstart', (e: TouchEvent) => {setIsPushing(true); handleMouseDown(e)}, false)\r\n            gaugeRef.current.addEventListener('touchmove', (e: TouchEvent) => {e.stopPropagation(); e.preventDefault()}, false)\r\n            gaugeRef.current.addEventListener('touchend', (e: TouchEvent) => {setIsPushing(false); handleMouseUp(e)}, false)\r\n        }\r\n\r\n        return (): void => {\r\n            document.removeEventListener('keydown', handleKeyDown, false)\r\n            document.removeEventListener('keyup', handleKeyUp, false)\r\n            document.removeEventListener('mousedown', handleMouseDown, false)\r\n            document.removeEventListener('mouseup', handleMouseUp, false)\r\n            document.removeEventListener('touchmove', handleTouchMoveThrottle, false)\r\n            if (gaugeRef.current) {\r\n                gaugeRef.current.removeEventListener('touchstart', (e: TouchEvent) => {setIsPushing(true); handleMouseDown(e)}, false)\r\n                gaugeRef.current.removeEventListener('touchmove', (e: TouchEvent) => {e.stopPropagation(); e.preventDefault()}, false)\r\n                gaugeRef.current.removeEventListener('touchend', (e: TouchEvent) => {setIsPushing(false); handleMouseUp(e)}, false)\r\n            }\r\n        }\r\n    }, [\r\n        isPreparingThrow,\r\n        spaceFired,\r\n        rodAngle,\r\n        rodOffset,\r\n        confirmThrow,\r\n        isThrowing,\r\n        processFrozen\r\n    ])\r\n\r\n    // Add mousemove event\r\n    useEffect(() => {\r\n        function handleMouseMove (e: MouseEvent): void {\r\n            if (processFrozen) return\r\n            // Follow mouse\r\n            const { offsetX, pageY } = e\r\n            const centerX: number = playerCoordinates.x + playerCoordinates.width/2\r\n            const centerY: number = playerCoordinates.y * 3/2\r\n            const adjacent: number = getVectorLength({ from: { x: centerX, y: centerY }, to: { x: centerX, y: pageY } })\r\n            const opposite: number = offsetX - centerX\r\n            // tan(rodAngle) = opposite/adjacent\r\n            const angleRadians: number = Math.atan(opposite/adjacent)\r\n            const angleDegrees: number = angleRadians*180/Math.PI\r\n            if (!Number.isNaN(angleDegrees) && angleDegrees >= minAngle && angleDegrees <= maxAngle) {\r\n                // Move rod as angle changes\r\n                changeRodDirection(-angleDegrees)\r\n            }\r\n        }\r\n        const handleMouseMoveThrottle = throttle(handleMouseMove, 50)\r\n\r\n        // Disable mousemove event once bait has been thrown\r\n        if (isThrowing) {\r\n            window.removeEventListener('mousemove', handleMouseMoveThrottle, false)\r\n        } else {\r\n            window.addEventListener('mousemove', handleMouseMoveThrottle, false)\r\n        }\r\n        \r\n        return () => window.removeEventListener('mousemove', handleMouseMoveThrottle, false)\r\n    }, [playerCoordinates, changeRodDirection, isThrowing, processFrozen])\r\n\r\n    // Prepare throw\r\n    useEffect(() => {\r\n        function prepare (timestamp: number): void {\r\n            if (isPreparingThrow) {\r\n                if (gaugeValueRef.current < 100) {\r\n                    let nextValue = gaugeValueRef.current + gaugeValueRef.current/20 + .5\r\n                    if (nextValue > 100) nextValue = 100\r\n                    gaugeValueRef.current = nextValue //= Math.min(timestamp, gaugeValueRef.current + 1)\r\n                    setGaugeValue(gaugeValueRef.current)\r\n                    requestRef.current = requestAnimationFrame(prepare)\r\n                } else {\r\n                    // Value has reached max: set down to zero and cancel throw\r\n                    gaugeValueRef.current = 0\r\n                    setGaugeValue(0)  \r\n                    setIsPreparingThrow(false)\r\n                }\r\n            }\r\n        }\r\n        if (isPreparingThrow) {\r\n            // Prepare throw\r\n            requestRef.current = requestAnimationFrame(prepare)\r\n        } else {\r\n            if (requestRef.current) {\r\n                cancelAnimationFrame(requestRef.current)\r\n                requestRef.current = null\r\n            }\r\n        }\r\n\r\n        return () => cancelAnimationFrame(requestRef.current)\r\n    }, [isPreparingThrow, confirmThrow])\r\n\r\n    const gaugeMessage = useMemo((): ReactNode => {\r\n        if (!gaugeValueRef) return null\r\n        if (gaugeValueRef.current === null || gaugeValueRef.current < 5) return <span className={`${styles.gaugeMSG} ${styles.pushHere}`}>Push</span>\r\n        if (gaugeValueRef.current >= 5 && gaugeValueRef.current < 50) return <span className={styles.gaugeMSG}>Hold</span>\r\n        if (gaugeValueRef.current >= 50 && gaugeValueRef.current < 80) return <span className={`${styles.gaugeMSG} ${styles.high}`}>Release</span>\r\n        if (gaugeValueRef.current >= 80) return <span className={`${styles.gaugeMSG} ${styles.optimal}`}>Now</span>\r\n    }, [gaugeValueRef.current])\r\n\r\n    // Hide menu when player is throwing fishing line\r\n    if (isThrowing) return null\r\n\r\n    return <nav className={`${styles.navigation} menu`}>\r\n        <button\r\n            className={`btn btn-cancel ${styles.cancelBTN}`}\r\n            onClick={goBack}\r\n        >\r\n            Cancel\r\n        </button>\r\n        <div className={`${styles.gauge} ${isPushing && isPreparingThrow ? styles.userPush : ''}`} ref={gaugeRef}>\r\n            <ProgressCircle\r\n                value={gaugeValue}\r\n                trackClass={styles.track}\r\n                centerClass={styles.center}\r\n            >\r\n                {gaugeMessage}\r\n            </ProgressCircle>\r\n        </div>\r\n        <LoadTutorial \r\n            entry={TutorialEntry.THROW_LINE}\r\n            onLoad={() => !processFrozen && setProcessFrozen(true)}\r\n            afterComplete={() => setProcessFrozen(false)}\r\n         />\r\n    </nav>\r\n}) as GameProcessComponent<Props>\r\nThrowLineProcess.GameProcess = GameProcess.THROW_LINE\r\n\r\nexport default ThrowLineProcess","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\Battle\\index.tsx",["360","361","362","363","364","365","366","367"],"C:\\www\\react-fishing-game\\src\\components\\Game\\GameNotification\\index.tsx",["368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384"],"import React, { useMemo, useEffect,useState } from 'react'\r\nimport { GameNotif, GameNotifType } from '../../../interfaces/game'\r\nimport useLazyAudio from '../../../hooks/useLazyAudio'\r\nimport { MdMoodBad, GiTrophyCup, GiTrophy, BsInfoCircleFill, FaPlus } from 'react-icons/all'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { gameNotificationSelector } from '../../../store/selectors/game'\r\nimport { setGameNotificationAction } from '../../../store/actions/game'\r\n\r\ninterface Props {\r\n    // Redux\r\n    gameNotification: GameNotif,\r\n    destroyNotification: () => void\r\n}\r\n\r\nconst GameNotification: React.FC<Props> = ({\r\n    // Redux\r\n    gameNotification,\r\n    destroyNotification\r\n}) => {\r\n    // Props\r\n    const { html, type } = gameNotification\r\n    const { header, body, footer } = html\r\n    const duration = gameNotification.duration || 10\r\n    const transition = gameNotification.transition || 1\r\n\r\n    // State\r\n    const [isClosing, setIsClosing] = useState<boolean>(false)\r\n\r\n    // Audio\r\n    // Decide which SE to load depending on notification type\r\n    const SEPath = useMemo((): string => {\r\n        switch(type) {\r\n            case GameNotifType.INFO:\r\n                return 'infobleep.mp3'\r\n                break\r\n            case GameNotifType.SUCCESS:\r\n                return 'short-success.mp3'\r\n                break\r\n            case GameNotifType.GREAT_SUCCESS:\r\n                return 'long-success.mp3'\r\n                break\r\n            case GameNotifType.ITEM:\r\n                return 'got-item.mp3'\r\n                break\r\n            case GameNotifType.FAIL:\r\n                return 'xylo.mp3'\r\n                break\r\n            default: return ''\r\n        }\r\n    }, [type])\r\n    const soundEffect = useLazyAudio({ src: `se/${SEPath}` }, [SEPath])\r\n    \r\n    // Play audio after mount\r\n    useEffect(() => {\r\n        if (soundEffect) {\r\n            const playPromise = soundEffect.play()\r\n            if (typeof playPromise !== 'undefined') {\r\n                playPromise\r\n                    .then(() => null)\r\n                    .catch(() => console.log(`Failed to play ${SEPath} sound effect`))\r\n            }\r\n        }\r\n    }, [soundEffect])\r\n\r\n    // Destroy notification after duration\r\n    useEffect(() => {\r\n        const transitionEndTimerID = setTimeout(() => setIsClosing(true), duration*1000 - transition*1000)\r\n        const destroyTimerID = setTimeout(destroyNotification, duration*1000)\r\n        return () => {\r\n            window.clearTimeout(transitionEndTimerID)\r\n            window.clearTimeout(destroyTimerID)\r\n        }\r\n    }, [duration])\r\n\r\n    // Style notif depending on type\r\n    const typeClass = useMemo((): string => {\r\n        switch(type) {\r\n            case GameNotifType.INFO:\r\n                return styles.info\r\n                break\r\n            case GameNotifType.SUCCESS:\r\n                return styles.success\r\n                break\r\n            case GameNotifType.GREAT_SUCCESS:\r\n                return styles.greatSuccess\r\n                break\r\n            case GameNotifType.ITEM:\r\n                return styles.item\r\n                break\r\n            case GameNotifType.FAIL:\r\n                return styles.fail\r\n                break\r\n            default: return ''\r\n        }\r\n    }, [type])\r\n\r\n    // Header icon depends on type too\r\n    const typeIcon = useMemo((): any => {\r\n        switch (type) {\r\n            case GameNotifType.FAIL:\r\n                return <MdMoodBad className={styles.notifIcon} />\r\n                break\r\n            case GameNotifType.INFO:\r\n                return <BsInfoCircleFill className={styles.notifIcon} />\r\n                break\r\n            case GameNotifType.SUCCESS:\r\n                return <GiTrophy className={styles.notifIcon} />\r\n                break\r\n            case GameNotifType.GREAT_SUCCESS:\r\n                return <GiTrophyCup className={styles.notifIcon} />\r\n                break\r\n            case GameNotifType.ITEM:\r\n                return <FaPlus className={styles.notifIcon} />\r\n                break\r\n            default: return null\r\n        }\r\n    }, [type])\r\n\r\n    return <div\r\n        className={`\r\n            ${styles.gameNotif} \r\n            ${isClosing ? styles.closing : ''}\r\n            ${typeClass}\r\n        `}\r\n        style={{ transitionDuration: transition + 's' }}\r\n    >\r\n        {header && (\r\n            <header\r\n                className={styles.notifHeader}\r\n                style={{ animationDuration: transition + 's' }}\r\n            >\r\n                <div\r\n                    className={styles.headerContent}\r\n                    dangerouslySetInnerHTML={{ __html: header }}\r\n                >\r\n                </div>\r\n                {typeIcon}\r\n            </header>\r\n        )}\r\n        {body && (\r\n            <main\r\n                className={styles.notifBody}\r\n                dangerouslySetInnerHTML={{ __html: body }}\r\n                style={{\r\n                    // Slide left then fade in\r\n                    animationDelay: transition + 's, ' + transition*2 + 's',\r\n                    animationDuration: transition + 's, ' + transition + 's',\r\n                    borderRadius: footer ? '0' : '0 0 5px 5px',\r\n                    transition: transition + 's'\r\n                }}\r\n            ></main>\r\n        )}\r\n        {footer && (\r\n            <footer\r\n                className={styles.notifFooter}\r\n                dangerouslySetInnerHTML={{ __html: footer }}\r\n                style={{\r\n                    // Slide left then fade in\r\n                    animationDelay: transition + 's, ' + transition*2 + 's',\r\n                    animationDuration: transition + 's, ' + transition + 's',\r\n                    borderRadius: '0 0 5px 5px',\r\n                    transition: transition + 's'\r\n                }}\r\n            ></footer>\r\n        )}\r\n    </div>\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    gameNotification: gameNotificationSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    destroyNotification: () => dispatch(setGameNotificationAction(null))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GameNotification)","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\WaitFish\\index.tsx",["385","386","387","388"],"import { useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\r\nimport { LoadTutorial } from '../../tutorial/index'\r\nimport { GameProcess, GameProcessComponent, TutorialEntry } from '../../../../interfaces/game'\r\nimport { Coordinates } from '../../../../interfaces/position'\r\nimport throttle from '../../../../utils/throttle'\r\nimport useLazyAudio from '../../../../hooks/useLazyAudio'\r\nimport { BsArrowRepeat } from 'react-icons/bs'\r\nimport styles from './index.module.sass'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { makeBaitAvailableAction } from '../../../../store/actions/fishing'\r\nimport { isBaitAvailableSelector } from '../../../../store/selectors/fishing'\r\n\r\ninterface Props {\r\n    baitOffset: Coordinates,\r\n    setBaitOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitDistance: number,\r\n    lineLength: number,\r\n    setBaitType: Dispatch<SetStateAction<string>>,\r\n    setProcess: Dispatch<SetStateAction<GameProcess>>,\r\n    setRodAngle: Dispatch<SetStateAction<number>>,\r\n    scrollToPlayer: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    scrollToBait: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    setIsBarometerVisible: Dispatch<SetStateAction<boolean>>,\r\n    isBarometerVisible: boolean\r\n}\r\n\r\nconst WaitFish: GameProcessComponent<Props> = ({\r\n    baitOffset,\r\n    setBaitOffset,\r\n    baitDistance,\r\n    lineLength,\r\n    setBaitType,\r\n    setProcess,\r\n    setRodAngle,\r\n    scrollToPlayer,\r\n    scrollToBait,\r\n    isBarometerVisible,\r\n    setIsBarometerVisible\r\n}) => {\r\n    // Audio\r\n    const reelingSE = useLazyAudio({ src: 'se/reeling.mp3', volume: 1/16, loop: true })\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const makeBaitAvailable = useCallback(\r\n        (bool: boolean) => dispatch(makeBaitAvailableAction(bool)), [dispatch]\r\n    )\r\n    const isBaitAvailable = useSelector(isBaitAvailableSelector)\r\n    // Fishes can only detect/interact with the bait during this process\r\n    useEffect(() => {\r\n        makeBaitAvailable(true)\r\n        return () => makeBaitAvailable(false)\r\n    }, [])\r\n\r\n    // State\r\n    const [isReeling, setIsReeling] = useState<boolean>(false)\r\n    const [isMouseDown, setIsMouseDown] = useState<boolean | null>(null)\r\n    const [processFrozen, setProcessFrozen] = useState<boolean>(false)\r\n\r\n    // Go back to previous process (retry throwing line)\r\n    const goBack = useCallback(\r\n        (): void => {\r\n            if (processFrozen) return\r\n            setBaitType('default')\r\n            scrollToPlayer('smooth')\r\n            setProcess(GameProcess.THROW_LINE)\r\n        }, [scrollToPlayer, setProcess, setBaitType, processFrozen]\r\n    )\r\n\r\n    const reelIn = useCallback(\r\n        ():void => {\r\n            if (processFrozen) return\r\n            if (baitDistance > 0) {\r\n                // REEL IN\r\n                !isReeling && setIsReeling(true)\r\n                // Line length that we need to reel in during this execution\r\n                const step: number = 4\r\n                // Find out angle\r\n                const angleRadians: number = Math.atan(baitOffset.x/baitOffset.y)\r\n                const angleDegrees: number = angleRadians*180/Math.PI\r\n                // Find out next offset coords from angle and hypotenuse\r\n                const hypotenuse: number = lineLength - step\r\n                const opposite: number = Math.sin(angleRadians) * hypotenuse\r\n                const adjacent: number = Math.cos(angleRadians) * hypotenuse\r\n                // Apply translation and lean fishrod towards target\r\n                setBaitOffset({ x: opposite, y: adjacent })\r\n                setRodAngle(-angleDegrees)\r\n                // Scroll to new position\r\n                scrollToBait()\r\n            } else {\r\n                // PLAYER HAS REELED ALL THE LINE IN\r\n                setIsReeling(false)\r\n                goBack()\r\n            }\r\n        }, [lineLength, isReeling, baitDistance, goBack, processFrozen]\r\n    )\r\n\r\n    // Show barometer if it's not visible\r\n    useEffect(() => {\r\n        if (!isBarometerVisible) {\r\n            setIsBarometerVisible(true)\r\n        }\r\n    }, [])\r\n\r\n    // Reeling effects\r\n    useEffect(() => {\r\n        if (isReeling) {\r\n            // Play sound effect\r\n            const reelingSEPromise = reelingSE.play()\r\n            if (typeof reelingSEPromise !== 'undefined') {\r\n                reelingSEPromise\r\n                .then(() => null)\r\n                .catch(() => console.log('Failed to play reeling SE'))\r\n            }\r\n        } else {\r\n            // Stop sound effect if it's playing\r\n            if (!reelingSE.paused) {\r\n                reelingSE.pause()\r\n                reelingSE.currentTime = 0\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if (!reelingSE.paused) reelingSE.pause()\r\n        }\r\n    }, [isReeling])\r\n\r\n    // Attach event listeners\r\n    // Cancel event\r\n    useEffect(() => {\r\n        function handleBackSpace (e: KeyboardEvent): void {\r\n            switch(e.key) {\r\n                case 'Backspace':\r\n                case 'Delete':\r\n                case '0':\r\n                    e.preventDefault()\r\n                    goBack()\r\n                    break\r\n            }\r\n        }\r\n        document.addEventListener('keydown', handleBackSpace, true)\r\n        return () => document.removeEventListener('keydown', handleBackSpace, true)\r\n    }, [goBack])\r\n    // Space/Enter keys\r\n    useEffect(() => {\r\n        function handleSpace (e: KeyboardEvent): void {\r\n            switch(e.key) {\r\n                case ' ':\r\n                case 'Enter':\r\n                    e.preventDefault()\r\n                    reelIn()\r\n                    break\r\n            }\r\n        }\r\n        const handleSpaceThrottle = throttle(handleSpace, 1000)\r\n        function handleSpaceUp (e: KeyboardEvent): void {\r\n            switch (e.key) {\r\n                case ' ':\r\n                case 'Enter':\r\n                    // Stop reeling\r\n                    setIsReeling(false)\r\n                    break\r\n            }\r\n        } \r\n        \r\n        document.addEventListener('keydown', handleSpaceThrottle, true)\r\n        document.addEventListener('keyup', handleSpaceUp, false)\r\n        return () => {\r\n            document.removeEventListener('keydown', handleSpaceThrottle, true)\r\n            document.removeEventListener('keyup', handleSpaceUp, false)\r\n        }\r\n    }, [reelIn])\r\n    // Mousedown/up\r\n    useEffect(() => {\r\n        function handleMouseDown (e: MouseEvent): void {\r\n            if (processFrozen) return\r\n            setIsMouseDown(true)\r\n        }\r\n        function handleMouseUp (e: MouseEvent) : void {\r\n            if (processFrozen) return\r\n            setIsMouseDown(false)\r\n        }\r\n        document.body.addEventListener('pointerdown', handleMouseDown, false)\r\n        document.body.addEventListener('pointerup', handleMouseUp, false)\r\n\r\n        return () => {\r\n            document.body.removeEventListener('pointerdown', handleMouseDown, false)\r\n            document.body.removeEventListener('pointerup', handleMouseUp, false)\r\n        }\r\n    }, [processFrozen])\r\n    useEffect(() => {\r\n        if (isMouseDown) {\r\n            // Mouse down\r\n            throttle(reelIn, 1000)()\r\n        } else if (isMouseDown === false) {\r\n            // Mouse up\r\n            setIsReeling(false)\r\n            // Reinitialize isMouseDown state\r\n            setIsMouseDown(null)\r\n        }\r\n    }, [isMouseDown, reelIn])\r\n\r\n    // Disable other keys\r\n    useEffect(() => {\r\n        function disableKeys (e: KeyboardEvent): void {\r\n            switch(e.key) {\r\n                case 'ArrowLeft': // Left\r\n                case 'ArrowUp': // Top\r\n                case 'ArrowRight': // Right\r\n                case 'ArrowDown': // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n            }\r\n        }\r\n        document.addEventListener('keydown', disableKeys, false)\r\n        return () => document.removeEventListener('keydown', disableKeys, false)\r\n    }, [])\r\n\r\n    return <nav className={styles.navigation}>\r\n        <button\r\n            className={`btn btn-cancel ${styles.repeatBTN}`}\r\n            onClick={goBack}\r\n        >\r\n            <BsArrowRepeat />\r\n        </button>\r\n        <LoadTutorial\r\n            entry={TutorialEntry.THROWN}\r\n            onLoad={() => {\r\n                // Freeze WaitFish scene during tutorial\r\n                if (!processFrozen) setProcessFrozen(true)\r\n                if (isReeling) setIsReeling(false)\r\n                if (isMouseDown) setIsMouseDown(false)\r\n                if (isBaitAvailable) makeBaitAvailable(false)\r\n            }}\r\n            afterComplete={() => {\r\n                setProcessFrozen(false)\r\n                makeBaitAvailable(true)\r\n            }}\r\n         />\r\n    </nav>\r\n}\r\nWaitFish.GameProcess = GameProcess.WAIT_FISH\r\n\r\nexport default WaitFish","C:\\www\\react-fishing-game\\src\\store\\reducers\\position.ts",["389","390"],"import { Map, Coordinates } from '../../interfaces/position'\r\nimport { UPDATE_POSITION } from '../actions/types'\r\n\r\nexport interface State {\r\n    map: Map,\r\n    baitLakeCoords: Coordinates // Read-only computed property in Game/index.tsx\r\n}\r\n\r\nconst initialMap: Map = {\r\n    width: 4200,\r\n    height: 3200,\r\n    shorePath: { from: { x: 0, y: 0 }, to: { x: 4200, y: 200 }},\r\n    lakePath: { from: { x: 0, y: 0 }, to: { x: 4200, y: 3000 }}\r\n}\r\n\r\n\r\nconst initialState = {\r\n    map: initialMap,\r\n    baitLakeCoords: { x: 0, y: 0 }\r\n}\r\n\r\nexport default function (state = initialState, action: any): State {\r\n    switch(action.type) {\r\n        case UPDATE_POSITION:\r\n            return ({\r\n                ...state,\r\n                ...action.payload\r\n            })\r\n            break\r\n        default: return state\r\n    }\r\n}","C:\\www\\react-fishing-game\\src\\store\\reducers\\game.ts",["391","392","393","394","395","396","397","398","399"],"import {\r\n    SET_GAME_PROCESS,\r\n    SPEND_ONE_MINUTE,\r\n    ENABLE_BGM,\r\n    OPEN_MAIN_MENU,\r\n    SET_IS_MAIN_MENU_CLOSING,\r\n    SET_FISHROD_LEVEL,\r\n    EARN_MONEY,\r\n    SPEND_MONEY,\r\n    GAME_NOTIFICATION,\r\n    COMPLETED_TUTORIAL_ENTRY\r\n} from '../actions/types'\r\nimport { GameProcess } from '../../interfaces/game'\r\nimport { GameStats } from '../../interfaces/evolution'\r\nimport { GameNotif, Tutorial, TutorialEntry } from '../../interfaces/game'\r\nimport { rodLevels } from '../../components/Game/evolution'\r\n\r\nexport interface State {\r\n    process: GameProcess,\r\n    isMainMenuOpen: boolean,\r\n    isMainMenuClosing: boolean,\r\n    isBGMEnabled: boolean,\r\n    gameStats: GameStats,\r\n    gameNotification: GameNotif|null,\r\n    tutorial: Tutorial\r\n}\r\n\r\nconst initialGameStats: GameStats = {\r\n    gameTimeSpent: 0,\r\n    doubloons: 50,\r\n    fishrodLevel: rodLevels.find(lvl => lvl._id === 'Starter')\r\n}\r\n\r\nlet initialTutorial: any\r\ntry {\r\n    initialTutorial = JSON.parse(localStorage['tutorial'])\r\n} catch (err) {\r\n    initialTutorial = {}\r\n    Object.values(TutorialEntry).forEach((entry: string) => initialTutorial[entry] = false)\r\n}\r\n\r\nconst initialState: State = {\r\n    process: GameProcess.INITIAL,\r\n    isMainMenuOpen: false,\r\n    isMainMenuClosing: false,\r\n    isBGMEnabled: typeof localStorage['bgm_enabled'] !== 'undefined' ? JSON.parse(localStorage['bgm_enabled']) : true,\r\n    gameStats: localStorage['gameStats'] ? JSON.parse(localStorage['gameStats']) : initialGameStats,\r\n    gameNotification: null,\r\n    tutorial: initialTutorial\r\n}\r\n\r\nexport default function (state: State = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_GAME_PROCESS:\r\n            return { ...state, process: action.payload }\r\n            break\r\n        case SPEND_ONE_MINUTE: {\r\n            const newTime = state.gameStats.gameTimeSpent + 1\r\n            const newStats = { ...state.gameStats, gameTimeSpent: newTime }\r\n            \r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        } case OPEN_MAIN_MENU:\r\n            return { ...state, isMainMenuOpen: action.payload }\r\n            break\r\n        case SET_IS_MAIN_MENU_CLOSING:\r\n            return { ...state, isMainMenuClosing: action.payload }\r\n            break\r\n        case SET_FISHROD_LEVEL: {\r\n            const newGameStats = {\r\n                ...state.gameStats,\r\n                fishrodLevel: rodLevels.find(lvl => lvl._id === action.payload)\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newGameStats)\r\n            return {\r\n                ...state,\r\n                gameStats: newGameStats\r\n            }\r\n        }\r\n        case EARN_MONEY: {\r\n            const maxDoubloons = 999999\r\n            const myDoubloons = state.gameStats.doubloons\r\n            const canEarnMore = myDoubloons + action.payload < maxDoubloons\r\n            let nextDoubloons = myDoubloons\r\n            if (!canEarnMore) nextDoubloons = maxDoubloons\r\n            else nextDoubloons = myDoubloons + action.payload\r\n\r\n            // Save game stats\r\n            const newStats = {\r\n                ...state.gameStats,\r\n                doubloons: nextDoubloons\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        }\r\n        case SPEND_MONEY: {\r\n            const minDoubloons = 0\r\n            const myDoubloons = state.gameStats.doubloons\r\n            const canSpendMore = myDoubloons - action.payload > minDoubloons\r\n            let nextDoubloons = myDoubloons\r\n            if (!canSpendMore) nextDoubloons = minDoubloons\r\n            else nextDoubloons = myDoubloons - action.payload\r\n\r\n            // Save game stats\r\n            const newStats = {\r\n                ...state.gameStats,\r\n                doubloons: nextDoubloons\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        }\r\n        case ENABLE_BGM:\r\n            localStorage['bgm_enabled'] = JSON.stringify(action.payload)\r\n            return {\r\n                ...state,\r\n                isBGMEnabled: action.payload\r\n            }\r\n            break\r\n        case GAME_NOTIFICATION:\r\n            return { ...state, gameNotification: action.payload }\r\n            break\r\n        case COMPLETED_TUTORIAL_ENTRY:\r\n            const completedEntry: TutorialEntry = action.payload\r\n            const tutorial: Tutorial = { \r\n                ...state.tutorial, \r\n                [completedEntry]: true\r\n            }\r\n\r\n            localStorage['tutorial'] = JSON.stringify(tutorial)\r\n            return { ...state, tutorial }\r\n        default: return state\r\n    }\r\n}","C:\\www\\react-fishing-game\\src\\store\\reducers\\inventory.ts",["400","401","402","403","404"],"import {\r\n    ADD_INVENTORY_ENTRY,\r\n    REMOVE_INVENTORY_ENTRY\r\n} from '../actions/types'\r\nimport { Item, InventoryEntry } from '../../interfaces/items'\r\nimport allItems from '../../components/items/items.json'\r\n\r\ninterface State {\r\n    entries: InventoryEntry[],\r\n    maxEntries: number\r\n}\r\n\r\nconst initialEntries: InventoryEntry[] = [\r\n    {\r\n        item: allItems['Starter'],\r\n        amount: 1\r\n    },/*\r\n    {\r\n        item: allItems['Beginner'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Intermediate'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Advanced'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Expert'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Sea king'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Abyssal'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Legendary'],\r\n        amount: 1\r\n    },*/\r\n    {\r\n        item: allItems['Mushroom'],\r\n        amount: 3\r\n    },\r\n    {\r\n        item: allItems['Fly'],\r\n        amount: 1\r\n    }/*,\r\n    {\r\n        item: allItems['Angelfish'],\r\n        amount: 1\r\n    }*/\r\n]\r\n\r\nconst initialState = localStorage['inventory'] ?\r\n    JSON.parse(localStorage['inventory']) \r\n    : ({\r\n        entries: initialEntries,\r\n        maxEntries: 20\r\n    })\r\n\r\nexport default function (state: State = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_INVENTORY_ENTRY: {\r\n            let newState = state\r\n            // Check if item is already in inventory\r\n            const itemInInventory = state.entries.find(entry => entry.item._id === action.payload.itemID)\r\n\r\n            if (itemInInventory) {\r\n                // Add amount only\r\n                let newAmount = itemInInventory.amount + action.payload.amount\r\n                if (newAmount > 99) newAmount = 99 // Limit max amount to 99\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.map(entry => {\r\n                        if (entry.item._id === action.payload.itemID) {\r\n                            return { ... entry, amount: newAmount }\r\n                        }\r\n                        return entry\r\n                    })\r\n                }\r\n            } else {\r\n                // Add new entry to inventory\r\n                if (state.entries.length < state.maxEntries) {\r\n                    // Find item data\r\n                    const item = allItems[action.payload.itemID]\r\n                    if (!item) {\r\n                        // This item does not exist !\r\n                        return state\r\n                    } else {\r\n                        newState = {\r\n                            ...state,\r\n                            entries: [...state.entries, { item, amount: action.payload.amount }]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Error: your inventory is full\r\n                    return state\r\n                }\r\n            }\r\n\r\n            localStorage['inventory'] = JSON.stringify(newState)\r\n            return newState\r\n            break\r\n        }\r\n        case REMOVE_INVENTORY_ENTRY: {\r\n            let newState = state\r\n            // Check if item is already in inventory\r\n            const itemInInventory = state.entries.find(entry => entry.item._id === action.payload.itemID)\r\n            if (!itemInInventory) return state\r\n\r\n            // Check if new amount is a positive integer\r\n            let newAmount = itemInInventory.amount - action.payload.amount\r\n\r\n            if (newAmount <= 0) {\r\n                // Remove entry from inventory\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.filter(entry => entry.item._id !== action.payload.itemID)\r\n                }\r\n            } else {\r\n                // Keep entry and replace amount\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.map(entry => {\r\n                        if (entry.item._id === action.payload.itemID) {\r\n                            return { ...entry, amount: newAmount }\r\n                        }\r\n                        return entry\r\n                    })\r\n                }\r\n            }\r\n\r\n            localStorage['inventory'] = JSON.stringify(newState)\r\n            return newState\r\n            break\r\n        }\r\n        default: return state\r\n    }\r\n}","C:\\www\\react-fishing-game\\src\\store\\reducers\\fishing.ts",["405","406","407","408","409","410","411","412"],"import {\r\n    MAKE_BAIT_AVAILABLE,\r\n    PUT_ON_BAIT_ITEM,\r\n    BAIT_FALL_IN_WATER,\r\n    SET_HOOKED_FISH,\r\n    SET_LINE_TENSION,\r\n    INCREMENT_LINE_TENSION,\r\n    DECREMENT_LINE_TENSION,\r\n    SET_IS_PULLING\r\n} from '../actions/types'\r\nimport { FishData } from '../../interfaces/fishes'\r\nimport { Item } from '../../interfaces/items'\r\nimport allItems from '../../components/items/items.json'\r\n\r\nexport interface State {\r\n    isBaitAvailable: boolean,\r\n    baitFood: Item,\r\n    hasBaitJustFallen: boolean, // Use this as an event for fishes to detect when and bait falls, go away and set back to false if it falls at their position\r\n    hookedFish: FishData, // Data of the fish that has taken the bait\r\n    lineTension: number, // Min: -100; max: 100,\r\n    isPulling: boolean // Whether fish is pulling on the line\r\n}\r\n\r\nconst initialState: State = {\r\n    isBaitAvailable: false,\r\n    baitFood: localStorage['baitFood'] ? JSON.parse(localStorage['baitFood']) : allItems['Fly'],\r\n    hasBaitJustFallen: false,\r\n    hookedFish: null,\r\n    lineTension: 0,\r\n    isPulling: false\r\n}\r\n\r\nexport default function(state: State = initialState, action): State {\r\n    switch(action.type) {\r\n        case MAKE_BAIT_AVAILABLE:\r\n            return { ...state, isBaitAvailable: action.payload }\r\n            break\r\n        case PUT_ON_BAIT_ITEM:\r\n            localStorage['baitFood'] = JSON.stringify(action.payload)\r\n            return { ...state, baitFood: action.payload }\r\n            break\r\n        case BAIT_FALL_IN_WATER:\r\n            return { ...state, hasBaitJustFallen: action.payload }\r\n            break\r\n        case SET_HOOKED_FISH:\r\n            return { ...state, hookedFish: action.payload }\r\n            break\r\n        case SET_LINE_TENSION:\r\n            return { ...state, lineTension: action.payload }\r\n            break\r\n        case INCREMENT_LINE_TENSION:\r\n            return { ...state, lineTension: state.lineTension + action.payload }\r\n            break\r\n        case DECREMENT_LINE_TENSION:\r\n            return { ...state, lineTension: state.lineTension - action.payload }\r\n        case SET_IS_PULLING:\r\n            return { ...state, isPulling: action.payload }\r\n            break\r\n        default: return state\r\n    }\r\n}","C:\\www\\react-fishing-game\\src\\utils\\throttle.ts",[],"C:\\www\\react-fishing-game\\src\\store\\actions\\fishing.ts",[],"C:\\www\\react-fishing-game\\src\\store\\selectors\\position.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\evolution\\index.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\animations\\index.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\index.tsx",["413","414","415","416","417"],"import React, { ReactNode, useState, useMemo, useEffect, useRef } from 'react'\r\nimport Buy from './Buy'\r\nimport Sell from './Sell'\r\nimport { randomIntFromInterval } from '../../../../utils/math'\r\nimport { GiPirateCaptain } from 'react-icons/all'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { useSelector } from 'react-redux'\r\nimport { inventoryLengthSelector } from '../../../../store/selectors/inventory'\r\n\r\nexport enum ContentID {\r\n    ROOT = 'ROOT',\r\n    BUY = 'BUY',\r\n    SELL = 'SELL'\r\n}\r\n\r\n// Seller comments\r\nexport const greetings: string[] = [\r\n    'Ahoy, Matey ! What brings you here ?',\r\n    'The better your fish rod, the bigger fishes you\\'ll catch ! How convenient that I\\'m selling some',\r\n    'Do you have some fish for me ?'\r\n]\r\nexport const thanks: string[] = [\r\n    'Thank ya !',\r\n    'It\\'s a pleasure doing business with ye',\r\n    'Don\\'t ya lose it, mate !'\r\n]\r\nexport const randomGreeting = (): string => greetings[randomIntFromInterval(0, greetings.length - 1)]\r\nexport const randomThanks = (): string => thanks[randomIntFromInterval(0, thanks.length - 1)]\r\n\r\n\r\nconst Shop: React.FC = () => {\r\n    // REDUX\r\n    const inventoryLength = useSelector(inventoryLengthSelector)\r\n\r\n    // STATE\r\n    const [currentContentID, setCurrentContentID] = useState<ContentID>(ContentID.ROOT)\r\n\r\n    // Seller comments\r\n    const [sellerPhrase, setSellerPhrase] = useState<string>(randomGreeting())\r\n    const [sellerPhraseSpelled, setSellerPhraseSpelled] = useState<string>('')\r\n    const sellerPhraseSpelledJSX = useMemo((): ReactNode[] => {\r\n        return sellerPhraseSpelled.split('').map((letter: string, index: number) => (\r\n            <span\r\n                key={index}\r\n                className={styles.letter}\r\n                style={{ filter: index >= sellerPhraseSpelled.length - 5 ? `hue-rotate(${index*360/sellerPhrase.length}deg)` : 'hue-rotate(0)' }}\r\n            >{letter}</span>\r\n        ))\r\n    }, [sellerPhraseSpelled])\r\n    // Spell seller's text letter by letter\r\n    const spellingIntervalID = useRef<number>(null)\r\n    const lastSellerPhraseRef = useRef<string>(null)\r\n    useEffect(() => {\r\n        // Restart process if seller's dialog changes\r\n        if (\r\n            lastSellerPhraseRef && lastSellerPhraseRef.current &&\r\n            spellingIntervalID && spellingIntervalID.current &&\r\n            sellerPhrase != lastSellerPhraseRef.current\r\n        ) {\r\n            setSellerPhraseSpelled('')\r\n            window.clearInterval(spellingIntervalID.current)\r\n        }\r\n\r\n        spellingIntervalID.current = window.setInterval(() => {            \r\n            if (sellerPhraseSpelled.length < sellerPhrase.length) {\r\n                setSellerPhraseSpelled(sellerPhraseSpelled + sellerPhrase[sellerPhraseSpelled.length])\r\n            } else {\r\n                window.clearInterval(spellingIntervalID.current)\r\n            }\r\n        }, 20)\r\n        lastSellerPhraseRef.current = sellerPhrase\r\n        \r\n        return () => {\r\n            window.clearInterval(spellingIntervalID.current)\r\n        }\r\n    }, [sellerPhrase, sellerPhraseSpelled])\r\n\r\n    const currentContentJSX = useMemo((): ReactNode => {\r\n        switch(currentContentID) {\r\n            case ContentID.ROOT:\r\n                return <div className={styles.root}>\r\n                    <ul>\r\n                        <li>\r\n                            <button onClick={() => setCurrentContentID(ContentID.BUY)} className={`btn btn-primary`}>\r\n                                I want to buy\r\n                            </button>\r\n                        </li>\r\n                        {inventoryLength > 0 && (\r\n                            <li>\r\n                                <button onClick={() => setCurrentContentID(ContentID.SELL)} className={`btn btn-primary`}>\r\n                                    I have stuff for you\r\n                                </button>\r\n                            </li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n                break\r\n            case ContentID.BUY:\r\n                return <Buy\r\n                    setSellerPhrase={setSellerPhrase}\r\n                    setCurrentContentID={setCurrentContentID}\r\n                 />\r\n                break\r\n            case ContentID.SELL:\r\n                return <Sell\r\n                    setSellerPhrase={setSellerPhrase}\r\n                    setCurrentContentID={setCurrentContentID}\r\n                 />\r\n                break\r\n            default: return null\r\n        }\r\n    }, [currentContentID, inventoryLength])\r\n \r\n    return <div className={styles.shop}>\r\n        <main className={styles.mainContent}>\r\n            {currentContentJSX}\r\n        </main>\r\n        <section className={styles.seller}>\r\n            <figure className={styles.sellerFigure}>\r\n                <GiPirateCaptain />\r\n                <figcaption>Captain Joe</figcaption>\r\n            </figure>\r\n            <p className={styles.sellerPhrase}>{sellerPhraseSpelledJSX}</p>\r\n        </section>\r\n    </div>\r\n}\r\n\r\nexport default Shop","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Status\\index.tsx",["418","419","420","421","422"],"import React, { ReactElement, Dispatch, SetStateAction, useMemo, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { minsToHrsMins } from '../../../../utils/time'\r\nimport allCategories from '../../../items/categories.json'\r\nimport { SectionID } from '../index'\r\nimport { GameStats } from '../../../../interfaces/evolution'\r\nimport { Item, ItemCategory } from '../../../../interfaces/items'\r\nimport styles from './index.module.sass'\r\nimport { BiStats, BiCoin, GiFishingPole, GiFishing } from 'react-icons/all'\r\n// Redux\r\nimport { gameStatsSelector } from '../../../../store/selectors/game'\r\nimport { baitFoodSelector } from '../../../../store/selectors/fishing'\r\nimport { removeBaitItemAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    setCurrentSection: Dispatch<SetStateAction<SectionID>>,\r\n    // Redux\r\n    gameStats?: GameStats,\r\n    baitFood?: Item,\r\n    removeBait: any\r\n}\r\n\r\nenum StatusSectionID {\r\n    GENERAL = 'GENERAL',\r\n    GEAR = 'GEAR'\r\n}\r\n\r\nconst Status: React.FC<Props> = ({\r\n    setCurrentSection,\r\n    gameStats,\r\n    baitFood,\r\n    removeBait\r\n}) => {\r\n    const { gameTimeSpent, fishrodLevel, doubloons } = gameStats\r\n    const gameTimeSpentFormatted = useMemo((): string => minsToHrsMins(gameTimeSpent), [gameTimeSpent])\r\n    const [currentStatusSectionID, setCurrentStatusSectionID] = useState<StatusSectionID>(StatusSectionID.GENERAL)\r\n\r\n    // The category of item which current bait belongs to\r\n    const baitCategory = useMemo((): ItemCategory => {\r\n        if (baitFood) return allCategories[baitFood['category']]\r\n        else return null\r\n    }, [baitFood, allCategories])\r\n\r\n    // The color used on the bait icon which depends on its item category\r\n    const baitColor = useMemo((): string => {\r\n        if (!baitCategory) return ''\r\n\r\n        return baitCategory.colors[0]\r\n    }, [baitCategory])\r\n\r\n    const currentStatusSection = useMemo((): ReactElement => {\r\n        switch (currentStatusSectionID) {\r\n            case StatusSectionID.GENERAL:\r\n                return <section className={styles.general}>\r\n                    <h3>General</h3>\r\n                    <ul className={styles.gameStats}>\r\n                        <li>\r\n                            Doubloons:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong>{doubloons}</strong>&nbsp;\r\n                                <BiCoin color=\"var(--yellow)\" style={{ verticalAlign: 'middle' }} />\r\n                            </span>\r\n                        </li>\r\n                        <li>Game time:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong className={styles.time}>{gameTimeSpentFormatted}</strong>\r\n                            </span>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                break\r\n            case StatusSectionID.GEAR:\r\n                return <section className={styles.general}>\r\n                    <h3>Gear</h3>\r\n                    <ul className={styles.gear}>\r\n                        <li>Fishrod:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong>{fishrodLevel._id}</strong>\r\n                            </span>\r\n                        </li>\r\n                        <li>Bait:&nbsp;\r\n                            {baitFood ? (\r\n                                <span className={styles.data}>\r\n                                    <span style={{ color: baitColor }} dangerouslySetInnerHTML={{ __html: baitFood.image }}></span>&nbsp;\r\n                                    <strong>{baitFood._id}</strong>&nbsp;\r\n                                    <button\r\n                                        className={`btn btn-cancel ${styles.btn}`}\r\n                                        onClick={removeBait}\r\n                                    >Remove</button>\r\n                                </span>\r\n                            ) : (\r\n                                <span className={styles.data}>\r\n                                    <strong>None</strong>&nbsp;\r\n                                    <button\r\n                                        className={`btn btn-primary ${styles.btn}`}\r\n                                        onClick={() => setCurrentSection(SectionID.INVENTORY)}\r\n                                    >\r\n                                        Add from inventory\r\n                                    </button>\r\n                                </span>\r\n                            )}\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                break\r\n        }\r\n    }, [\r\n        currentStatusSectionID,\r\n        fishrodLevel,\r\n        baitFood,\r\n        baitColor,\r\n        removeBait,\r\n        doubloons,\r\n        gameTimeSpentFormatted\r\n    ])\r\n\r\n    return <article className={styles.status}>\r\n        <nav className={styles.statusSectionNav}>\r\n            <ul>\r\n                <li\r\n                    className={currentStatusSectionID === StatusSectionID.GENERAL ? styles.active : ''}\r\n                    onClick={() => setCurrentStatusSectionID(StatusSectionID.GENERAL)}\r\n                >\r\n                    <BiStats />\r\n                </li>\r\n                <li\r\n                    className={currentStatusSectionID === StatusSectionID.GEAR ? styles.active : ''}\r\n                    onClick={() => setCurrentStatusSectionID(StatusSectionID.GEAR)}\r\n                >\r\n                    <GiFishingPole />\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n        {currentStatusSection}\r\n    </article>\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    gameStats: gameStatsSelector(state),\r\n    baitFood: baitFoodSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeBait: () => dispatch(removeBaitItemAction())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Status)","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Credits\\index.tsx",["423","424","425","426"],"import React from 'react'\r\nimport styles from './index.module.sass'\r\n\r\nconst Credits = () => <div className={styles.credits}>\r\n    <main>\r\n        <h3>Credits</h3>\r\n        <div style={{ fontSize: '.75em', textAlign: 'center', margin: '2em', lineHeight: '200%' }}>\r\n            <em>\"Go fishing\"</em>,&nbsp;\r\n            fishing simulator game developed and maintained by&nbsp;\r\n            <address>\r\n                <a\r\n                    href=\"https://www.linkedin.com/in/b748b01b7/\"\r\n                    target=\"_blank\"\r\n                    title=\"See developer's profile on linkedin\"\r\n                    rel=\"author\"\r\n                >dev.js.theo@gmail.com</a>\r\n            </address>\r\n        </div>\r\n        <section className={styles.audioSection}>\r\n            <h4>Audio</h4>\r\n            <ul className={styles.creditList}>\r\n                <li>\r\n                    <h5>\r\n                        Music theme composed by &nbsp;\r\n                        <address>\r\n                            <a\r\n                                href=\"https://soundcloud.com/coma8\"\r\n                                target=\"_blank\"\r\n                                title=\"See profile on soundcloud\"\r\n                                rel=\"author\"\r\n                            >coma8</a>\r\n                        </address>\r\n                    </h5>\r\n                </li>\r\n                <li>\r\n                    <h5>\r\n                        \"Coins Purchase 01\"&nbsp;\r\n                        <address>\r\n                            by&nbsp;\r\n                            <a\r\n                                href=\"https://freesound.org/people/rhodesmas/sounds/321263/\"\r\n                                title=\"Rhodesmas' work\"\r\n                                target=\"_blank\"\r\n                                rel=\"author\"\r\n                            >rhodesmas</a>\r\n                        </address>\r\n                    </h5>\r\n                    <p>Modified from .wav to .mp3</p>\r\n                </li>\r\n                <li>\r\n                    <h5>\r\n                        \"snapping-chain\"&nbsp;\r\n                        <address>\r\n                            by&nbsp;\r\n                            <a\r\n                                href=\"https://www.youtube.com/cosmicembers\"\r\n                                title=\"Cosmic embers' YouTube channel\"\r\n                                target=\"_blank\"\r\n                                rel=\"author\"\r\n                            >Cosmic Embers</a>\r\n                        </address>\r\n                    </h5>\r\n                    <p>Renamed to <em>line-snap.mp3</em></p>\r\n                </li>\r\n            </ul>\r\n        </section>\r\n    </main>\r\n</div>\r\n\r\nexport default Credits","C:\\www\\react-fishing-game\\src\\components\\Game\\Barometer\\TensionGauge\\index.tsx",["427"],"import React, { CSSProperties, useMemo, useState } from 'react'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { lineTensionSelector } from '../../../../store/selectors/fishing'\r\n\r\ninterface Props {\r\n    // Redux\r\n    lineTension: number\r\n}\r\n\r\nconst TensionGauge: React.FC<Props> = ({ lineTension }) => {\r\n\r\n    const lowTensionStyle = useMemo((): CSSProperties => {\r\n        if (lineTension >= 0) return { visibility: 'hidden' }\r\n        return {\r\n            clipPath: `polygon(${100 + lineTension}% 0, 100% 0, 100% 100%, ${100 + lineTension}% 100%)`\r\n        }\r\n    }, [lineTension])\r\n\r\n    const highTensionStyle = useMemo((): CSSProperties => {\r\n        if (lineTension <= 0) return { visibility: 'hidden' }\r\n        return {\r\n            clipPath: `polygon(0 0, ${lineTension}% 0, ${lineTension}% 100%, 0 100%)`\r\n        }\r\n    }, [lineTension])\r\n    \r\n    return <div className={styles.resistanceGauge}>\r\n        <meter\r\n            className={styles.lineTension}\r\n            min={-100}\r\n            max={100}\r\n            value={lineTension}\r\n            high={50}\r\n            low={-50}\r\n            optimum={0}\r\n        >\r\n        </meter>\r\n        <label\r\n            className={`${styles.lowTension} ${lineTension <= -75 ? styles.danger : ''}`}\r\n            style={{\r\n                ...lowTensionStyle,\r\n                animationDuration: lineTension <= -90 ? '.3s' : '.5s'\r\n            }}\r\n        ></label>\r\n        <label\r\n            className={`${styles.highTension} ${lineTension >= 75 ? styles.danger : ''}`}\r\n            style={{\r\n                ...highTensionStyle,\r\n                animationDuration: lineTension >= 90 ? '.3s' : '.5s'\r\n            }}\r\n        ></label>\r\n    </div>\r\n}\r\n\r\n// Redux connection\r\nconst mapStateToProps = state => ({\r\n    lineTension: lineTensionSelector(state)\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatch => ({})\r\n)(TensionGauge)","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Beginner\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Advanced\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Expert\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\ProgressCircle\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Starter\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\King\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Intermediate\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Abyss\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Inventory\\index.tsx",["428","429","430","431","432","433","434","435","436","437","438","439","440"],"import React, { Dispatch, SetStateAction, ReactNode, Fragment, useMemo, useState, useCallback, useRef } from 'react'\r\nimport { InventoryEntry, ItemCategory, Item } from '../../../../interfaces/items'\r\nimport Modal from '../../../misc/Modal'\r\nimport categories from '../../../items/categories.json'\r\nimport { rodLevels } from '../../evolution'\r\nimport { pxToM } from '../../../../utils/position'\r\nimport { SectionID } from '../index'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport { baitFoodSelector } from '../../../../store/selectors/fishing'\r\nimport { rodLevelSelector } from '../../../../store/selectors/game'\r\nimport { inventoryEntriesSelector, maxEntriesSelector, isPlayerOutOfBaitsSelector } from '../../../../store/selectors/inventory'\r\nimport { deleteItemAction, removeInventoryEntryAction, equipItemAction } from '../../../../store/actions/inventory'\r\nimport { putOnBaitItemAction, removeBaitItemAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    setCurrentSection: Dispatch<SetStateAction<SectionID>>,\r\n    // Redux\r\n    isPlayerOutOfBaits: boolean,\r\n    entries: InventoryEntry[],\r\n    maxEntries: number\r\n}\r\n\r\ninterface EntryProps {\r\n    entry: InventoryEntry,\r\n    handleSelect: () => void,\r\n    isSelected: boolean\r\n}\r\n\r\ninterface DetailsProps {\r\n    entry: InventoryEntry,\r\n    setCurrentEntryNum: Dispatch<SetStateAction<number|ReactNode>>\r\n}\r\n\r\nexport const Entry: React.FC<EntryProps> = ({ entry, handleSelect, isSelected }) => {\r\n    const { amount, item } = entry\r\n    const { _id, category, image } = item\r\n    const itemCategory = useMemo((): ItemCategory => categories[category], [category])\r\n    const { colors } = itemCategory\r\n\r\n    // Redux\r\n    const rodLevel = useSelector(rodLevelSelector)\r\n    const baitFood = useSelector(baitFoodSelector)\r\n\r\n    // Computed\r\n    const isEquipment = useMemo((): boolean => !!category.match(/Fishing pole/), [category])\r\n    const isEquipped = useMemo((): boolean => {\r\n        if (!isEquipment) return false\r\n        switch (category) {\r\n            case 'Fishing pole':\r\n                return rodLevel._id === _id\r\n                break\r\n            default: return false\r\n        }\r\n    }, [rodLevel, category, _id])\r\n\r\n    const isAlpha = useMemo((): boolean => _id.startsWith('Alpha '), [_id])\r\n\r\n    return <li\r\n        className={`${styles.entry} ${isSelected ? styles.selected : ''}`}\r\n        onClick={handleSelect}\r\n    >\r\n        <figure\r\n            className={styles.image}\r\n            dangerouslySetInnerHTML={{ __html: image }}\r\n            style={{ color: colors[1] }}\r\n        >\r\n        </figure>\r\n        <span className={styles.amount}>&times;<strong>{amount}</strong></span>\r\n        {(isEquipped || (baitFood && _id === baitFood._id)) && <span className={styles.equipped}>E</span>}\r\n        {isAlpha && <span className={styles.alpha}>A</span>}\r\n    </li>\r\n}\r\n\r\nexport const Details: React.FC<DetailsProps> = ({ entry, setCurrentEntryNum }) => {\r\n    const { item, amount } = entry\r\n    const { _id, plural, description, category, isDisposable } = item\r\n    const itemCategory = useMemo((): ItemCategory => categories[category], [category])\r\n\r\n    const [modal, setModal] = useState<ReactNode>(null)\r\n    const modalRef = useRef<any>(null)\r\n    const [dropAmount, setDropAmount] = useState<number>(1)\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const removeItem = useCallback((itemID: string, amount: number): void => dispatch(removeInventoryEntryAction(itemID, amount)), [])\r\n    const deleteEntry = useCallback((itemID: string): void => dispatch(deleteItemAction(itemID)), [])\r\n    const putOnBait = useCallback((item: Item): void => dispatch(putOnBaitItemAction(item)), [])\r\n    const removeBait = useCallback((): void => dispatch(removeBaitItemAction()), [])\r\n    const equipItem = useCallback((itemID): void => dispatch(equipItemAction(itemID)), [])\r\n    const baitFood = useSelector(baitFoodSelector)\r\n    const rodLevel = useSelector(rodLevelSelector)\r\n\r\n    const isEquipment = useMemo((): boolean => !!category.match(/Fishing pole/), [category])\r\n    const isEquipped = useMemo((): boolean => {\r\n        if (!isEquipment) return false\r\n        switch (category) {\r\n            case 'Fishing pole':\r\n                return rodLevel._id === _id\r\n                break\r\n            default: return false\r\n        }\r\n    }, [rodLevel, category, _id])\r\n\r\n    const handleConfirm = useCallback(\r\n        (onConfirm, msg = 'Are you sure ?'): void => {\r\n            setModal(\r\n                <Modal\r\n                    ref={modalRef}\r\n                    onClose={setModal}\r\n                    className={styles.modal}\r\n                >\r\n                    <h3>{msg}</h3>\r\n                    <ul className={styles.actionsList}>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => modalRef.current.closeModal()}\r\n                                className={`btn btn-cancel`}\r\n                            >Cancel</button>\r\n                        </li>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => {\r\n                                    onConfirm()\r\n                                    modalRef.current.closeModal()\r\n                                }}\r\n                                className={`btn btn-primary`}\r\n                            >Confirm</button>\r\n                        </li>\r\n                    </ul>\r\n                </Modal>\r\n            )\r\n        }, []\r\n    )\r\n\r\n    const handleUseBait = useCallback(\r\n        (): void => {\r\n            putOnBait(item)\r\n            setCurrentEntryNum(\r\n                <p style={{ background: 'var(--black)', padding: '.25rem' }}>\r\n                    <strong style={{ color: itemCategory.colors[0] }}>\r\n                        {_id}\r\n                    </strong>&nbsp;\r\n                    is now on your fish pole\r\n                </p>\r\n            )\r\n        }, [item, putOnBait, setCurrentEntryNum, _id, itemCategory]\r\n    )\r\n\r\n    const btnUse = useMemo((): React.ReactElement => {\r\n        if (isEquipment && isEquipped) return null // Equipment is already in use\r\n        else if (isEquipment && !isEquipped) return (\r\n            <button\r\n                onClick={() => equipItem(_id)}\r\n                className={`btn btn-primary`}\r\n                title={`Equip yourself with ${_id}`}\r\n            >\r\n                Equip\r\n            </button>\r\n        )\r\n\r\n        return (\r\n            category.match(/Bait|Fish/i) && // Fishes can be used as baits\r\n            baitFood &&\r\n            baitFood._id === _id ? (\r\n                <button\r\n                    onClick={removeBait}\r\n                    className={`btn btn-primary`}\r\n                    title={`You are using some ${_id} as a bait. Remove it ?`}\r\n                >\r\n                    Remove from fish pole\r\n                </button>\r\n            ) : (\r\n                <button\r\n                    onClick={handleUseBait}\r\n                    className={`btn btn-primary`}\r\n                    title={`Try to use ${_id.toLowerCase()}`}\r\n                >Use</button>\r\n            )\r\n        )\r\n    }, [baitFood, _id, removeBait, handleUseBait, category, rodLevel])\r\n\r\n    // Display fishing pole stats\r\n    const fishingPoleStats = useMemo((): ReactNode => {\r\n        if (category !== 'Fishing pole') return null\r\n        \r\n        const lvl = rodLevels.find(level => level._id === _id)\r\n        if (!lvl) return null\r\n\r\n        return <section className={styles.fishingPoleStats}>\r\n            <br />\r\n            <p>Line length: <strong>{pxToM(lvl['maxLength'])}m</strong></p>\r\n            <p>Resistance: <strong>{lvl['resistance']*100}</strong></p>\r\n            <p>Strength: <strong>{lvl['strength']*5}</strong></p>\r\n        </section>\r\n    }, [_id, rodLevels])\r\n\r\n    return <aside className={styles.details}>\r\n        <h3\r\n            style={{\r\n                background: `-webkit-linear-gradient(${itemCategory.colors.join(', ')})`\r\n            }}\r\n        >\r\n            {_id}\r\n        </h3>\r\n        <article className={styles.description} style={{ color: itemCategory.colors[0] }}>\r\n            {description}\r\n            {fishingPoleStats}\r\n        </article>\r\n        <ul className={styles.actions}>\r\n            <li>\r\n                {btnUse}\r\n            </li>\r\n            {isDisposable && (\r\n                <li style={{ display: 'flex', alignItems: 'center', gap: '.25rem', flexWrap: 'nowrap' }}>\r\n                    <button\r\n                        className={`btn btn-cancel`}\r\n                        title={`Remove a chosen amount of ${_id.toLowerCase()} from the inventory`}\r\n                        onClick={() => handleConfirm(() => removeItem(_id, dropAmount), `Drop ${dropAmount} ${dropAmount > 1 ? plural.toLowerCase() : _id.toLowerCase()} ?`)}\r\n                    >Drop</button>\r\n                    <input\r\n                        title={`How many ${plural} should be thrown away ?`}\r\n                        className={styles.dropAmount}\r\n                        type=\"number\"\r\n                        value={dropAmount}\r\n                        min={1}\r\n                        max={amount}\r\n                        step={1}\r\n                        onChange={e => {\r\n                            const newAmount = parseInt(e.target.value)\r\n                            if (newAmount < 1) setDropAmount(1)\r\n                            else if(newAmount > amount) setDropAmount(amount)\r\n                            else setDropAmount(newAmount)\r\n                        }}\r\n                    />\r\n                </li>\r\n            )}\r\n            {isDisposable && (\r\n                <li>\r\n                    <button\r\n                        className={`btn btn-cancel`} \r\n                        title={`Remove every ${_id.toLowerCase()} from the inventory`}\r\n                        onClick={() => handleConfirm(() => deleteEntry(_id), `Drop every ${_id.toLowerCase()} ?`)}\r\n                    >\r\n                        Drop all\r\n                    </button>\r\n                </li>\r\n            )}\r\n        </ul>\r\n        {modal && modal}\r\n    </aside>\r\n}\r\n\r\nexport const Inventory: React.FC<Props> = ({\r\n    setCurrentSection,\r\n    // Redux\r\n    entries = [],\r\n    maxEntries,\r\n    isPlayerOutOfBaits\r\n}) => {\r\n    const [currentEntryNum, setCurrentEntryNum] = useState<number|ReactNode>(null)\r\n    const remainingEntries = useMemo((): number => maxEntries - entries.length, [entries, maxEntries])\r\n    const entriesJSX = useMemo((): (ReactNode[]) => {\r\n        return entries.map((entry: InventoryEntry, index: number) => {\r\n            const isSelected: boolean = currentEntryNum === index\r\n            return <Entry\r\n                key={entry.item._id}\r\n                entry={entry}\r\n                handleSelect={() => !isSelected ? setCurrentEntryNum(index) : setCurrentEntryNum(null)}\r\n                isSelected={isSelected}\r\n             />\r\n        })\r\n    }, [entries, currentEntryNum])\r\n\r\n    const remainingEntriesJSX = useMemo((): (ReactNode[] | ReactNode | null) => {\r\n        if (typeof remainingEntries !== 'number' || remainingEntries <= 0) return null\r\n        let remaining = []\r\n        for (let i = 0; i < remainingEntries; i++) {\r\n            remaining.push(\r\n                <li key={i} className={`${styles.entry} ${styles.empty}`}></li>\r\n            )\r\n        }\r\n        return remaining\r\n    }, [remainingEntries])\r\n\r\n    const detailsJSX = useMemo((): (ReactNode | null) => {\r\n        // Inventory is empty\r\n        if (!entries || entries.length <= 0) {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                <h3>Your inventory is empty ...</h3>\r\n                <p>Lost all your <em>baits</em> ?</p>\r\n                <p>\r\n                    You can buy new ones at the&nbsp;\r\n                    <span className={styles.link} onClick={() => setCurrentSection(SectionID.SHOPPING)}>fishing shop</span>\r\n                    ; otherwise, you might as well look after something edible for fish consumption somewhere on the shore.\r\n                </p>\r\n            </aside>\r\n        }\r\n\r\n        // Player does not have baits and no fishing pole is selected\r\n        if (isPlayerOutOfBaits) {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                <h3>Your inventory is empty ...</h3>\r\n                <p>Lost all your <em>baits</em> ?</p>\r\n                <p>\r\n                    You can buy new ones at the&nbsp;\r\n                    <span className={styles.link} onClick={() => setCurrentSection(SectionID.SHOPPING)}>fishing shop</span>\r\n                    ; otherwise, you might as well look after something edible for fish consumption somewhere on the shore.\r\n                </p>\r\n            </aside>\r\n        }\r\n\r\n        // No item selected\r\n        if (currentEntryNum === null) {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                <h3>Select an item</h3>\r\n            </aside>\r\n        }\r\n\r\n        // Display message\r\n        if (typeof currentEntryNum !== 'number') {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                {currentEntryNum}\r\n            </aside>\r\n        }\r\n        \r\n        // Item selected: display its details\r\n        const currentEntry = entries[currentEntryNum]\r\n        if (!currentEntry) return null\r\n        return <Details entry={currentEntry} setCurrentEntryNum={setCurrentEntryNum} />\r\n    }, [entries, currentEntryNum, isPlayerOutOfBaits])\r\n\r\n    return <div className={styles.inventory}>\r\n        <main className={styles.entries}>\r\n            <ul className={styles.entriesList}>\r\n                {entriesJSX}\r\n                {remainingEntriesJSX}\r\n            </ul>\r\n        </main>\r\n        {detailsJSX}\r\n    </div>\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    entries: inventoryEntriesSelector(state),\r\n    maxEntries: maxEntriesSelector(state),\r\n    isPlayerOutOfBaits: isPlayerOutOfBaitsSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Inventory)","C:\\www\\react-fishing-game\\src\\utils\\time.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Sell\\index.tsx",["441","442","443","444","445","446"],"import React, { ReactNode, Fragment, useState, useMemo, useCallback, useEffect } from 'react'\r\nimport styles from './index.module.sass'\r\nimport allCategories from '../../../../items/categories.json'\r\nimport { ContentID, randomGreeting, randomThanks } from \"../index\"\r\nimport { ItemCategory, InventoryEntry } from '../../../../../interfaces/items'\r\nimport { randomIntFromInterval } from '../../../../../utils/math'\r\nimport useLazyAudio from '../../../../../hooks/useLazyAudio'\r\nimport { BiCoin, GiMagnifyingGlass } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { doubloonsSelector } from '../../../../../store/selectors/game'\r\nimport { sellableEntriesSelector } from '../../../../../store/selectors/inventory'\r\nimport { sellItemAction } from '../../../../../store/actions/inventory'\r\n\r\n// Seller dialogs\r\nexport const saleIntroPhrases: string[] = [\r\n    'What do you need to get rid of ?',\r\n    'How can I help you ?',\r\n    'Alright, what do ye have for me ?'\r\n]\r\nexport const randomSaleIntroPhrase = (): string => saleIntroPhrases[randomIntFromInterval(0, saleIntroPhrases.length - 1)]\r\n\r\n\r\ninterface Props {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setCurrentContentID?: React.Dispatch<React.SetStateAction<ContentID>>,\r\n    myDoubloons?: number,\r\n    sellItem: any,\r\n    sellableEntries?: InventoryEntry[]\r\n}\r\n\r\nexport const Sell: React.FC<Props> = ({ setSellerPhrase, setCurrentContentID, myDoubloons, sellItem, sellableEntries }) => {\r\n    // Audio\r\n    const saleSE = useLazyAudio({ src: 'se/sale.mp3' })\r\n    \r\n    // State\r\n    const [focusedItem, setFocusedItem] = useState<string>(null)\r\n    const [searchFilter, setSearchFilter] = useState<string>('')\r\n\r\n    // Items\r\n    const forSaleItems = useMemo(() => {\r\n        // Figure out which entries to render\r\n        let entries = sellableEntries\r\n        if (searchFilter) {\r\n            entries = sellableEntries.filter((entry: InventoryEntry) => new RegExp(searchFilter, 'i').test(entry.item._id))\r\n        }\r\n\r\n        return entries.map((entry: InventoryEntry) => {\r\n            const { item } = entry\r\n            const isFocused = focusedItem === item._id\r\n            return <ForSaleItem\r\n                key={item._id}\r\n                isFocused={isFocused}\r\n                setFocusedItem={setFocusedItem}\r\n                entry={entry}\r\n                myDoubloons={myDoubloons}\r\n            />\r\n        })\r\n    }, [focusedItem, myDoubloons, sellableEntries, searchFilter])\r\n\r\n    useEffect(() => {\r\n        // Change seller's dialog\r\n        if (!focusedItem) setSellerPhrase(randomSaleIntroPhrase())\r\n    }, [focusedItem])\r\n\r\n    // JSX\r\n    const detailsJSX = useMemo((): ReactNode => {\r\n        const fallback = <aside className={styles.details}>\r\n            <p className={styles.description}>Select an item from your inventory</p>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n        </aside>\r\n\r\n        const entry: InventoryEntry = sellableEntries.find((entry: InventoryEntry) => entry.item._id === focusedItem)\r\n        if (!focusedItem || !entry) return fallback\r\n\r\n        return <SaleDetails\r\n            key={entry.item._id}\r\n            setSellerPhrase={setSellerPhrase}\r\n            entry={entry}\r\n            myDoubloons={myDoubloons}\r\n            sellItem={sellItem}\r\n            saleSE={saleSE}\r\n            setFocusedItem={setFocusedItem}\r\n         />\r\n    }, [focusedItem, sellableEntries, sellItem, myDoubloons])\r\n\r\n    return <div className={styles.sell}>\r\n        <main className={styles.forSaleItems}>\r\n            <ul className={styles.forSaleItemsList}>\r\n                <li className={`${styles.search} ${searchFilter ? styles.active : ''}`}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={searchFilter}\r\n                        onChange={e => setSearchFilter(e.target.value)}\r\n                     />\r\n                    <GiMagnifyingGlass />\r\n                </li>\r\n                {forSaleItems}\r\n            </ul>\r\n            {detailsJSX}\r\n        </main>\r\n        <aside className={styles.footer}>\r\n            <nav className={styles.navigation}>\r\n                <button onClick={() => {\r\n                    setSellerPhrase(randomGreeting())\r\n                    setCurrentContentID(ContentID.ROOT)\r\n                }} className={`btn btn-cancel ${styles.previous}`}>\r\n                    &lt;\r\n                </button>\r\n            </nav>\r\n        </aside>\r\n    </div>\r\n}\r\n\r\ninterface DetailsProps {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    entry: InventoryEntry, \r\n    myDoubloons?: number,\r\n    sellItem?: any,\r\n    saleSE?: HTMLAudioElement\r\n}\r\n\r\nconst SaleDetails: React.FC<DetailsProps> = ({ setSellerPhrase, setFocusedItem, entry, myDoubloons, sellItem, saleSE }) => {\r\n    const { item, amount } = entry\r\n    const { _id, plural, description, salePrice, isSellable } = item\r\n    const [saleAmount, setSaleAmount] = useState<number>(1)\r\n    const [isConfirmingSale, setIsConfirmingSale] = useState<boolean>(false)\r\n    \r\n    const totalPrice = useMemo((): number => salePrice*saleAmount, [salePrice, saleAmount])\r\n\r\n    const canSell = useMemo((): boolean => {\r\n        return isSellable && amount > 0 && saleAmount > 0\r\n    }, [isSellable, amount, saleAmount])\r\n\r\n    const saleBTN = useMemo((): ReactNode => {\r\n        if (!canSell) {\r\n            return <button className={`${styles.disabled} btn btn-cancel ${styles.saleBTN}`}>\r\n                Cannot sell this\r\n            </button>\r\n        }\r\n        if (isConfirmingSale) {\r\n            return <>\r\n                <span\r\n                    className={`btn btn-cancel ${styles.cancelBTN}`}\r\n                    onClick={() => {\r\n                        setIsConfirmingSale(false)\r\n                        setSellerPhrase(randomSaleIntroPhrase())\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </span>\r\n                <button className={`btn btn-primary ${styles.saleBTN}`}>\r\n                    Confirm\r\n                </button>\r\n            </>\r\n        }\r\n\r\n        return <button className={`btn btn-primary ${styles.saleBTN}`}>\r\n            Sell {saleAmount} {saleAmount <= 1 ? _id : plural}\r\n        </button>\r\n    }, [canSell, isConfirmingSale, saleAmount, _id, plural])\r\n\r\n    const confirmSale = useCallback(\r\n        (e: any): void => {\r\n            e.preventDefault()\r\n            if (canSell) {\r\n                if (!isConfirmingSale) {\r\n                    setIsConfirmingSale(true)\r\n                    setSellerPhrase(`Want to sell me ${saleAmount} ${saleAmount > 1 ? plural.toLowerCase() : _id.toLowerCase()} ?`)\r\n                } else {\r\n                    sellItem(_id, saleAmount, totalPrice)\r\n                    saleSE.play()\r\n                    setSellerPhrase(randomThanks())\r\n                    setIsConfirmingSale(false)\r\n\r\n                    // Remove focus if entry is removed from inventory (amount gets null)\r\n                    const isNextAmountNull = saleAmount >= amount\r\n                    if (isNextAmountNull) setFocusedItem(null)\r\n                }\r\n            } else {\r\n                setSellerPhrase('I\\'m not interested ...')\r\n            }\r\n        }, [\r\n            canSell,\r\n            isConfirmingSale,\r\n            _id,\r\n            plural,\r\n            amount,\r\n            saleAmount,\r\n            totalPrice,\r\n            sellItem,\r\n            saleSE\r\n        ]\r\n    )\r\n\r\n    // Component will unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            setSellerPhrase(randomSaleIntroPhrase)\r\n        }\r\n    }, [])\r\n    \r\n    return <aside className={styles.details}>\r\n        <article className={styles.description}>{description}</article>\r\n        <form className={styles.saleActions} onSubmit={confirmSale}>\r\n            <fieldset className={styles.amount}>\r\n                <label htmlFor={`${_id}_amount`}>\r\n                    Amount:&nbsp;\r\n                </label>\r\n                <input\r\n                    type=\"number\"\r\n                    readOnly={isConfirmingSale}\r\n                    id={`${_id}_amount`}\r\n                    value={saleAmount}\r\n                    max={amount}\r\n                    min={1}\r\n                    step={1}\r\n                    onChange={e => {\r\n                        const newAmount = parseInt(e.target.value)\r\n                        if (newAmount <= 0) setSaleAmount(1)\r\n                        else if (newAmount > amount) setSaleAmount(amount)\r\n                        else setSaleAmount(newAmount)\r\n                    }}\r\n                />\r\n                <p className={styles.totalPrice}>\r\n                    <span className={styles.label}>Total: </span>\r\n                    {totalPrice} <BiCoin />\r\n                </p>\r\n            </fieldset>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n            <fieldset className={styles.submit}>{saleBTN}</fieldset>\r\n        </form>\r\n    </aside>\r\n}\r\n\r\ninterface ForSaleItemProps {\r\n    entry: InventoryEntry,\r\n    isFocused: boolean,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    myDoubloons?: number\r\n}\r\n\r\nfunction ForSaleItem ({ entry, setFocusedItem, isFocused, myDoubloons }) {\r\n    const { item, amount } = entry\r\n    const { _id, salePrice, image, category } = item\r\n    const itemCategory: ItemCategory = allCategories[category]\r\n    const textStyle = useMemo(() => ({ background: `linear-gradient(${itemCategory.colors.join(', ')}` }), [itemCategory])\r\n\r\n    return <li\r\n        className={`${styles.forSaleItem} ${isFocused ? styles.focused : ''}`}\r\n        style={{ boxShadow: isFocused ? `0 0 1px 1px inset ${itemCategory.colors[0]}` : 'none' }}\r\n        onClick={() => isFocused ? setFocusedItem(null) : setFocusedItem(_id)}\r\n    >\r\n        <figure className={styles.itemImage} style={{ color: itemCategory.colors[1] }} dangerouslySetInnerHTML={{ __html: image }}></figure>\r\n        <span\r\n            className={styles.id}\r\n            style={textStyle}\r\n        >{_id}</span>\r\n        <span className={styles.amount}>&times;{amount}</span>\r\n        <span className={styles.price}><strong>{salePrice}</strong> <BiCoin /></span>\r\n    </li>\r\n}\r\n\r\n// Connect \"Sell\" component to Redux\r\nconst mapStateToProps = state => ({\r\n    myDoubloons: doubloonsSelector(state),\r\n    sellableEntries: sellableEntriesSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    sellItem: (itemID: string, amount: number, price: number) => dispatch(sellItemAction(itemID, amount, price))\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sell)","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Buy\\index.tsx",["447","448","449","450","451","452","453","454"],"import React, { ReactNode, Fragment, useState, useMemo, useCallback, useEffect } from 'react'\r\nimport styles from './index.module.sass'\r\nimport allItems from '../../../../items/items.json'\r\nimport { rodLevels } from '../../../evolution'\r\nimport allCategories from '../../../../items/categories.json'\r\nimport { ContentID, randomGreeting, randomThanks } from \"../index\"\r\nimport { Item, ItemCategory, InventoryEntry } from '../../../../../interfaces/items'\r\nimport { randomIntFromInterval } from '../../../../../utils/math'\r\nimport { pxToM } from '../../../../../utils/position'\r\nimport useLazyAudio from '../../../../../hooks/useLazyAudio'\r\nimport { BiCoin } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { doubloonsSelector } from '../../../../../store/selectors/game'\r\nimport { inventoryEntriesSelector } from '../../../../../store/selectors/inventory'\r\nimport { purchaseItemAction } from '../../../../../store/actions/inventory'\r\n\r\n// Seller dialogs\r\nexport const purchaseIntroPhrases: string[] = [\r\n    'Which item will you buy ?',\r\n    'How can I help you ?',\r\n    'Alright, what can I do for ye ?'\r\n]\r\nexport const randomPurchaseIntroPhrase = (): string => purchaseIntroPhrases[randomIntFromInterval(0, purchaseIntroPhrases.length - 1)]\r\n\r\nexport const tooExpensivePhrases: string[] = [\r\n    'Hey ! I want more doubloons for that !!',\r\n    'Come back with more cash, buddy !',\r\n    'Well tried, but that is worth WAY more doubloons !'\r\n]\r\nexport const randomTooExpensivePhrase = (): string => tooExpensivePhrases[randomIntFromInterval(0, tooExpensivePhrases.length - 1)]\r\n\r\ninterface Props {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setCurrentContentID?: React.Dispatch<React.SetStateAction<ContentID>>,\r\n    myDoubloons?: number,\r\n    purchaseItem: any\r\n}\r\n\r\nexport const Buy: React.FC<Props> = ({ setSellerPhrase, setCurrentContentID, myDoubloons, purchaseItem }) => {\r\n    // Redux\r\n    const inventoryEntries: InventoryEntry[] = useSelector(inventoryEntriesSelector)\r\n\r\n    // Audio\r\n    const purchaseSE = useLazyAudio({ src: 'se/purchase.mp3' })\r\n    const thankYouSE = useLazyAudio({ src: 'se/thank-you-for-the-doubloons.mp3' })\r\n\r\n    // Items\r\n    const [focusedItem, setFocusedItem] = useState<string>(null)\r\n    const forSaleItems = useMemo(() => {\r\n        const ids: string[] = [\r\n            'Mushroom',\r\n            'Fly',\r\n            'Butterfly',\r\n            'Dragonfly'\r\n        ]\r\n        // Add fishing poles that are not already in player's possession\r\n        const fishrodIDs: Array<string> = rodLevels.map(lvl => {\r\n            const fishrodID = lvl._id\r\n            // Add to available for purchase list if this id is not inventory yet\r\n            if (!inventoryEntries.find(entry => entry.item._id === fishrodID)) {\r\n                return fishrodID\r\n            }\r\n        }).filter(id => typeof id !== 'undefined')\r\n\r\n        return [...ids, ...fishrodIDs].map(id => {\r\n            const item: Item = allItems[id]\r\n            const isFocused = focusedItem === id\r\n            return <ForSaleItem\r\n                key={id}\r\n                isFocused={isFocused}\r\n                setFocusedItem={setFocusedItem}\r\n                item={item}\r\n                myDoubloons={myDoubloons}\r\n             />\r\n        })\r\n    }, [focusedItem, myDoubloons, inventoryEntries])\r\n\r\n    useEffect(() => {\r\n        // Change seller's dialog\r\n        if (!focusedItem) setSellerPhrase(randomPurchaseIntroPhrase())\r\n    }, [focusedItem])\r\n\r\n    // JSX\r\n    const detailsJSX = useMemo((): ReactNode => {\r\n        if (!focusedItem) {\r\n            return <aside className={styles.details}>\r\n                <p className={styles.description}>Select an item to check its details</p>\r\n                <p className={styles.myDoubloons}>\r\n                    <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                    {myDoubloons} <BiCoin />\r\n                </p>\r\n            </aside>\r\n        }\r\n\r\n        const item: Item = allItems[focusedItem]\r\n        return <PurchaseDetails\r\n            key={item._id}\r\n            setSellerPhrase={setSellerPhrase}\r\n            item={item}\r\n            myDoubloons={myDoubloons}\r\n            purchaseItem={purchaseItem}\r\n            purchaseSE={purchaseSE}\r\n            thankYouSE={thankYouSE}\r\n            inventoryEntries={inventoryEntries}\r\n         />\r\n    }, [focusedItem, purchaseItem, myDoubloons])\r\n\r\n    return <div className={styles.buy}>\r\n        <main className={styles.forSaleItems}>\r\n            <ul className={styles.forSaleItemsList}>\r\n                {forSaleItems}\r\n            </ul>\r\n            {detailsJSX}\r\n        </main>\r\n        <aside className={styles.footer}>\r\n            <nav className={styles.navigation}>\r\n                <button onClick={() => {\r\n                    setSellerPhrase(randomGreeting())\r\n                    setCurrentContentID(ContentID.ROOT)\r\n                }} className={`btn btn-cancel ${styles.previous}`}>\r\n                    &lt;\r\n                </button>\r\n            </nav>\r\n        </aside>\r\n    </div>\r\n}\r\n\r\ninterface DetailsProps {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    item: Item \r\n    myDoubloons?: number,\r\n    purchaseItem?: any,\r\n    purchaseSE?: HTMLAudioElement,\r\n    thankYouSE?: HTMLAudioElement,\r\n    inventoryEntries: InventoryEntry[]\r\n}\r\n\r\nconst PurchaseDetails: React.FC<DetailsProps> = ({ setSellerPhrase, item, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries }) => {\r\n    // State\r\n    const { _id, plural, description, purchasePrice, category } = item\r\n    const [amount, setAmount] = useState<number>(1)\r\n    const [isConfirmingPurchase, setIsConfirmingPurchase] = useState<boolean>(false)\r\n    \r\n    const totalPrice = useMemo((): number => purchasePrice*amount, [purchasePrice, amount])\r\n\r\n    const canBuy = useMemo((): boolean => {\r\n        const hasPlayerEnoughMoney = myDoubloons >= totalPrice\r\n        return hasPlayerEnoughMoney && amount > 0\r\n    }, [myDoubloons, totalPrice, amount])\r\n\r\n    const amountInInventory = useMemo((): number => {\r\n        const inventoryEntry = inventoryEntries.find((entry: InventoryEntry) => entry.item._id === _id)\r\n        // Item is not in player's inventory\r\n        if (!inventoryEntry) return 0\r\n        // Item is already in inventory\r\n        else return inventoryEntry.amount\r\n    }, [inventoryEntries, _id])\r\n\r\n    const purchaseBTN = useMemo((): ReactNode => {\r\n        if (!canBuy) {\r\n            return <button className={`${styles.disabled} btn btn-cancel ${styles.purchaseBTN}`}>\r\n                Too expensive\r\n            </button>\r\n        }\r\n        if (isConfirmingPurchase) {\r\n            return <>\r\n                <span\r\n                    className={`btn btn-cancel ${styles.cancelBTN}`}\r\n                    onClick={() => {\r\n                        setIsConfirmingPurchase(false)\r\n                        setSellerPhrase(randomPurchaseIntroPhrase())\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </span>\r\n                <button className={`btn btn-primary ${styles.purchaseBTN}`}>\r\n                    Confirm\r\n                </button>\r\n            </>\r\n        }\r\n\r\n        return <button className={`btn btn-primary ${styles.purchaseBTN}`}>\r\n            Buy {amount} {amount <= 1 ? _id : plural}\r\n        </button>\r\n    }, [canBuy, isConfirmingPurchase, amount, _id, plural])\r\n\r\n    const confirmPurchase = useCallback(\r\n        (e: any): void => {\r\n            e.preventDefault()\r\n            if (canBuy) {\r\n                if (!isConfirmingPurchase) {\r\n                    setIsConfirmingPurchase(true)\r\n                    setSellerPhrase(`Want to buy ${amount} ${amount > 1 ? plural.toLowerCase() : _id.toLowerCase()} ?`)\r\n                } else {\r\n                    purchaseItem(_id, amount, totalPrice)\r\n                    purchaseSE.play()\r\n                    setSellerPhrase(randomThanks())\r\n                    setIsConfirmingPurchase(false)\r\n                    setAmount(1)\r\n                    // \"Thank you !\"\r\n                    window.setTimeout(() => {\r\n                        if (thankYouSE) thankYouSE.play()\r\n                    }, 1500)\r\n                }\r\n            } else {\r\n                setSellerPhrase(randomTooExpensivePhrase())\r\n            }\r\n        }, [\r\n            canBuy,\r\n            isConfirmingPurchase,\r\n            _id,\r\n            plural,\r\n            amount,\r\n            totalPrice,\r\n            purchaseItem,\r\n            purchaseSE\r\n        ]\r\n    )\r\n\r\n    // Component will unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            setSellerPhrase(randomPurchaseIntroPhrase)\r\n        }\r\n    }, [])\r\n\r\n    // Display fishing pole stats\r\n    const fishingPoleStats = useMemo((): ReactNode => {\r\n        if (category !== 'Fishing pole') return null\r\n        \r\n        const lvl = rodLevels.find(level => level._id === _id)\r\n        if (!lvl) return null\r\n\r\n        return <section className={styles.fishingPoleStats}>\r\n            <br />\r\n            <p>Line length: <strong>{pxToM(lvl['maxLength'])}m</strong></p>\r\n            <p>Resistance: <strong>{lvl['resistance']*100}</strong></p>\r\n            <p>Strength: <strong>{lvl['strength']*5}</strong></p>\r\n        </section>\r\n    }, [_id, rodLevels])\r\n    \r\n    return <aside className={styles.details}>\r\n        <article className={styles.description}>\r\n            {description}\r\n            {fishingPoleStats}\r\n        </article>\r\n        <form className={styles.purchaseActions} onSubmit={confirmPurchase}>\r\n            <fieldset className={styles.amount}>\r\n                <label htmlFor={`${_id}_amount`}>\r\n                    Amount:&nbsp;\r\n                </label>\r\n                <input\r\n                    type=\"number\"\r\n                    readOnly={isConfirmingPurchase}\r\n                    id={`${_id}_amount`}\r\n                    value={amount}\r\n                    max={99}\r\n                    min={1}\r\n                    step={1}\r\n                    onChange={e => {\r\n                        if (category === 'Fishing pole') return setAmount(1) // Can only buy 1 fishing pole\r\n                        \r\n                        const newAmount = parseInt(e.target.value)\r\n                        if (newAmount <= 0) setAmount(1)\r\n                        else if (newAmount > 99) setAmount(99)\r\n                        else setAmount(newAmount)\r\n                    }}\r\n                />\r\n                <p className={styles.totalPrice}>\r\n                    <span className={styles.label}>Total: </span>\r\n                    {totalPrice} <BiCoin />\r\n                </p>\r\n            </fieldset>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Inventory:&nbsp;&nbsp;</span>\r\n                {amountInInventory} \r\n                <span\r\n                    className={styles.label}\r\n                    style={{ marginLeft: '.5em' }}\r\n                >Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n            <fieldset className={styles.submit}>{purchaseBTN}</fieldset>\r\n        </form>\r\n    </aside>\r\n}\r\n\r\ninterface ForSaleItemProps {\r\n    item: Item,\r\n    isFocused: boolean,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    myDoubloons?: number\r\n}\r\n\r\nfunction ForSaleItem ({ item, setFocusedItem, isFocused, myDoubloons }) {\r\n    const { _id, purchasePrice, image, category } = item\r\n    const itemCategory: ItemCategory = allCategories[category]\r\n    const textStyle = useMemo(() => ({ background: `linear-gradient(${itemCategory.colors.join(', ')}` }), [itemCategory])\r\n\r\n    return <li\r\n        className={`\r\n            ${styles.forSaleItem}\r\n             ${isFocused ? styles.focused : ''}\r\n             ${purchasePrice > myDoubloons ? styles.tooExpensive : ''}\r\n        `}\r\n        style={{ boxShadow: isFocused ? `0 0 1px 1px inset ${itemCategory.colors[0]}` : 'none' }}\r\n        onClick={() => isFocused ? setFocusedItem(null) : setFocusedItem(_id)}\r\n    >\r\n        <figure\r\n            className={styles.itemImage} \r\n            style={{ color: itemCategory.colors[1] }} \r\n            dangerouslySetInnerHTML={{ __html: image }}\r\n        ></figure>\r\n        <span\r\n            className={styles.id}\r\n            style={textStyle}\r\n        >{_id}</span>\r\n        <span className={styles.price}><strong>{purchasePrice}</strong> <BiCoin /></span>\r\n    </li>\r\n}\r\n\r\n// Connect \"Buy\" component to Redux\r\nconst mapStateToProps = state => ({\r\n    myDoubloons: doubloonsSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    purchaseItem: (itemID: string, amount: number, price: number) => dispatch(purchaseItemAction(itemID, amount, price))\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Buy)","C:\\www\\react-fishing-game\\src\\components\\fishes\\Default\\index.tsx",["455","456","457","458","459","460","461","462","463","464"],"C:\\www\\react-fishing-game\\src\\components\\misc\\Modal\\index.tsx",["465","466","467"],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\FishArea\\index.tsx",["468"],"import React, { FC, useRef } from 'react'\r\nimport FishGroup from '../FishGroup'\r\nimport { randomIntFromInterval } from '../../../../utils/math'\r\nimport { Fish } from '../../../../interfaces/fishes'\r\nimport { Path } from '../../../../interfaces/position'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\ninterface FishEntryProps {\r\n    size: number[],\r\n    strength: number[],\r\n    [key: string]: any\r\n}\r\n\r\ninterface FishEntry {\r\n    amount: number,\r\n    component: any,\r\n    fish: Fish,\r\n    props: any\r\n}\r\n\r\ninterface Props {\r\n    path: Path,\r\n    fishes: FishEntry[],\r\n}\r\n\r\nconst FishArea: FC<Props> = ({ path, fishes }) => {\r\n    const fishGroupID = useRef<string>(uuid())\r\n\r\n    return <FishGroup groupID={fishGroupID.current} path={path} render={groupProps => {\r\n        return (\r\n         /* Pass props to each fish */\r\n        fishes\r\n        .map((fishEntry: FishEntry) => {\r\n            const { amount, fish, props } = fishEntry\r\n            const Fish: any = fishEntry.component\r\n            // Render \"amount\" times the provided component\r\n            let result = []\r\n            for (let i = 0; i < amount; i++) {\r\n                const fishID = uuid()\r\n\r\n                result.push(\r\n                    <Fish\r\n                        key={fishID}\r\n                        fishID={fishID}\r\n                        fish={fish}\r\n                        groupID={fishGroupID.current}\r\n                        {...props}\r\n                        {...groupProps}\r\n                        area={groupProps.path}\r\n                        // Generate random props for a unique fish\r\n                        size={randomIntFromInterval(props.size[0], props.size[1])}\r\n                        strength={randomIntFromInterval(props.strength[0], props.strength[1])}\r\n                     />\r\n                )\r\n            }\r\n            return result\r\n        })\r\n        .flat()\r\n    )}} />\r\n}\r\n\r\nexport default React.memo(FishArea)","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\FishGroup\\index.tsx",["469"],"C:\\www\\react-fishing-game\\src\\interfaces\\position.ts",[],"C:\\www\\react-fishing-game\\src\\hooks\\useLazyAudio\\index.ts",["470","471","472"],"// Returns dynamically imported, memoized audio\r\nimport { useMemo } from 'react'\r\n\r\ninterface AudioOptions {\r\n    src: string,\r\n    [key: string]: any\r\n}\r\n\r\nexport default (\r\n    { src = '', ...rest }: AudioOptions,\r\n    deps: any[] = []\r\n): HTMLAudioElement => useMemo(\r\n    (): HTMLAudioElement => { \r\n        const audio = new Audio();\r\n\r\n        // Dynamically import audio file\r\n        (async () => {\r\n            const module = await import(`../../assets/audio/${src}`)\r\n            audio.src = module.default\r\n        })()\r\n\r\n        // Append other parameters to audio element\r\n        for (let param in rest) {\r\n            audio[param] = rest[param]\r\n        }\r\n\r\n        return audio\r\n    }, deps\r\n)","C:\\www\\react-fishing-game\\src\\utils\\tests\\time.test.ts",[],["473","474"],"C:\\www\\react-fishing-game\\src\\utils\\tests\\position.test.ts",["475"],"import {\r\n    pxToM, mToPx,\r\n    formatMeters,\r\n    getVectorLength,\r\n    getNextCoordinatesOfPath,\r\n    areCoordinatesInPath,\r\n    getAngleFromVerticalAxis\r\n} from '../position'\r\nimport { Path, Coordinates } from '../../interfaces/position'\r\n\r\ndescribe('position module', () => {\r\n    test('should convert distance symetrically', () => {\r\n        const testValue = 5\r\n        expect(typeof mToPx(testValue) === 'number').toBe(true)\r\n        expect(typeof pxToM(testValue) === 'number').toBe(true)\r\n        expect(mToPx(pxToM(testValue))).toBe(testValue)\r\n    })\r\n\r\n    test('formatMeters', () => {\r\n        expect(formatMeters(0)).toBe('0cm')\r\n        expect(formatMeters(.99)).toBe('99cm')\r\n        expect(formatMeters(1)).toBe('1m')\r\n        expect(formatMeters(1.01)).toBe('1.01m')\r\n        expect(formatMeters(-.5)).toBe('-50cm')\r\n    })\r\n\r\n    test('getVectorLength', () => {\r\n        // Distance should be 0 when from and to are the same coordinates\r\n        const fromEqualsTo: Path = {\r\n            from: { x: 322, y: 185 },\r\n            to: { x: 322, y: 185 }\r\n        }\r\n        expect(getVectorLength(fromEqualsTo)).toBe(0)\r\n\r\n        // Test typical output\r\n        const typicalPath: Path = {from: {x: 100, y: 100}, to: {x: 200, y: 200}}\r\n        const typicalOutput: number = getVectorLength(typicalPath)\r\n        expect(typeof typicalOutput === 'number').toBe(true)\r\n        expect(typicalOutput).toBe(141.4213562373095)\r\n\r\n        // Value should be absolute\r\n        const upVector: Path = {\r\n            from: {x: 0, y: 0},\r\n            to: {x: 0, y: -100}\r\n        }\r\n        const downVector: Path = {\r\n            from: {x: 0, y: 0},\r\n            to: {x: 0, y: 100}\r\n        }\r\n        expect(getVectorLength(upVector)).toBe(getVectorLength(downVector))\r\n    })\r\n\r\n    test('getNextCoordinatesOfPath', () => {\r\n        // If hypotenuse length is 0, next coordinates are current\r\n        expect(getNextCoordinatesOfPath(90, 0)).toStrictEqual({ x: 0, y: 0 })\r\n\r\n        // Test typical output\r\n        expect(getNextCoordinatesOfPath(15, 100000000000000000))\r\n        .toStrictEqual({x: 25881904510252070, y: 96592582628906830})\r\n    })\r\n\r\n    test('areCoordinatesInPath', () => {\r\n        // Coordinates are outside\r\n        expect(\r\n            areCoordinatesInPath(\r\n                { x: 0, y: 0 },\r\n                {\r\n                    from: { x: 10, y: 10 },\r\n                    to: { x: 20, y: 20 }\r\n                }\r\n            )\r\n        ).toBe(false)\r\n\r\n        // Coordinates are inside\r\n        expect(\r\n            areCoordinatesInPath(\r\n                { x: 0, y: 0 },\r\n                {\r\n                    from: { x: -10, y: -10 },\r\n                    to: { x: 10, y: 10 }\r\n                }\r\n            )\r\n        ).toBe(true)\r\n    })\r\n\r\n    test('getAngleFromVerticalAxis', () => {\r\n        // Angle should be 0 if vector is vertical\r\n        expect(getAngleFromVerticalAxis({\r\n            from: { x: 0, y: 0 },\r\n            to: { x: 0, y: 100 }\r\n        })).toBe(0)\r\n        expect(getAngleFromVerticalAxis({\r\n            from: { x: 0, y: 0 },\r\n            to: { x: 0, y: -100 }\r\n        })).toBe(0)\r\n        expect(getAngleFromVerticalAxis({\r\n            from: { x: 100, y: 0 },\r\n            to: { x: 100, y: 100 }\r\n        })).toBe(0)\r\n\r\n        // Test typical positive vector\r\n        const typicalPosVector = {\r\n            from: { x: 40, y: 20 },\r\n            to: { x: 120, y: 50 }\r\n        }\r\n        expect(\r\n            getAngleFromVerticalAxis(typicalPosVector)\r\n            .toPrecision(4)\r\n        ).toBe('1.212')\r\n\r\n        // Test typical negative vector\r\n        const typicalNegVector = {\r\n            from: { x: 120, y: 20 },\r\n            to: { x: 40, y: 50 }\r\n        }\r\n        expect(\r\n            getAngleFromVerticalAxis(typicalNegVector)\r\n            .toPrecision(4)\r\n        ).toBe('-1.212')\r\n    })\r\n})","C:\\www\\react-fishing-game\\src\\utils\\tests\\math.test.ts",[],"C:\\www\\react-fishing-game\\src\\setupTests.ts",[],"C:\\www\\react-fishing-game\\src\\react-app-env.d.ts",[],"C:\\www\\react-fishing-game\\src\\interfaces\\items.ts",[],"C:\\www\\react-fishing-game\\src\\interfaces\\fishes.ts",["476"],"C:\\www\\react-fishing-game\\src\\interfaces\\evolution.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\INITIAL.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\index.tsx",["477","478"],"import { FC, Dispatch, SetStateAction, memo, Component, lazy, Suspense, ReactNode } from 'react'\r\nimport { TutorialEntry } from '../../../interfaces/game'\r\nimport { WaveSpinnerLoading } from '../../misc/Spinners/Wave'\r\nimport modalStyles from './styles/modal.module.sass'\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { tutorialEntrySelectors } from '../../../store/selectors/game'\r\nimport { completeTutorialEntryAction } from '../../../store/actions/game'\r\n\r\n\r\n/*\r\n    Base tutorial component:\r\n    - renders a view and marks this tutorial entry as completed when finished\r\n    - passes common styles to all tutorial entries\r\n*/\r\nexport interface EntryProps {\r\n    onComplete: Dispatch<SetStateAction<TutorialEntry>>,\r\n    modalStyles: any\r\n}\r\n\r\nexport interface TutorialProps {\r\n    entry: TutorialEntry,\r\n    render: (renderOptions: EntryProps) => any,\r\n    afterComplete?: () => any // Do smth after tutorial entry has been completed\r\n}\r\n\r\nconst Tutorial: FC<TutorialProps> = ({ \r\n    entry, \r\n    render, \r\n    afterComplete \r\n}) => {\r\n    const dispatch = useDispatch()\r\n    const onComplete = () => {\r\n        dispatch(completeTutorialEntryAction(entry))\r\n        afterComplete && afterComplete()\r\n    }\r\n\r\n    return render({ onComplete, modalStyles })\r\n}\r\n\r\n\r\n/* \r\n    LoadTutorial component: checks if tutorial entry is already completed;\r\n    if not, lazy loads and renders tutorial component \r\n*/\r\ninterface LoadTutorialProps {\r\n    entry: TutorialEntry,\r\n    dependencies?: TutorialEntry[],\r\n    fallback?: ReactNode, // Component to display while Tutorial is loading. Defaults to spinner\r\n    onLoad?: () => any, // Do smth when tutorial has been loaded\r\n    afterComplete?: () => any // Do smth after tutorial entry has been completed\r\n}\r\nexport const LoadTutorial: FC<LoadTutorialProps> = memo(({ entry, dependencies = [], fallback, onLoad, afterComplete }) => {\r\n    const isCompleted: boolean = useSelector(tutorialEntrySelectors[entry])\r\n    const depCompletionState: Array<boolean|undefined> = useSelector(\r\n        state => dependencies.map((dep: TutorialEntry): (boolean|undefined) => state.game.tutorial[dep])\r\n    )\r\n    \r\n    // Check if target entry is completed already\r\n    if (isCompleted || typeof isCompleted === 'undefined') return null\r\n\r\n    // Check if all dependency entries are completed\r\n    const isAnyDepMissing = depCompletionState.some((state: (boolean|undefined)) => state !== true)\r\n    if (isAnyDepMissing) return null\r\n\r\n    // Tutorial entry is not completed yet: load tutorial component\r\n    const Tuto = lazy(() => {\r\n        const promise = import(`./${entry}`)\r\n        promise.then(() => onLoad && onLoad()) // Do smth\r\n        return promise\r\n    })\r\n\r\n    return <LoadTutorialErrBoundary>\r\n        <Suspense fallback={typeof fallback === 'undefined' ? <WaveSpinnerLoading /> : fallback}>\r\n            <Tuto afterComplete={afterComplete} />\r\n        </Suspense>\r\n    </LoadTutorialErrBoundary>\r\n})\r\n\r\nclass LoadTutorialErrBoundary extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n    }\r\n    state = { hasError: false }\r\n    componentDidCatch () {\r\n        this.state.hasError = true\r\n    }\r\n    render () {\r\n        if (this.state.hasError) return null\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\nexport default Tutorial","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\index.test.tsx",[],["479","480"],"C:\\www\\react-fishing-game\\src\\components\\misc\\Slider\\index.tsx",["481"],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\BAG.tsx",["482","483"],"import { useEffect, useRef } from 'react'\r\nimport Tutorial, { EntryProps } from './index'\r\nimport Modal from '../../misc/Modal'\r\nimport { TutorialEntry, TutorialEntryComponent } from '../../../interfaces/game'\r\n// Redux\r\nimport { useDispatch } from 'react-redux'\r\nimport { openMainMenuAction } from '../../../store/actions/game'\r\n\r\ninterface Props {\r\n    [index: string]: any\r\n}\r\n\r\nconst Bag: TutorialEntryComponent<Props> = () => {\r\n    // Open main menu (and mark as completed) on click\r\n    const dispatch = useDispatch()\r\n    const handleClick = () => {\r\n        dispatch(openMainMenuAction())\r\n    }\r\n\r\n    return <Tutorial\r\n        entry={TutorialEntry.BAG} \r\n        render={({ modalStyles }: EntryProps) => {\r\n            // Should be marked as completed on the 1st time player opens main menu\r\n\r\n            return <Modal\r\n                onClose={() => false}\r\n                onWindowClick={handleClick}\r\n                wrapper={false}\r\n                transition={1}\r\n                className={`\r\n                    ${modalStyles.modal} \r\n                    ${modalStyles.bag} \r\n                    ${modalStyles.tooltip}\r\n                `}\r\n            >\r\n                <header>\r\n                    <h4>Bag</h4>\r\n                </header>\r\n                <main>\r\n                    <p style={{ margin: '0' }}>\r\n                        You can open your bag to use, purchase or sell items\r\n                    </p>\r\n                </main>\r\n            </Modal>\r\n    }} />\r\n}\r\nBag.TutorialEntry = TutorialEntry.BAG\r\n\r\nexport default Bag","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\THROW_LINE.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\THROWN.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\misc\\Spinners\\Wave\\index.tsx",[],{"ruleId":"484","replacedBy":"485"},{"ruleId":"486","replacedBy":"487"},{"ruleId":"484","replacedBy":"485"},{"ruleId":"486","replacedBy":"487"},{"ruleId":"488","severity":1,"message":"489","line":86,"column":8,"nodeType":"490","endLine":86,"endColumn":22,"suggestions":"491"},{"ruleId":"488","severity":1,"message":"492","line":137,"column":8,"nodeType":"490","endLine":137,"endColumn":36,"suggestions":"493"},{"ruleId":"488","severity":1,"message":"494","line":143,"column":8,"nodeType":"490","endLine":143,"endColumn":10,"suggestions":"495"},{"ruleId":"496","severity":1,"message":"497","line":153,"column":17,"nodeType":"498","messageId":"499","endLine":153,"endColumn":23},{"ruleId":"488","severity":1,"message":"500","line":175,"column":9,"nodeType":"490","endLine":175,"endColumn":28,"suggestions":"501"},{"ruleId":"488","severity":1,"message":"502","line":197,"column":8,"nodeType":"490","endLine":197,"endColumn":64,"suggestions":"503"},{"ruleId":"488","severity":1,"message":"504","line":206,"column":12,"nodeType":"490","endLine":206,"endColumn":41,"suggestions":"505"},{"ruleId":"488","severity":1,"message":"506","line":217,"column":9,"nodeType":"490","endLine":217,"endColumn":44,"suggestions":"507"},{"ruleId":"488","severity":1,"message":"508","line":285,"column":8,"nodeType":"490","endLine":285,"endColumn":24,"suggestions":"509"},{"ruleId":"510","severity":1,"message":"511","line":304,"column":17,"nodeType":"512","messageId":"513","endLine":304,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":326,"column":17,"nodeType":"512","messageId":"513","endLine":326,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":341,"column":17,"nodeType":"512","messageId":"513","endLine":341,"endColumn":22},{"ruleId":"488","severity":1,"message":"514","line":360,"column":8,"nodeType":"490","endLine":374,"endColumn":6,"suggestions":"515"},{"ruleId":"488","severity":1,"message":"516","line":395,"column":8,"nodeType":"490","endLine":395,"endColumn":28,"suggestions":"517"},{"ruleId":"510","severity":1,"message":"511","line":508,"column":17,"nodeType":"512","messageId":"513","endLine":508,"endColumn":22},{"ruleId":"496","severity":1,"message":"518","line":1,"column":8,"nodeType":"498","messageId":"499","endLine":1,"endColumn":13},{"ruleId":"488","severity":1,"message":"519","line":42,"column":8,"nodeType":"490","endLine":42,"endColumn":10,"suggestions":"520"},{"ruleId":"510","severity":1,"message":"511","line":48,"column":17,"nodeType":"512","messageId":"513","endLine":48,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":51,"column":17,"nodeType":"512","messageId":"513","endLine":51,"endColumn":22},{"ruleId":"488","severity":1,"message":"521","line":63,"column":8,"nodeType":"490","endLine":63,"endColumn":49,"suggestions":"522"},{"ruleId":"488","severity":1,"message":"523","line":50,"column":12,"nodeType":"490","endLine":50,"endColumn":27,"suggestions":"524"},{"ruleId":"488","severity":1,"message":"523","line":56,"column":12,"nodeType":"490","endLine":56,"endColumn":27,"suggestions":"525"},{"ruleId":"488","severity":1,"message":"526","line":87,"column":12,"nodeType":"490","endLine":87,"endColumn":46,"suggestions":"527"},{"ruleId":"488","severity":1,"message":"528","line":96,"column":8,"nodeType":"490","endLine":96,"endColumn":10,"suggestions":"529"},{"ruleId":"488","severity":1,"message":"530","line":103,"column":8,"nodeType":"490","endLine":103,"endColumn":10,"suggestions":"531"},{"ruleId":"488","severity":1,"message":"532","line":115,"column":12,"nodeType":"490","endLine":115,"endColumn":69,"suggestions":"533"},{"ruleId":"534","severity":1,"message":"535","line":150,"column":17,"nodeType":"536","messageId":"537","endLine":152,"endColumn":26},{"ruleId":"488","severity":1,"message":"538","line":203,"column":26,"nodeType":"498","endLine":203,"endColumn":33},{"ruleId":"488","severity":1,"message":"539","line":208,"column":8,"nodeType":"490","endLine":208,"endColumn":58,"suggestions":"540"},{"ruleId":"496","severity":1,"message":"541","line":67,"column":23,"nodeType":"498","messageId":"499","endLine":67,"endColumn":35},{"ruleId":"488","severity":1,"message":"523","line":72,"column":86,"nodeType":"490","endLine":72,"endColumn":88,"suggestions":"542"},{"ruleId":"488","severity":1,"message":"543","line":97,"column":12,"nodeType":"490","endLine":97,"endColumn":27,"suggestions":"544"},{"ruleId":"488","severity":1,"message":"545","line":105,"column":8,"nodeType":"490","endLine":105,"endColumn":10,"suggestions":"546"},{"ruleId":"488","severity":1,"message":"530","line":108,"column":73,"nodeType":"490","endLine":108,"endColumn":75,"suggestions":"547"},{"ruleId":"488","severity":1,"message":"548","line":119,"column":12,"nodeType":"490","endLine":119,"endColumn":39,"suggestions":"549"},{"ruleId":"488","severity":1,"message":"550","line":200,"column":8,"nodeType":"490","endLine":200,"endColumn":86,"suggestions":"551"},{"ruleId":"488","severity":1,"message":"552","line":215,"column":12,"nodeType":"490","endLine":215,"endColumn":47,"suggestions":"553"},{"ruleId":"488","severity":1,"message":"554","line":363,"column":26,"nodeType":"498","endLine":363,"endColumn":33},{"ruleId":"488","severity":1,"message":"555","line":366,"column":8,"nodeType":"490","endLine":374,"endColumn":6,"suggestions":"556"},{"ruleId":"488","severity":1,"message":"557","line":443,"column":8,"nodeType":"490","endLine":443,"endColumn":31,"suggestions":"558"},{"ruleId":"488","severity":1,"message":"559","line":147,"column":44,"nodeType":"498","endLine":147,"endColumn":57},{"ruleId":"488","severity":1,"message":"560","line":215,"column":12,"nodeType":"490","endLine":215,"endColumn":51,"suggestions":"561"},{"ruleId":"488","severity":1,"message":"562","line":271,"column":8,"nodeType":"490","endLine":271,"endColumn":75,"suggestions":"563"},{"ruleId":"488","severity":1,"message":"564","line":280,"column":8,"nodeType":"490","endLine":280,"endColumn":25,"suggestions":"565"},{"ruleId":"488","severity":1,"message":"566","line":289,"column":8,"nodeType":"490","endLine":289,"endColumn":22,"suggestions":"567"},{"ruleId":"488","severity":1,"message":"568","line":311,"column":8,"nodeType":"490","endLine":311,"endColumn":21,"suggestions":"569"},{"ruleId":"488","severity":1,"message":"570","line":320,"column":12,"nodeType":"490","endLine":320,"endColumn":14,"suggestions":"571"},{"ruleId":"488","severity":1,"message":"572","line":344,"column":8,"nodeType":"490","endLine":344,"endColumn":10,"suggestions":"573"},{"ruleId":"510","severity":1,"message":"511","line":38,"column":17,"nodeType":"512","messageId":"513","endLine":38,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":41,"column":17,"nodeType":"512","messageId":"513","endLine":41,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":44,"column":17,"nodeType":"512","messageId":"513","endLine":44,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":47,"column":17,"nodeType":"512","messageId":"513","endLine":47,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":50,"column":17,"nodeType":"512","messageId":"513","endLine":50,"endColumn":22},{"ruleId":"488","severity":1,"message":"574","line":66,"column":8,"nodeType":"490","endLine":66,"endColumn":21,"suggestions":"575"},{"ruleId":"488","severity":1,"message":"576","line":76,"column":8,"nodeType":"490","endLine":76,"endColumn":18,"suggestions":"577"},{"ruleId":"510","severity":1,"message":"511","line":83,"column":17,"nodeType":"512","messageId":"513","endLine":83,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":86,"column":17,"nodeType":"512","messageId":"513","endLine":86,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":89,"column":17,"nodeType":"512","messageId":"513","endLine":89,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":92,"column":17,"nodeType":"512","messageId":"513","endLine":92,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":95,"column":17,"nodeType":"512","messageId":"513","endLine":95,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":105,"column":17,"nodeType":"512","messageId":"513","endLine":105,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":108,"column":17,"nodeType":"512","messageId":"513","endLine":108,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":111,"column":17,"nodeType":"512","messageId":"513","endLine":111,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":114,"column":17,"nodeType":"512","messageId":"513","endLine":114,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":117,"column":17,"nodeType":"512","messageId":"513","endLine":117,"endColumn":22},{"ruleId":"488","severity":1,"message":"578","line":54,"column":8,"nodeType":"490","endLine":54,"endColumn":10,"suggestions":"579"},{"ruleId":"488","severity":1,"message":"580","line":96,"column":12,"nodeType":"490","endLine":96,"endColumn":72,"suggestions":"581"},{"ruleId":"488","severity":1,"message":"530","line":104,"column":8,"nodeType":"490","endLine":104,"endColumn":10,"suggestions":"582"},{"ruleId":"488","severity":1,"message":"564","line":127,"column":8,"nodeType":"490","endLine":127,"endColumn":19,"suggestions":"583"},{"ruleId":"584","severity":1,"message":"585","line":22,"column":1,"nodeType":"586","endLine":32,"endColumn":2},{"ruleId":"510","severity":1,"message":"511","line":29,"column":13,"nodeType":"512","messageId":"513","endLine":29,"endColumn":18},{"ruleId":"584","severity":1,"message":"585","line":52,"column":1,"nodeType":"586","endLine":138,"endColumn":2},{"ruleId":"510","severity":1,"message":"511","line":56,"column":13,"nodeType":"512","messageId":"513","endLine":56,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":63,"column":13,"nodeType":"512","messageId":"513","endLine":63,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":66,"column":13,"nodeType":"512","messageId":"513","endLine":66,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":69,"column":13,"nodeType":"512","messageId":"513","endLine":69,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":97,"column":13,"nodeType":"512","messageId":"513","endLine":97,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":115,"column":13,"nodeType":"512","messageId":"513","endLine":115,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":123,"column":13,"nodeType":"512","messageId":"513","endLine":123,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":126,"column":13,"nodeType":"512","messageId":"513","endLine":126,"endColumn":18},{"ruleId":"496","severity":1,"message":"587","line":5,"column":10,"nodeType":"498","messageId":"499","endLine":5,"endColumn":14},{"ruleId":"584","severity":1,"message":"585","line":67,"column":1,"nodeType":"586","endLine":145,"endColumn":2},{"ruleId":"588","severity":1,"message":"589","line":82,"column":41,"nodeType":"590","messageId":"591","endLine":82,"endColumn":42,"fix":"592"},{"ruleId":"510","severity":1,"message":"511","line":109,"column":13,"nodeType":"512","messageId":"513","endLine":109,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":141,"column":13,"nodeType":"512","messageId":"513","endLine":141,"endColumn":18},{"ruleId":"584","severity":1,"message":"585","line":33,"column":1,"nodeType":"586","endLine":61,"endColumn":2},{"ruleId":"510","severity":1,"message":"511","line":37,"column":13,"nodeType":"512","messageId":"513","endLine":37,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":41,"column":13,"nodeType":"512","messageId":"513","endLine":41,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":44,"column":13,"nodeType":"512","messageId":"513","endLine":44,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":47,"column":13,"nodeType":"512","messageId":"513","endLine":47,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":50,"column":13,"nodeType":"512","messageId":"513","endLine":50,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":53,"column":13,"nodeType":"512","messageId":"513","endLine":53,"endColumn":18},{"ruleId":"510","severity":1,"message":"511","line":58,"column":13,"nodeType":"512","messageId":"513","endLine":58,"endColumn":18},{"ruleId":"488","severity":1,"message":"593","line":51,"column":8,"nodeType":"490","endLine":51,"endColumn":29,"suggestions":"594"},{"ruleId":"595","severity":1,"message":"596","line":60,"column":26,"nodeType":"597","messageId":"537","endLine":60,"endColumn":28},{"ruleId":"510","severity":1,"message":"511","line":99,"column":17,"nodeType":"512","messageId":"513","endLine":99,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":105,"column":17,"nodeType":"512","messageId":"513","endLine":105,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":111,"column":17,"nodeType":"512","messageId":"513","endLine":111,"endColumn":22},{"ruleId":"496","severity":1,"message":"598","line":9,"column":42,"nodeType":"498","messageId":"499","endLine":9,"endColumn":51},{"ruleId":"488","severity":1,"message":"599","line":42,"column":8,"nodeType":"490","endLine":42,"endColumn":33,"suggestions":"600"},{"ruleId":"510","severity":1,"message":"511","line":71,"column":17,"nodeType":"512","messageId":"513","endLine":71,"endColumn":22},{"ruleId":"510","severity":1,"message":"511","line":105,"column":17,"nodeType":"512","messageId":"513","endLine":105,"endColumn":22},{"ruleId":"488","severity":1,"message":"601","line":107,"column":8,"nodeType":"490","endLine":115,"endColumn":6,"suggestions":"602"},{"ruleId":"603","severity":1,"message":"604","line":13,"column":21,"nodeType":"605","endLine":13,"endColumn":36},{"ruleId":"603","severity":1,"message":"604","line":28,"column":33,"nodeType":"605","endLine":28,"endColumn":48},{"ruleId":"603","severity":1,"message":"604","line":43,"column":33,"nodeType":"605","endLine":43,"endColumn":48},{"ruleId":"603","severity":1,"message":"604","line":58,"column":33,"nodeType":"605","endLine":58,"endColumn":48},{"ruleId":"496","severity":1,"message":"606","line":1,"column":41,"nodeType":"498","messageId":"499","endLine":1,"endColumn":49},{"ruleId":"496","severity":1,"message":"607","line":1,"column":54,"nodeType":"498","messageId":"499","endLine":1,"endColumn":62},{"ruleId":"510","severity":1,"message":"511","line":54,"column":17,"nodeType":"512","messageId":"513","endLine":54,"endColumn":22},{"ruleId":"488","severity":1,"message":"608","line":57,"column":8,"nodeType":"490","endLine":57,"endColumn":33,"suggestions":"609"},{"ruleId":"488","severity":1,"message":"523","line":88,"column":132,"nodeType":"490","endLine":88,"endColumn":134,"suggestions":"610"},{"ruleId":"488","severity":1,"message":"523","line":89,"column":99,"nodeType":"490","endLine":89,"endColumn":101,"suggestions":"611"},{"ruleId":"488","severity":1,"message":"523","line":90,"column":94,"nodeType":"490","endLine":90,"endColumn":96,"suggestions":"612"},{"ruleId":"488","severity":1,"message":"523","line":91,"column":82,"nodeType":"490","endLine":91,"endColumn":84,"suggestions":"613"},{"ruleId":"488","severity":1,"message":"523","line":92,"column":88,"nodeType":"490","endLine":92,"endColumn":90,"suggestions":"614"},{"ruleId":"510","severity":1,"message":"511","line":102,"column":17,"nodeType":"512","messageId":"513","endLine":102,"endColumn":22},{"ruleId":"488","severity":1,"message":"608","line":105,"column":8,"nodeType":"490","endLine":105,"endColumn":33,"suggestions":"615"},{"ruleId":"488","severity":1,"message":"616","line":183,"column":8,"nodeType":"490","endLine":183,"endColumn":70,"suggestions":"617"},{"ruleId":"488","severity":1,"message":"618","line":198,"column":8,"nodeType":"490","endLine":198,"endColumn":24,"suggestions":"619"},{"ruleId":"488","severity":1,"message":"601","line":333,"column":8,"nodeType":"490","endLine":333,"endColumn":54,"suggestions":"620"},{"ruleId":"488","severity":1,"message":"621","line":65,"column":8,"nodeType":"490","endLine":65,"endColumn":21,"suggestions":"622"},{"ruleId":"488","severity":1,"message":"623","line":89,"column":8,"nodeType":"490","endLine":89,"endColumn":61,"suggestions":"624"},{"ruleId":"488","severity":1,"message":"625","line":166,"column":8,"nodeType":"490","endLine":166,"endColumn":60,"suggestions":"626"},{"ruleId":"488","severity":1,"message":"627","line":188,"column":12,"nodeType":"490","endLine":198,"endColumn":10,"suggestions":"628"},{"ruleId":"488","severity":1,"message":"621","line":206,"column":8,"nodeType":"490","endLine":206,"endColumn":10,"suggestions":"629"},{"ruleId":"496","severity":1,"message":"630","line":244,"column":11,"nodeType":"498","messageId":"499","endLine":244,"endColumn":27},{"ruleId":"631","severity":1,"message":"632","line":59,"column":61,"nodeType":"633","messageId":"634","endLine":59,"endColumn":63},{"ruleId":"488","severity":1,"message":"621","line":83,"column":8,"nodeType":"490","endLine":83,"endColumn":21,"suggestions":"635"},{"ruleId":"488","severity":1,"message":"636","line":108,"column":8,"nodeType":"490","endLine":108,"endColumn":48,"suggestions":"637"},{"ruleId":"488","severity":1,"message":"625","line":187,"column":8,"nodeType":"490","endLine":187,"endColumn":59,"suggestions":"638"},{"ruleId":"488","severity":1,"message":"639","line":210,"column":12,"nodeType":"490","endLine":219,"endColumn":10,"suggestions":"640"},{"ruleId":"488","severity":1,"message":"621","line":227,"column":8,"nodeType":"490","endLine":227,"endColumn":10,"suggestions":"641"},{"ruleId":"488","severity":1,"message":"618","line":242,"column":8,"nodeType":"490","endLine":242,"endColumn":24,"suggestions":"642"},{"ruleId":"496","severity":1,"message":"630","line":290,"column":11,"nodeType":"498","messageId":"499","endLine":290,"endColumn":27},{"ruleId":"496","severity":1,"message":"643","line":80,"column":11,"nodeType":"498","messageId":"499","endLine":80,"endColumn":19},{"ruleId":"488","severity":1,"message":"523","line":85,"column":109,"nodeType":"490","endLine":85,"endColumn":111,"suggestions":"644"},{"ruleId":"488","severity":1,"message":"523","line":86,"column":102,"nodeType":"490","endLine":86,"endColumn":104,"suggestions":"645"},{"ruleId":"488","severity":1,"message":"523","line":87,"column":74,"nodeType":"490","endLine":87,"endColumn":76,"suggestions":"646"},{"ruleId":"488","severity":1,"message":"523","line":88,"column":119,"nodeType":"490","endLine":88,"endColumn":121,"suggestions":"647"},{"ruleId":"488","severity":1,"message":"523","line":89,"column":117,"nodeType":"490","endLine":89,"endColumn":119,"suggestions":"648"},{"ruleId":"488","severity":1,"message":"649","line":166,"column":12,"nodeType":"490","endLine":166,"endColumn":42,"suggestions":"650"},{"ruleId":"488","severity":1,"message":"651","line":216,"column":12,"nodeType":"490","endLine":216,"endColumn":47,"suggestions":"652"},{"ruleId":"488","severity":1,"message":"653","line":236,"column":12,"nodeType":"490","endLine":236,"endColumn":95,"suggestions":"654"},{"ruleId":"488","severity":1,"message":"655","line":390,"column":8,"nodeType":"490","endLine":390,"endColumn":104,"suggestions":"656"},{"ruleId":"496","severity":1,"message":"657","line":32,"column":11,"nodeType":"498","messageId":"499","endLine":32,"endColumn":23},{"ruleId":"488","severity":1,"message":"658","line":42,"column":12,"nodeType":"490","endLine":42,"endColumn":21,"suggestions":"659"},{"ruleId":"488","severity":1,"message":"660","line":59,"column":8,"nodeType":"490","endLine":59,"endColumn":29,"suggestions":"661"},{"ruleId":"496","severity":1,"message":"662","line":8,"column":11,"nodeType":"498","messageId":"499","endLine":8,"endColumn":25},{"ruleId":"496","severity":1,"message":"663","line":9,"column":11,"nodeType":"498","messageId":"499","endLine":9,"endColumn":16},{"ruleId":"584","severity":1,"message":"664","line":9,"column":1,"nodeType":"586","endLine":29,"endColumn":2},{"ruleId":"488","severity":1,"message":"665","line":28,"column":8,"nodeType":"498","endLine":28,"endColumn":12},{"ruleId":"488","severity":1,"message":"666","line":28,"column":8,"nodeType":"498","endLine":28,"endColumn":12,"suggestions":"667"},{"ruleId":"484","replacedBy":"668"},{"ruleId":"486","replacedBy":"669"},{"ruleId":"496","severity":1,"message":"670","line":9,"column":16,"nodeType":"498","messageId":"499","endLine":9,"endColumn":27},{"ruleId":"496","severity":1,"message":"587","line":1,"column":10,"nodeType":"498","messageId":"499","endLine":1,"endColumn":14},{"ruleId":"671","severity":1,"message":"672","line":81,"column":5,"nodeType":"673","messageId":"674","endLine":83,"endColumn":6},{"ruleId":"675","severity":1,"message":"676","line":86,"column":9,"nodeType":"677","endLine":86,"endColumn":19},{"ruleId":"484","replacedBy":"485"},{"ruleId":"486","replacedBy":"487"},{"ruleId":"488","severity":1,"message":"678","line":116,"column":10,"nodeType":"490","endLine":121,"endColumn":6,"suggestions":"679"},{"ruleId":"496","severity":1,"message":"680","line":1,"column":10,"nodeType":"498","messageId":"499","endLine":1,"endColumn":19},{"ruleId":"496","severity":1,"message":"681","line":1,"column":21,"nodeType":"498","messageId":"499","endLine":1,"endColumn":27},"no-native-reassign",["682"],"no-negated-in-lhs",["683"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'creekBE'. Either include it or remove the dependency array.","ArrayExpression",["684"],"React Hook useEffect has a missing dependency: 'backgroundMusic'. Either include it or remove the dependency array.",["685"],"React Hook useEffect has a missing dependency: 'spendOneMinute'. Either include it or remove the dependency array.",["686"],"@typescript-eslint/no-unused-vars","'setMap' is assigned a value but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'rodDimensions.height'. Either include it or remove the dependency array.",["687"],"React Hook useMemo has an unnecessary dependency: 'playerCoordinates'. Either exclude it or remove the dependency array.",["688"],"React Hook useMemo has a missing dependency: 'map.shorePath.to.y'. Either include it or remove the dependency array.",["689"],"React Hook useMemo has missing dependencies: 'rodAngle' and 'rodDimensions.height'. Either include them or remove the dependency array.",["690"],"React Hook useEffect has a missing dependency: 'updateGlobalPositionState'. Either include it or remove the dependency array. If 'updateGlobalPositionState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["691"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useMemo has missing dependencies: 'isBarometerVisible', 'scrollToBait', and 'scrollToPlayer'. Either include them or remove the dependency array.",["692"],"React Hook useEffect has missing dependencies: 'map.shorePath.from.x', 'map.shorePath.from.y', 'map.shorePath.to.x', and 'map.shorePath.to.y'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMushroom' needs the current value of 'map.shorePath.from.x'.",["693"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'closeMenu'. Either include it or remove the dependency array. If 'closeMenu' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["694"],"React Hook useMemo has missing dependencies: 'lineStepMatches.steps', 'lineStepMatches.subSteps', and 'nextStep'. Either include them or remove the dependency array.",["695"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["696"],["697"],"React Hook useCallback has missing dependencies: 'isPlayerMoving', 'map.width', 'scrollToPlayer', and 'setPlayerCoordinates'. Either include them or remove the dependency array. If 'scrollToPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["698"],"React Hook useLayoutEffect has missing dependencies: 'scrollToPlayer', 'setBaitOffset', 'setBaitType', and 'setRodAngle'. Either include them or remove the dependency array. If 'scrollToPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["699"],"React Hook useEffect has missing dependencies: 'isBarometerVisible' and 'setIsBarometerVisible'. Either include them or remove the dependency array. If 'setIsBarometerVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["700"],"React Hook useCallback has a missing dependency: 'setProcess'. Either include it or remove the dependency array. If 'setProcess' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["701"],"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","The ref value 'shoreRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'shoreRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'movePlayer', 'shoreRef', and 'throwLine'. Either include them or remove the dependency array.",["702"],"'setHasThrown' is assigned a value but never used.",["703"],"React Hook useCallback has missing dependencies: 'setBaitOffset', 'setBaitType', 'setProcess', 'setRodAngle', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["704"],"React Hook useEffect has missing dependencies: 'scrollToPlayer', 'setBaitOffset', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["705"],["706"],"React Hook useCallback has missing dependencies: 'setBaitOffset', 'setRodAngle', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["707"],"React Hook useEffect has missing dependencies: 'badassSE', 'baitDropSE', 'baitRef', 'emitBaitFallEvent', 'lakeRef', 'scrollToBait', 'setBaitOffset', 'setBaitType', 'setIsBarometerVisible', and 'setProcess'. Either include them or remove the dependency array. If 'setIsBarometerVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["708"],"React Hook useCallback has a missing dependency: 'setBaitOffset'. Either include it or remove the dependency array. If 'setBaitOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["709"],"The ref value 'gaugeRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'gaugeRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'changeRodDirection' and 'goBack'. Either include them or remove the dependency array.",["710"],"React Hook useMemo has an unnecessary dependency: 'gaugeValueRef.current'. Either exclude it or remove the dependency array. Mutable values like 'gaugeValueRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["711"],"Assignments to the 'recoverTensionValue' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useCallback has missing dependencies: 'baitOffsetLimit.to.y', 'scrollToBait', and 'setRodAngle'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["712"],"React Hook useEffect has a missing dependency: 'incrementLineTension'. Either include it or remove the dependency array. If 'incrementLineTension' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["713"],"React Hook useEffect has a missing dependency: 'reelingSE'. Either include it or remove the dependency array.",["714"],"React Hook useEffect has missing dependencies: 'catchNewFish', 'goBack', 'hookedFish.fish', and 'setGameProcess'. Either include them or remove the dependency array. If 'catchNewFish' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["715"],"React Hook useEffect has missing dependencies: 'goBack', 'lineBreakSE', 'loseLineBreak', 'loseLineLoose', and 'setGameProcess'. Either include them or remove the dependency array. If 'setGameProcess' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["716"],"React Hook useCallback has missing dependencies: 'reelingSE', 'setGameProcess', 'setHookedFish', and 'setLineTension'. Either include them or remove the dependency array. If 'setLineTension' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["717"],"React Hook useEffect has missing dependencies: 'hookedFish.fish' and 'setIsFishPulling'. Either include them or remove the dependency array. If 'setIsFishPulling' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["718"],"React Hook useEffect has a missing dependency: 'SEPath'. Either include it or remove the dependency array.",["719"],"React Hook useEffect has missing dependencies: 'destroyNotification' and 'transition'. Either include them or remove the dependency array.",["720"],"React Hook useEffect has a missing dependency: 'makeBaitAvailable'. Either include it or remove the dependency array.",["721"],"React Hook useCallback has missing dependencies: 'baitOffset.x', 'baitOffset.y', 'scrollToBait', 'setBaitOffset', and 'setRodAngle'. Either include them or remove the dependency array. If 'setBaitOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["722"],["723"],["724"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Item' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"725","text":"726"},"React Hook useMemo has a missing dependency: 'sellerPhrase.length'. Either include it or remove the dependency array.",["727"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'GiFishing' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'allCategories'. Either exclude it or remove the dependency array. Outer scope values like 'allCategories' aren't valid dependencies because mutating them doesn't re-render the component.",["728"],"React Hook useMemo has a missing dependency: 'setCurrentSection'. Either include it or remove the dependency array. If 'setCurrentSection' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["729"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useState' is defined but never used.","'Fragment' is defined but never used.","React Hook useMemo has a missing dependency: 'isEquipment'. Either include it or remove the dependency array.",["730"],["731"],["732"],["733"],["734"],["735"],["736"],"React Hook useMemo has missing dependencies: 'equipItem', 'isEquipment', and 'isEquipped'. Either include them or remove the dependency array.",["737"],"React Hook useMemo has a missing dependency: 'category'. Either include it or remove the dependency array. Outer scope values like 'rodLevels' aren't valid dependencies because mutating them doesn't re-render the component.",["738"],["739"],"React Hook useEffect has a missing dependency: 'setSellerPhrase'. Either include it or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["740"],"React Hook useMemo has missing dependencies: 'saleSE' and 'setSellerPhrase'. Either include them or remove the dependency array.",["741"],"React Hook useMemo has a missing dependency: 'setSellerPhrase'. Either include it or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["742"],"React Hook useCallback has missing dependencies: 'setFocusedItem' and 'setSellerPhrase'. Either include them or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["743"],["744"],"'ForSaleItemProps' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["745"],"React Hook useMemo has missing dependencies: 'inventoryEntries', 'purchaseSE', 'setSellerPhrase', and 'thankYouSE'. Either include them or remove the dependency array.",["746"],["747"],"React Hook useCallback has missing dependencies: 'setSellerPhrase' and 'thankYouSE'. Either include them or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["748"],["749"],["750"],"'map' is assigned a value but never used.",["751"],["752"],["753"],["754"],["755"],"React Hook useCallback has an unnecessary dependency: 'opacity'. Either exclude it or remove the dependency array.",["756"],"React Hook useCallback has missing dependencies: 'baitFood._id', 'baitFood.category', 'loseBait', 'setGameNotification', and 'setGameProcess'. Either include them or remove the dependency array.",["757"],"React Hook useCallback has unnecessary dependencies: 'fishDirection', 'isInScope', and 'likesBait'. Either exclude them or remove the dependency array.",["758"],"React Hook useEffect has missing dependencies: 'fish', 'isBoss', 'makeBaitAvailable', 'pullChance', 'roamingInterval', 'setGameNotification', 'setGameProcess', and 'setHookedFish'. Either include them or remove the dependency array.",["759"],"'containerRef' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'transition'. Either include it or remove the dependency array.",["760"],"React Hook useLayoutEffect has a missing dependency: 'transition'. Either include it or remove the dependency array.",["761"],"'FishEntryProps' is defined but never used.","'Props' is defined but never used.","Assign arrow function to a variable before exporting as module default","React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useMemo has missing dependencies: 'rest' and 'src'. Either include them or remove the dependency array.",["762"],["682"],["683"],"'Coordinates' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","React Hook useMemo has a missing dependency: 'useTouch'. Either include it or remove the dependency array.",["763"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"788","fix":"790"},{"desc":"791","fix":"792"},{"desc":"793","fix":"794"},{"desc":"795","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"795","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"812","fix":"813"},{"desc":"814","fix":"815"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},{"desc":"820","fix":"821"},{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"826","fix":"827"},{"desc":"828","fix":"829"},{"desc":"830","fix":"831"},{"desc":"832","fix":"833"},{"desc":"834","fix":"835"},{"desc":"836","fix":"837"},{"desc":"838","fix":"839"},{"desc":"795","fix":"840"},{"desc":"841","fix":"842"},[2090,2091],"",{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"847","fix":"848"},{"desc":"849","fix":"850"},{"desc":"801","fix":"851"},{"desc":"801","fix":"852"},{"desc":"801","fix":"853"},{"desc":"801","fix":"854"},{"desc":"801","fix":"855"},{"desc":"849","fix":"856"},{"desc":"857","fix":"858"},{"desc":"859","fix":"860"},{"desc":"861","fix":"862"},{"desc":"863","fix":"864"},{"desc":"865","fix":"866"},{"desc":"867","fix":"868"},{"desc":"869","fix":"870"},{"desc":"871","fix":"872"},{"desc":"863","fix":"873"},{"desc":"874","fix":"875"},{"desc":"876","fix":"877"},{"desc":"878","fix":"879"},{"desc":"871","fix":"880"},{"desc":"859","fix":"881"},{"desc":"801","fix":"882"},{"desc":"801","fix":"883"},{"desc":"801","fix":"884"},{"desc":"801","fix":"885"},{"desc":"801","fix":"886"},{"desc":"887","fix":"888"},{"desc":"889","fix":"890"},{"desc":"891","fix":"892"},{"desc":"893","fix":"894"},{"desc":"895","fix":"896"},{"desc":"897","fix":"898"},{"desc":"899","fix":"900"},{"desc":"901","fix":"902"},"Update the dependencies array to be: [audioEnabled, creekBE]",{"range":"903","text":"904"},"Update the dependencies array to be: [audioEnabled, backgroundMusic, isBGMEnabled]",{"range":"905","text":"906"},"Update the dependencies array to be: [spendOneMinute]",{"range":"907","text":"908"},"Update the dependencies array to be: [playerCoordinates.width, playerCoordinates.x, playerCoordinates.y, rodDimensions.height]",{"range":"909","text":"910"},"Update the dependencies array to be: [map, baitCoordinates, rodDimensions]",{"range":"911","text":"912"},"Update the dependencies array to be: [baitCoordinates.x, baitCoordinates.y, baitOffset.x, baitOffset.y, map.shorePath.to.y]",{"range":"913","text":"914"},"Update the dependencies array to be: [lineOrigin.x, lineOrigin.y, baitOffset.x, baitOffset.y, rodOffset.x, rodOffset.y, rodAngle, rodDimensions.height]",{"range":"915","text":"916"},"Update the dependencies array to be: [baitLakeCoords, updateGlobalPositionState]",{"range":"917","text":"918"},"Update the dependencies array to be: [process, setProcess, playerCoordinates, scrollToPlayer, map, isBarometerVisible, scrollToBait, rodAngle, rodOffset, baitOffset, baitOffsetLimit, baitLakeCoords, rodLevel, baitDistance, lineLength]",{"range":"919","text":"920"},"Update the dependencies array to be: [isPlayerOutOfBaits, map.shorePath.from.x, map.shorePath.from.y, map.shorePath.to.x, map.shorePath.to.y]",{"range":"921","text":"922"},"Update the dependencies array to be: [closeMenu]",{"range":"923","text":"924"},"Update the dependencies array to be: [nextStep, baitDistance, lineStepMatches.steps, lineStepMatches.subSteps]",{"range":"925","text":"926"},"Update the dependencies array to be: [dispatch, processFrozen]",{"range":"927","text":"928"},{"range":"929","text":"928"},"Update the dependencies array to be: [isPlayerMoving, map.width, playerCoordinates, processFrozen, scrollToPlayer, setPlayerCoordinates]",{"range":"930","text":"931"},"Update the dependencies array to be: [scrollToPlayer, setBaitOffset, setBaitType, setRodAngle]",{"range":"932","text":"933"},"Update the dependencies array to be: [isBarometerVisible, setIsBarometerVisible]",{"range":"934","text":"935"},"Update the dependencies array to be: [isPlayerMoving, isMainMenuOpen, baitFood, processFrozen, setProcess]",{"range":"936","text":"937"},"Update the dependencies array to be: [playerCoordinates, isMainMenuOpen, processFrozen, movePlayer, throwLine, shoreRef]",{"range":"938","text":"939"},"Update the dependencies array to be: [dispatch]",{"range":"940","text":"941"},"Update the dependencies array to be: [processFrozen, setBaitOffset, setBaitType, setProcess, setRodAngle, setRodOffset]",{"range":"942","text":"943"},"Update the dependencies array to be: [scrollToPlayer, setBaitOffset, setRodOffset]",{"range":"944","text":"945"},{"range":"946","text":"935"},"Update the dependencies array to be: [isThrowing, processFrozen, setBaitOffset, setRodAngle, setRodOffset]",{"range":"947","text":"948"},"Update the dependencies array to be: [isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords, setIsBarometerVisible, setBaitOffset, scrollToBait, emitBaitFallEvent, setBaitType, baitRef, lakeRef, setProcess, baitDropSE, badassSE]",{"range":"949","text":"950"},"Update the dependencies array to be: [processFrozen, rodLevel.maxLength, setBaitOffset, rodAngle]",{"range":"951","text":"952"},"Update the dependencies array to be: [isPreparingThrow, spaceFired, rodAngle, rodOffset, confirmThrow, isThrowing, processFrozen, goBack, changeRodDirection]",{"range":"953","text":"954"},"Update the dependencies array to be: []",{"range":"955","text":"956"},"Update the dependencies array to be: [baitOffset, lineLength, setBaitOffset, setRodAngle, scrollToBait, baitOffsetLimit.to.y]",{"range":"957","text":"958"},"Update the dependencies array to be: [isFishPulling, isPlayerReeling, strengthRatio, fishRodLevel, move, incrementLineTension]",{"range":"959","text":"960"},"Update the dependencies array to be: [isPlayerReeling, reelingSE]",{"range":"961","text":"962"},"Update the dependencies array to be: [baitDistance, catchNewFish, goBack, hookedFish.fish, setGameProcess]",{"range":"963","text":"964"},"Update the dependencies array to be: [goBack, lineBreakSE, lineTension, loseLineBreak, loseLineLoose, setGameProcess]",{"range":"965","text":"966"},"Update the dependencies array to be: [reelingSE, setGameProcess, setHookedFish, setLineTension]",{"range":"967","text":"968"},"Update the dependencies array to be: [hookedFish.fish, setIsFishPulling]",{"range":"969","text":"970"},"Update the dependencies array to be: [SEPath, soundEffect]",{"range":"971","text":"972"},"Update the dependencies array to be: [destroyNotification, duration, transition]",{"range":"973","text":"974"},"Update the dependencies array to be: [makeBaitAvailable]",{"range":"975","text":"976"},"Update the dependencies array to be: [processFrozen, baitDistance, isReeling, baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait, goBack]",{"range":"977","text":"978"},{"range":"979","text":"935"},"Update the dependencies array to be: [isReeling, reelingSE]",{"range":"980","text":"981"},"Update the dependencies array to be: [sellerPhrase.length, sellerPhraseSpelled]",{"range":"982","text":"983"},"Update the dependencies array to be: [baitFood]",{"range":"984","text":"985"},"Update the dependencies array to be: [currentStatusSectionID, doubloons, gameTimeSpentFormatted, fishrodLevel._id, baitFood, baitColor, removeBait, setCurrentSection]",{"range":"986","text":"987"},"Update the dependencies array to be: [isEquipment, category, rodLevel._id, _id]",{"range":"988","text":"989"},{"range":"990","text":"941"},{"range":"991","text":"941"},{"range":"992","text":"941"},{"range":"993","text":"941"},{"range":"994","text":"941"},{"range":"995","text":"989"},"Update the dependencies array to be: [isEquipment, isEquipped, _id, category, baitFood, removeBait, handleUseBait, equipItem]",{"range":"996","text":"997"},"Update the dependencies array to be: [_id, category]",{"range":"998","text":"999"},"Update the dependencies array to be: [entries, isPlayerOutOfBaits, currentEntryNum, setCurrentSection]",{"range":"1000","text":"1001"},"Update the dependencies array to be: [focusedItem, setSellerPhrase]",{"range":"1002","text":"1003"},"Update the dependencies array to be: [myDoubloons, sellableEntries, focusedItem, setSellerPhrase, sellItem, saleSE]",{"range":"1004","text":"1005"},"Update the dependencies array to be: [canSell, isConfirmingSale, saleAmount, _id, plural, setSellerPhrase]",{"range":"1006","text":"1007"},"Update the dependencies array to be: [canSell, isConfirmingSale, setSellerPhrase, saleAmount, plural, _id, sellItem, totalPrice, saleSE, amount, setFocusedItem]",{"range":"1008","text":"1009"},"Update the dependencies array to be: [setSellerPhrase]",{"range":"1010","text":"1011"},{"range":"1012","text":"1003"},"Update the dependencies array to be: [focusedItem, setSellerPhrase, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries]",{"range":"1013","text":"1014"},"Update the dependencies array to be: [canBuy, isConfirmingPurchase, amount, _id, plural, setSellerPhrase]",{"range":"1015","text":"1016"},"Update the dependencies array to be: [canBuy, isConfirmingPurchase, setSellerPhrase, amount, plural, _id, purchaseItem, totalPrice, purchaseSE, thankYouSE]",{"range":"1017","text":"1018"},{"range":"1019","text":"1011"},{"range":"1020","text":"999"},{"range":"1021","text":"941"},{"range":"1022","text":"941"},{"range":"1023","text":"941"},{"range":"1024","text":"941"},{"range":"1025","text":"941"},"Update the dependencies array to be: [setFishCoords, area]",{"range":"1026","text":"1027"},"Update the dependencies array to be: [hookedFish, giveUpBait, baitFood.category, baitFood._id, setGameNotification, loseBait, setGameProcess]",{"range":"1028","text":"1029"},"Update the dependencies array to be: [fishCoords, roamingDistance, fishWidth, area]",{"range":"1030","text":"1031"},"Update the dependencies array to be: [wouldHookSuccessfully, canTryToCatch, isBaitAvailable, fishID, groupID, strength, size, goAway, setHookedFish, fish, pullChance, isBoss, roamingInterval, setGameProcess, makeBaitAvailable, setGameNotification]",{"range":"1032","text":"1033"},"Update the dependencies array to be: [onClose, transition]",{"range":"1034","text":"1035"},"Update the dependencies array to be: [blur, blurContainer, transition]",{"range":"1036","text":"1037"},"Update the dependencies array to be: [rest, src]",{"range":"1038","text":"1039"},"Update the dependencies array to be: [useTouch, vertical, swipeDistance, goToPreviousPage, goToNextPage]",{"range":"1040","text":"1041"},[3096,3110],"[audioEnabled, creekBE]",[4926,4954],"[audioEnabled, backgroundMusic, isBGMEnabled]",[5132,5134],"[spendOneMinute]",[6395,6414],"[playerCoordinates.width, playerCoordinates.x, playerCoordinates.y, rodDimensions.height]",[7342,7398],"[map, baitCoordinates, rodDimensions]",[7693,7722],"[baitCoordinates.x, baitCoordinates.y, baitOffset.x, baitOffset.y, map.shorePath.to.y]",[8447,8482],"[lineOrigin.x, lineOrigin.y, baitOffset.x, baitOffset.y, rodOffset.x, rodOffset.y, rodAngle, rodDimensions.height]",[10939,10955],"[baitLakeCoords, updateGlobalPositionState]",[14239,14533],"[process, setProcess, playerCoordinates, scrollToPlayer, map, isBarometerVisible, scrollToBait, rodAngle, rodOffset, baitOffset, baitOffsetLimit, baitLakeCoords, rodLevel, baitDistance, lineLength]",[15269,15289],"[isPlayerOutOfBaits, map.shorePath.from.x, map.shorePath.from.y, map.shorePath.to.x, map.shorePath.to.y]",[1360,1362],"[closeMenu]",[2281,2322],"[nextStep, baitDistance, lineStepMatches.steps, lineStepMatches.subSteps]",[1931,1946],"[dispatch, processFrozen]",[2113,2128],[3577,3611],"[isPlayerMoving, map.width, playerCoordinates, processFrozen, scrollToPlayer, setPlayerCoordinates]",[3886,3888],"[scrollToPlayer, setBaitOffset, setBaitType, setRodAngle]",[4034,4036],"[isBarometerVisible, setIsBarometerVisible]",[4349,4406],"[isPlayerMoving, isMainMenuOpen, baitFood, processFrozen, setProcess]",[8209,8259],"[playerCoordinates, isMainMenuOpen, processFrozen, movePlayer, throwLine, shoreRef]",[2738,2740],"[dispatch]",[3655,3670],"[processFrozen, setBaitOffset, setBaitType, setProcess, setRodAngle, setRodOffset]",[3864,3866],"[scrollToPlayer, setBaitOffset, setRodOffset]",[3966,3968],[4354,4381],"[isThrowing, processFrozen, setBaitOffset, setRodAngle, setRodOffset]",[8365,8443],"[isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords, setIsBarometerVisible, setBaitOffset, scrollToBait, emitBaitFallEvent, setBaitType, baitRef, lakeRef, setProcess, baitDropSE, badassSE]",[9007,9042],"[processFrozen, rodLevel.maxLength, setBaitOffset, rodAngle]",[15711,15873],"[isPreparingThrow, spaceFired, rodAngle, rodOffset, confirmThrow, isThrowing, processFrozen, goBack, changeRodDirection]",[19301,19324],"[]",[8132,8171],"[baitOffset, lineLength, setBaitOffset, setRodAngle, scrollToBait, baitOffsetLimit.to.y]",[10370,10437],"[isFishPulling, isPlayerReeling, strengthRatio, fishRodLevel, move, incrementLineTension]",[10659,10676],"[isPlayerReeling, reelingSE]",[10951,10965],"[baitDistance, catchNewFish, goBack, hookedFish.fish, setGameProcess]",[11632,11645],"[goBack, lineBreakSE, lineTension, loseLineBreak, loseLineLoose, setGameProcess]",[11893,11895],"[reelingSE, setGameProcess, setHookedFish, setLineTension]",[12768,12770],"[hookedFish.fish, setIsFishPulling]",[2221,2234],"[SEPath, soundEffect]",[2639,2649],"[destroyNotification, duration, transition]",[2090,2092],"[makeBaitAvailable]",[3899,3959],"[processFrozen, baitDistance, isReeling, baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait, goBack]",[4131,4133],[4824,4835],"[isReeling, reelingSE]",[1946,1967],"[sellerPhrase.length, sellerPhraseSpelled]",[1622,1647],"[baitFood]",[4719,4895],"[currentStatusSectionID, doubloons, gameTimeSpentFormatted, fishrodLevel._id, baitFood, baitColor, removeBait, setCurrentSection]",[2264,2289],"[isEquipment, category, rodLevel._id, _id]",[3578,3580],[3681,3683],[3779,3781],[3865,3867],[3957,3959],[4435,4460],[7283,7345],"[isEquipment, isEquipped, _id, category, baitFood, removeBait, handleUseBait, equipItem]",[7929,7945],"[_id, category]",[13634,13680],"[entries, isPlayerOutOfBaits, currentEntryNum, setCurrentSection]",[2648,2661],"[focusedItem, setSellerPhrase]",[3556,3609],"[myDoubloons, sellableEntries, focusedItem, setSellerPhrase, sellItem, saleSE]",[6495,6547],"[canSell, isConfirmingSale, saleAmount, _id, plural, setSellerPhrase]",[7473,7691],"[canSell, isConfirmingSale, setSellerPhrase, saleAmount, plural, _id, sellItem, totalPrice, saleSE, amount, setFocusedItem]",[7850,7852],"[setSellerPhrase]",[3521,3534],[4417,4457],"[focusedItem, setSellerPhrase, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries]",[7423,7474],"[canBuy, isConfirmingPurchase, amount, _id, plural, setSellerPhrase]",[8392,8596],"[canBuy, isConfirmingPurchase, setSellerPhrase, amount, plural, _id, purchaseItem, totalPrice, purchaseSE, thankYouSE]",[8759,8761],[9345,9361],[3880,3882],[3986,3988],[4064,4066],[4187,4189],[4308,4310],[7463,7493],"[setFishCoords, area]",[9330,9365],"[hookedFish, giveUpBait, baitFood.category, baitFood._id, setGameNotification, loseBait, setGameProcess]",[10334,10417],"[fishCoords, roamingDistance, fishWidth, area]",[16610,16706],"[wouldHookSuccessfully, canTryToCatch, isBaitAvailable, fishID, groupID, strength, size, goAway, setHookedFish, fish, pullChance, isBoss, roamingInterval, setGameProcess, makeBaitAvailable, setGameNotification]",[1239,1248],"[onClose, transition]",[1855,1876],"[blur, blurContainer, transition]",[704,708],"[rest, src]",[3952,4053],"[useTouch, vertical, swipeDistance, goToPreviousPage, goToNextPage]"]