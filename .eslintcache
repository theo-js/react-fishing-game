[{"C:\\www\\react-fishing-game\\src\\index.tsx":"1","C:\\www\\react-fishing-game\\src\\reportWebVitals.ts":"2","C:\\www\\react-fishing-game\\src\\App.tsx":"3","C:\\www\\react-fishing-game\\src\\store\\index.js":"4","C:\\www\\react-fishing-game\\src\\components\\Game\\index.tsx":"5","C:\\www\\react-fishing-game\\src\\interfaces\\game.ts":"6","C:\\www\\react-fishing-game\\src\\store\\actions\\types.ts":"7","C:\\www\\react-fishing-game\\src\\store\\actions\\inventory.ts":"8","C:\\www\\react-fishing-game\\src\\store\\actions\\game.ts":"9","C:\\www\\react-fishing-game\\src\\store\\actions\\position.ts":"10","C:\\www\\react-fishing-game\\src\\store\\selectors\\fishing.ts":"11","C:\\www\\react-fishing-game\\src\\store\\selectors\\game.ts":"12","C:\\www\\react-fishing-game\\src\\store\\selectors\\inventory.ts":"13","C:\\www\\react-fishing-game\\src\\utils\\math.ts":"14","C:\\www\\react-fishing-game\\src\\utils\\position.ts":"15","C:\\www\\react-fishing-game\\src\\store\\reducers\\index.ts":"16","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\index.tsx":"17","C:\\www\\react-fishing-game\\src\\components\\Game\\Barometer\\index.tsx":"18","C:\\www\\react-fishing-game\\src\\components\\Game\\AudioPlayer\\index.tsx":"19","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\Initial\\index.tsx":"20","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\index.tsx":"21","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\ThrowLine\\index.tsx":"22","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\Battle\\index.tsx":"23","C:\\www\\react-fishing-game\\src\\components\\Game\\GameNotification\\index.tsx":"24","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\WaitFish\\index.tsx":"25","C:\\www\\react-fishing-game\\src\\store\\reducers\\position.ts":"26","C:\\www\\react-fishing-game\\src\\store\\reducers\\game.ts":"27","C:\\www\\react-fishing-game\\src\\store\\reducers\\inventory.ts":"28","C:\\www\\react-fishing-game\\src\\store\\reducers\\fishing.ts":"29","C:\\www\\react-fishing-game\\src\\utils\\throttle.ts":"30","C:\\www\\react-fishing-game\\src\\store\\actions\\fishing.ts":"31","C:\\www\\react-fishing-game\\src\\store\\selectors\\position.ts":"32","C:\\www\\react-fishing-game\\src\\components\\Game\\evolution\\index.ts":"33","C:\\www\\react-fishing-game\\src\\components\\Game\\animations\\index.ts":"34","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\index.tsx":"35","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Status\\index.tsx":"36","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Credits\\index.tsx":"37","C:\\www\\react-fishing-game\\src\\components\\Game\\Barometer\\TensionGauge\\index.tsx":"38","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Beginner\\index.tsx":"39","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Advanced\\index.tsx":"40","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Expert\\index.tsx":"41","C:\\www\\react-fishing-game\\src\\components\\ProgressCircle\\index.tsx":"42","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Starter\\index.tsx":"43","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\King\\index.tsx":"44","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Intermediate\\index.tsx":"45","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Abyss\\index.tsx":"46","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Inventory\\index.tsx":"47","C:\\www\\react-fishing-game\\src\\utils\\time.ts":"48","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Sell\\index.tsx":"49","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Buy\\index.tsx":"50","C:\\www\\react-fishing-game\\src\\components\\fishes\\Default\\index.tsx":"51","C:\\www\\react-fishing-game\\src\\components\\misc\\Modal\\index.tsx":"52","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\FishArea\\index.tsx":"53","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\FishGroup\\index.tsx":"54","C:\\www\\react-fishing-game\\src\\interfaces\\position.ts":"55","C:\\www\\react-fishing-game\\src\\hooks\\useLazyAudio\\index.ts":"56","C:\\www\\react-fishing-game\\src\\utils\\tests\\time.test.ts":"57","C:\\www\\react-fishing-game\\src\\utils\\tests\\position.test.ts":"58","C:\\www\\react-fishing-game\\src\\utils\\tests\\math.test.ts":"59","C:\\www\\react-fishing-game\\src\\setupTests.ts":"60","C:\\www\\react-fishing-game\\src\\react-app-env.d.ts":"61","C:\\www\\react-fishing-game\\src\\interfaces\\items.ts":"62","C:\\www\\react-fishing-game\\src\\interfaces\\fishes.ts":"63","C:\\www\\react-fishing-game\\src\\interfaces\\evolution.ts":"64","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\INITIAL.tsx":"65","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\index.tsx":"66","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\index.test.tsx":"67","C:\\www\\react-fishing-game\\src\\components\\misc\\Slider\\index.tsx":"68","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\BAG.tsx":"69","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\THROW_LINE.tsx":"70","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\THROWN.tsx":"71","C:\\www\\react-fishing-game\\src\\components\\misc\\Spinners\\Wave\\index.tsx":"72"},{"size":517,"mtime":1627509175440,"results":"73","hashOfConfig":"74"},{"size":440,"mtime":1627509175451,"results":"75","hashOfConfig":"74"},{"size":302,"mtime":1627509174917,"results":"76","hashOfConfig":"74"},{"size":402,"mtime":1627509175464,"results":"77","hashOfConfig":"74"},{"size":22206,"mtime":1628463687696,"results":"78","hashOfConfig":"74"},{"size":1133,"mtime":1628421969316,"results":"79","hashOfConfig":"74"},{"size":1354,"mtime":1628205265489,"results":"80","hashOfConfig":"74"},{"size":1551,"mtime":1627509175460,"results":"81","hashOfConfig":"74"},{"size":1447,"mtime":1628368314085,"results":"82","hashOfConfig":"74"},{"size":145,"mtime":1627509175461,"results":"83","hashOfConfig":"74"},{"size":1038,"mtime":1627509175473,"results":"84","hashOfConfig":"74"},{"size":1992,"mtime":1628235016782,"results":"85","hashOfConfig":"74"},{"size":1027,"mtime":1627509175475,"results":"86","hashOfConfig":"74"},{"size":532,"mtime":1627509175478,"results":"87","hashOfConfig":"74"},{"size":1677,"mtime":1627509175479,"results":"88","hashOfConfig":"74"},{"size":350,"mtime":1627509175468,"results":"89","hashOfConfig":"74"},{"size":4342,"mtime":1627509175345,"results":"90","hashOfConfig":"74"},{"size":4050,"mtime":1628207143022,"results":"91","hashOfConfig":"74"},{"size":2936,"mtime":1627734877707,"results":"92","hashOfConfig":"74"},{"size":9509,"mtime":1628523231627,"results":"93","hashOfConfig":"74"},{"size":2299,"mtime":1627509175386,"results":"94","hashOfConfig":"74"},{"size":20345,"mtime":1628474223151,"results":"95","hashOfConfig":"74"},{"size":16837,"mtime":1628208262228,"results":"96","hashOfConfig":"74"},{"size":6235,"mtime":1627927907659,"results":"97","hashOfConfig":"74"},{"size":8878,"mtime":1628475782726,"results":"98","hashOfConfig":"74"},{"size":820,"mtime":1627509175471,"results":"99","hashOfConfig":"74"},{"size":4817,"mtime":1628212248711,"results":"100","hashOfConfig":"74"},{"size":4430,"mtime":1627924659461,"results":"101","hashOfConfig":"74"},{"size":2230,"mtime":1627924756113,"results":"102","hashOfConfig":"74"},{"size":275,"mtime":1627509175485,"results":"103","hashOfConfig":"74"},{"size":4994,"mtime":1628208793705,"results":"104","hashOfConfig":"74"},{"size":558,"mtime":1627509175476,"results":"105","hashOfConfig":"74"},{"size":1507,"mtime":1627509175392,"results":"106","hashOfConfig":"74"},{"size":1885,"mtime":1627915544253,"results":"107","hashOfConfig":"74"},{"size":5055,"mtime":1627509175328,"results":"108","hashOfConfig":"74"},{"size":6011,"mtime":1627509175339,"results":"109","hashOfConfig":"74"},{"size":2723,"mtime":1627933151025,"results":"110","hashOfConfig":"74"},{"size":1958,"mtime":1627509175210,"results":"111","hashOfConfig":"74"},{"size":1317,"mtime":1627509175363,"results":"112","hashOfConfig":"74"},{"size":1319,"mtime":1627509175360,"results":"113","hashOfConfig":"74"},{"size":1315,"mtime":1627509175366,"results":"114","hashOfConfig":"74"},{"size":1497,"mtime":1627509175421,"results":"115","hashOfConfig":"74"},{"size":1303,"mtime":1627509175384,"results":"116","hashOfConfig":"74"},{"size":1317,"mtime":1627509175382,"results":"117","hashOfConfig":"74"},{"size":1327,"mtime":1627509175379,"results":"118","hashOfConfig":"74"},{"size":1318,"mtime":1627509175357,"results":"119","hashOfConfig":"74"},{"size":14308,"mtime":1627509175235,"results":"120","hashOfConfig":"74"},{"size":1092,"mtime":1628023170193,"results":"121","hashOfConfig":"74"},{"size":10985,"mtime":1627896075405,"results":"122","hashOfConfig":"74"},{"size":12889,"mtime":1627896103995,"results":"123","hashOfConfig":"74"},{"size":21191,"mtime":1628206789328,"results":"124","hashOfConfig":"74"},{"size":5248,"mtime":1628508511070,"results":"125","hashOfConfig":"74"},{"size":1926,"mtime":1627509175370,"results":"126","hashOfConfig":"74"},{"size":2159,"mtime":1627509175377,"results":"127","hashOfConfig":"74"},{"size":466,"mtime":1628208890216,"results":"128","hashOfConfig":"74"},{"size":711,"mtime":1627839630541,"results":"129","hashOfConfig":"74"},{"size":1476,"mtime":1627942850615,"results":"130","hashOfConfig":"74"},{"size":3873,"mtime":1627509175483,"results":"131","hashOfConfig":"74"},{"size":1138,"mtime":1627509175481,"results":"132","hashOfConfig":"74"},{"size":246,"mtime":1627509175453,"results":"133","hashOfConfig":"74"},{"size":39,"mtime":1627509175450,"results":"134","hashOfConfig":"74"},{"size":428,"mtime":1627509175447,"results":"135","hashOfConfig":"74"},{"size":946,"mtime":1627934171855,"results":"136","hashOfConfig":"74"},{"size":360,"mtime":1627509175443,"results":"137","hashOfConfig":"74"},{"size":6607,"mtime":1628519259185,"results":"138","hashOfConfig":"74"},{"size":3329,"mtime":1628523121462,"results":"139","hashOfConfig":"74"},{"size":394,"mtime":1628253300600,"results":"140","hashOfConfig":"74"},{"size":2125,"mtime":1628463351630,"results":"141","hashOfConfig":"74"},{"size":1558,"mtime":1628367861812,"results":"142","hashOfConfig":"74"},{"size":8619,"mtime":1628508659261,"results":"143","hashOfConfig":"74"},{"size":8651,"mtime":1628524764537,"results":"144","hashOfConfig":"74"},{"size":1802,"mtime":1628522153815,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"j4rwdu",{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"148"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"148"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"148"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"148"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"148"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"148"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"210","usedDeprecatedRules":"148"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"148"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"148"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"148"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"148"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"148"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"148"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"148"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"148"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"148"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"148"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"148"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"148"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"281"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"148"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"304"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\www\\react-fishing-game\\src\\index.tsx",[],["315","316"],"C:\\www\\react-fishing-game\\src\\reportWebVitals.ts",[],"C:\\www\\react-fishing-game\\src\\App.tsx",[],"C:\\www\\react-fishing-game\\src\\store\\index.js",[],["317","318"],"C:\\www\\react-fishing-game\\src\\components\\Game\\index.tsx",["319","320","321","322","323","324","325","326","327","328","329","330","331","332","333"],"C:\\www\\react-fishing-game\\src\\interfaces\\game.ts",[],"C:\\www\\react-fishing-game\\src\\store\\actions\\types.ts",[],"C:\\www\\react-fishing-game\\src\\store\\actions\\inventory.ts",[],"C:\\www\\react-fishing-game\\src\\store\\actions\\game.ts",["334"],"C:\\www\\react-fishing-game\\src\\store\\actions\\position.ts",[],"C:\\www\\react-fishing-game\\src\\store\\selectors\\fishing.ts",[],"C:\\www\\react-fishing-game\\src\\store\\selectors\\game.ts",[],"C:\\www\\react-fishing-game\\src\\store\\selectors\\inventory.ts",[],"C:\\www\\react-fishing-game\\src\\utils\\math.ts",[],"C:\\www\\react-fishing-game\\src\\utils\\position.ts",[],"C:\\www\\react-fishing-game\\src\\store\\reducers\\index.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\index.tsx",["335","336","337"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport Inventory from './Inventory'\r\nimport Status from './Status'\r\nimport Shop from './Shop'\r\nimport Credits from './Credits'\r\nimport styles from './index.module.sass'\r\nimport { CgInbox, BiStats, AiTwotoneShop, FaHandsHelping } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { closeMainMenuAction } from '../../../store/actions/game'\r\nimport { isMainMenuClosingSelector } from '../../../store/selectors/game'\r\n\r\ninterface Props {\r\n    closeMenu?: () => void,\r\n    isMenuClosing?: boolean\r\n}\r\n\r\nexport enum SectionID {\r\n    INVENTORY = 'INVENTORY',\r\n    STATS = 'STATS',\r\n    SHOPPING = 'SHOPPING',\r\n    CREDITS = 'CREDITS'\r\n}\r\n\r\nexport const MainMenu: React.FC<Props> = ({ closeMenu, isMenuClosing }) => {\r\n    const [currentSection, setCurrentSection] = useState<SectionID>(SectionID.INVENTORY)\r\n\r\n    // Keyboard events\r\n    useEffect(() => {\r\n        function handleKeyPress(e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 8: // Backspace\r\n                case 46: // Delete\r\n                    closeMenu()\r\n                    break\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keypress', handleKeyPress, false)\r\n        return () => document.removeEventListener('keypress', handleKeyPress, false)\r\n    }, [])\r\n\r\n    const currentSectionJSX = useMemo(() => {\r\n        switch(currentSection) {\r\n            case SectionID.INVENTORY:\r\n                return <Inventory setCurrentSection={setCurrentSection} />\r\n                break\r\n            case SectionID.STATS:\r\n                return <Status setCurrentSection={setCurrentSection} />\r\n                break\r\n            case SectionID.CREDITS:\r\n                return <Credits />\r\n            default: return <Shop />\r\n        }\r\n    }, [currentSection])\r\n\r\n    return (\r\n        <div\r\n            className={`${styles.mainMenu} ${isMenuClosing ? styles.closing : ''}`}\r\n            onClick={closeMenu}\r\n        >\r\n            <main className={styles.menuContent} onClick={e => e.stopPropagation()}>\r\n                {currentSectionJSX}\r\n            </main>\r\n            <nav className={styles.menuNavigation}>\r\n                <ul>\r\n                    <li\r\n                        title=\"Inventory\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.INVENTORY)}}\r\n                        className={`${currentSection === SectionID.INVENTORY ? styles.active : ''} ${styles.inventory}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Inventory </span><CgInbox />\r\n                    </li>\r\n                    <li\r\n                        title=\"Status\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.STATS)}}\r\n                        className={`${currentSection === SectionID.STATS ? styles.active : ''} ${styles.stats}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Status </span><BiStats />\r\n                    </li>\r\n                    <li\r\n                        title=\"Shopping\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.SHOPPING)}}\r\n                        className={`${currentSection === SectionID.SHOPPING ? styles.active : ''} ${styles.shopping}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Shopping </span><AiTwotoneShop />\r\n                    </li>\r\n                    <li\r\n                        title=\"Credits\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.CREDITS)}}\r\n                        className={`${currentSection === SectionID.CREDITS ? styles.active : ''} ${styles.credits}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Credits </span><FaHandsHelping />\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    isMenuClosing: isMainMenuClosingSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    closeMenu: () => dispatch(closeMainMenuAction())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainMenu)","C:\\www\\react-fishing-game\\src\\components\\Game\\Barometer\\index.tsx",["338"],"import React, { useMemo } from 'react'\r\nimport TensionGauge from './TensionGauge'\r\nimport { pxToM } from '../../../utils/position'\r\nimport { GameProcess } from '../../../interfaces/game'\r\nimport { FishRodLevel } from '../../../interfaces/evolution'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { processSelector } from '../../../store/selectors/game'\r\n\r\ninterface Props {\r\n    rodLevel: FishRodLevel,\r\n    baitDistance: number,\r\n    // Redux\r\n    gameProcess?: GameProcess\r\n}\r\n\r\ninterface StepMatch {\r\n    steps: number[],\r\n    subSteps: number[]\r\n}\r\n\r\nexport const Barometer: React.FC<Props> = ({\r\n    rodLevel,\r\n    baitDistance,\r\n    // Redux\r\n    gameProcess\r\n}) => {\r\n    const maxLength = useMemo((): number => pxToM(rodLevel.maxLength), [rodLevel])\r\n    const lineStepLength = useMemo((): number => 10, [])\r\n    const lineSteps = useMemo((): number => Math.ceil(maxLength/lineStepLength), [maxLength, lineStepLength])\r\n    const lineStepMatches = useMemo((): StepMatch => {\r\n        let matches = { steps: [], subSteps: [] }\r\n        for(let i = 0; i < (lineSteps+1)*2 - 1; i++) {\r\n            if (i%2 === 0) {\r\n                matches.steps.push(i*lineStepLength/2)\r\n            } else {\r\n                matches.subSteps.push(i*lineStepLength/2)\r\n            }\r\n        }\r\n        return matches\r\n    }, [lineSteps, lineStepLength])\r\n    const nextStep = useMemo((): number => {\r\n        return lineSteps*lineStepLength\r\n    }, [lineSteps, lineStepLength])\r\n    const lineStepsJSX = useMemo(() => {\r\n        let JSX = []\r\n        // How much times step length in maxLength\r\n        for (let i = 0; i <= nextStep; i++) {\r\n            const isReached = baitDistance >= i ? styles.reached : ''\r\n            if (lineStepMatches.steps.includes(i)) {\r\n                // Step\r\n                JSX.push(<div key={i} className={`${styles.step} ${isReached} ${i === 0 ? styles.origin : ''}`}>\r\n                    <span><strong>{i}</strong></span>\r\n                </div>)\r\n            } else if (lineStepMatches.subSteps.includes(i)) {\r\n                // Substep\r\n                JSX.push(<div key={i} className={`${styles.subStep} ${isReached}`}></div>)\r\n            } else continue\r\n        }\r\n        return JSX\r\n    }, [lineSteps, lineStepLength, baitDistance])\r\n    const linePercentage = useMemo((): number => baitDistance/maxLength*100, [baitDistance, maxLength])\r\n\r\n    return <div className={`${styles.barometer} ${rodLevel.className}`}>\r\n        <nav>\r\n            <div className={styles.handle}></div>\r\n            <div className={styles.tip}>\r\n                <div className={styles.lineLengthScale}>\r\n                    <div\r\n                        className={styles.lengthLimit}\r\n                        style={{ width: `${maxLength/nextStep*100}%` }}\r\n                    >\r\n                        <meter\r\n                            className={styles.lineLength}\r\n                            min={0}\r\n                            max={maxLength}\r\n                            value={baitDistance}\r\n                            high={maxLength*3/4}\r\n                            low={maxLength/4}\r\n                            optimum={maxLength}\r\n                        >\r\n                        </meter>\r\n                        <label style={{ width: `${linePercentage}%` }}>\r\n                            <span className={styles.tooltip}>\r\n                                <span><strong>{baitDistance}</strong>m</span>\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n                    {lineStepsJSX}\r\n                </div>\r\n                {gameProcess === GameProcess.BATTLE && (\r\n                    // Line tension gauge\r\n                    <TensionGauge />\r\n                )}\r\n            </div>\r\n        </nav>\r\n    </div>\r\n}\r\n\r\n// Redux connection\r\nconst mapStateToProps = state => ({\r\n    gameProcess: processSelector(state)\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatch => ({})\r\n)(Barometer)","C:\\www\\react-fishing-game\\src\\components\\Game\\AudioPlayer\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\Initial\\index.tsx",["339","340","341","342","343","344","345","346","347"],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\ThrowLine\\index.tsx",["348","349","350","351","352","353","354","355","356","357","358"],"C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\Battle\\index.tsx",["359","360","361","362","363","364","365","366"],"import React, { Dispatch, SetStateAction, useRef, useEffect, useState, useCallback, useMemo } from 'react'\r\nimport { GameProcess, GameProcessComponent } from '../../../../interfaces/game'\r\nimport { FishData, UniqueFish } from '../../../../interfaces/fishes'\r\nimport { FishRodLevel } from '../../../../interfaces/evolution'\r\nimport { Coordinates, Path } from '../../../../interfaces/position'\r\nimport { probability, randomIntFromInterval } from '../../../../utils/math'\r\nimport { setVariableInterval } from '../../../../utils/time'\r\nimport useLazyAudio from '../../../../hooks/useLazyAudio'\r\nimport { BsArrowRepeat } from 'react-icons/bs'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    hookedFishSelector,\r\n    lineTensionSelector,\r\n    isPullingSelector\r\n} from '../../../../store/selectors/fishing'\r\nimport { rodLevelSelector } from '../../../../store/selectors/game'\r\nimport {\r\n    setHookedFishAction,\r\n    setLineTensionAction,\r\n    incrementLineTensionAction,\r\n    decrementLineTensionAction,\r\n    setIsPullingAction,\r\n    catchNewFishAction,\r\n    breakLineAction\r\n} from '../../../../store/actions/fishing'\r\nimport { setGameProcessAction } from '../../../../store/actions/game'\r\n\r\ninterface Props {\r\n    baitDistance: number,\r\n    baitOffset: Coordinates,\r\n    setBaitOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitOffsetLimit: Path,\r\n    lineLength: number,\r\n    scrollToBait: () => void,\r\n    setRodAngle: Dispatch<SetStateAction<number>>,\r\n    // Redux\r\n    hookedFish?: FishData,\r\n    setHookedFish?: Dispatch<SetStateAction<FishData>>,\r\n    lineTension?: number,\r\n    isFishPulling?: boolean,\r\n    setLineTension?: Dispatch<SetStateAction<number>>,\r\n    incrementLineTension?: Dispatch<SetStateAction<number>>,\r\n    decrementLineTension?: Dispatch<SetStateAction<number>>,\r\n    setIsFishPulling?: Dispatch<SetStateAction<boolean>>,\r\n    fishRodLevel?: FishRodLevel,\r\n    setGameProcess?: Dispatch<SetStateAction<GameProcess>>,\r\n    catchNewFish?: Dispatch<SetStateAction<UniqueFish>>,\r\n    loseLineBreak?: () => void,\r\n    loseLineLoose?: () => void\r\n}\r\n\r\n\r\nconst BattleProcess: GameProcessComponent<Props> = ({\r\n    baitDistance,\r\n    baitOffset,\r\n    setBaitOffset,\r\n    baitOffsetLimit,\r\n    lineLength,\r\n    scrollToBait,\r\n    setRodAngle,\r\n    // Redux\r\n    hookedFish,\r\n    setHookedFish,\r\n    lineTension,\r\n    isFishPulling,\r\n    setLineTension,\r\n    incrementLineTension,\r\n    decrementLineTension,\r\n    setIsFishPulling,\r\n    fishRodLevel,\r\n    setGameProcess,\r\n    catchNewFish,\r\n    loseLineBreak,\r\n    loseLineLoose\r\n}) => {\r\n    // Audio\r\n    const reelingSE = useLazyAudio({ src: 'se/reeling.mp3', volume: 1/16, loop: true })\r\n    const lineBreakSE = useLazyAudio({ src: 'se/line-snap.wav', volume: .5 })\r\n\r\n    // State\r\n    const [isPlayerReeling, setIsPlayerReeling] = useState<boolean>(false)\r\n\r\n    /*\r\n        Map state to refs to be able to access current values\r\n        from asynchronous functions\r\n    */\r\n    const lineTensionRef = useRef<number>(lineTension)\r\n    useEffect(() => {\r\n        lineTensionRef.current = lineTension\r\n    }, [lineTension])\r\n    const isFishPullingRef = useRef<boolean>(isFishPulling)\r\n    useEffect(() => {\r\n        isFishPullingRef.current = isFishPulling\r\n    }, [isFishPulling])\r\n    const isPlayerReelingRef = useRef<boolean>(isPlayerReeling)\r\n    useEffect(() => {\r\n        isPlayerReelingRef.current = isPlayerReeling\r\n    }, [isPlayerReeling])\r\n\r\n    // COMPUTED\r\n    // The stronger the fish, the smaller the ratio\r\n    const strengthRatio = useMemo((): number => fishRodLevel.strength / hookedFish.fish.strength, [fishRodLevel, hookedFish])\r\n\r\n    // Slowly recover line tension when player is not reeling in\r\n    const recoverTensionIntervalRef = useRef<number|null>(null)\r\n    let recoverTensionValue = useMemo((): number => {\r\n        // Recover slower when tension is negative\r\n        if (lineTension <= 0) {\r\n            if (strengthRatio >= 1) {\r\n                // Player is stronger than fish\r\n                return strengthRatio  * 3/4\r\n            } else {\r\n                // Fish is stronger than player\r\n                return strengthRatio\r\n            }\r\n        }\r\n        else {\r\n            if (strengthRatio >= 1) {\r\n                // Player is stronger than fish\r\n                return strengthRatio**2\r\n            } else {\r\n                // Fish is stronger than player\r\n                return strengthRatio*2\r\n            }\r\n        }\r\n    }, [lineTension, strengthRatio])\r\n    useEffect(() => {\r\n        const willRecover = () => {\r\n            // Only set interval once\r\n            if (recoverTensionIntervalRef.current !== null) return false\r\n            // Don't get looser than -100\r\n            else if (lineTension <= -100) {\r\n                setLineTension(-100)\r\n                return false\r\n            }\r\n            // Don't recover when player is reeling\r\n            else if (isPlayerReelingRef.current) return false\r\n\r\n            // When fish is pulling\r\n            else if (isFishPullingRef.current) {\r\n                // If fish is stronger\r\n                if (strengthRatio < 1) {\r\n                    // Slow down recovery (will slow down more if fish is a lot stronger)\r\n                    recoverTensionValue *= strengthRatio\r\n                // If fish is weaker or as strong as player\r\n                } else {\r\n                    // Slow down recovery (will slow down more if player is not so much stronger)\r\n                    recoverTensionValue *= (1 - (1/strengthRatio))\r\n                }\r\n                // Tension cannot go straight from positive to negative, has to be 0 first\r\n                if (lineTensionRef.current > 0 && lineTensionRef.current - recoverTensionValue < 0) {\r\n                    recoverTensionValue = lineTensionRef.current\r\n                }\r\n\r\n                return true\r\n            }\r\n            \r\n            else return true \r\n        }\r\n        if (willRecover()) {\r\n            recoverTensionIntervalRef.current = window.setInterval(() => {\r\n                decrementLineTension(recoverTensionValue)\r\n            }, 100)\r\n        } else {\r\n            window.clearInterval(recoverTensionIntervalRef.current)\r\n            recoverTensionIntervalRef.current = null\r\n        }\r\n\r\n        return () => {\r\n            window.clearInterval(recoverTensionIntervalRef.current)\r\n            recoverTensionIntervalRef.current = null\r\n        }\r\n    }, [\r\n        lineTension,\r\n        isPlayerReeling,\r\n        isFishPulling,\r\n        recoverTensionValue,\r\n        strengthRatio\r\n    ])\r\n\r\n    // Reel in line with fish\r\n    const move = useCallback(\r\n        (moveDistance: number) => {\r\n            if (moveDistance > 0) {\r\n                // Get closer to the shore\r\n                // Find out angle\r\n                const angleRadians: number = Math.atan(baitOffset.x/baitOffset.y)\r\n                const angleDegrees: number = angleRadians*180/Math.PI\r\n                // Find out next offset coords from angle and hypotenuse\r\n                const hypotenuse: number = lineLength - (moveDistance/2)\r\n                const opposite: number = Math.sin(angleRadians) * hypotenuse\r\n                const adjacent: number = Math.cos(angleRadians) * hypotenuse\r\n                // Apply translation and lean fishrod towards target\r\n                setBaitOffset({ x: opposite, y: adjacent })\r\n                setRodAngle(-angleDegrees)\r\n                // Scroll to new position\r\n                scrollToBait()\r\n            } else {\r\n                // Go away from the shore\r\n                if (baitOffset.x < baitOffsetLimit.to.y) {\r\n                    setBaitOffset({ ...baitOffset, y: baitOffset.y - (moveDistance/4) })\r\n                    scrollToBait()\r\n                }\r\n            }\r\n        }, [baitOffset, setBaitOffset, lineLength]\r\n    )\r\n\r\n    // Handle reeling and fish pulling interactions\r\n    useEffect(() => {\r\n        // Find out where the bait will move and how it affects line tension\r\n        let intervalID = null\r\n        const step = 10 // move length const in pixels\r\n        const intervalDuration = 100 // move duration const in mls\r\n        let inertia = strengthRatio\r\n        let moveDistance = 0 // Actual distance that the bait will travel; if negative, bait moves away\r\n        let addedTension = 0 // Line tension that will be added during this interval\r\n\r\n        if (isPlayerReelingRef.current) {\r\n            // Player is reeling in\r\n            if (isFishPullingRef.current) {\r\n                // Fish is pulling on line\r\n                moveDistance = step * inertia * (3/4 + (1/4* fishRodLevel.resistance/100))\r\n                addedTension = (1/inertia)**2\r\n            } else {\r\n                // Fish is not pulling on line\r\n                moveDistance = step * inertia \r\n                addedTension = (1/inertia)*2\r\n            }\r\n        } else {\r\n            // Player is not reeling in\r\n            addedTension = 0 // Tension won't increase\r\n            if (isFishPullingRef.current) {\r\n                // Fish is pulling on line\r\n                moveDistance = - Math.abs(\r\n                    step * 1/inertia\r\n                )\r\n            } else {\r\n                // Fish is not pulling\r\n                moveDistance = 0\r\n            }\r\n        }\r\n\r\n        if (!isPlayerReelingRef.current && !isFishPullingRef.current) {\r\n            // Player is not reeling in and fish not pulling on line\r\n            if (intervalID !== null) {\r\n                window.clearInterval(intervalID)\r\n                intervalID = null\r\n            }\r\n        }  else {\r\n            // Apply new distance and tension periodically\r\n            intervalID = window.setInterval(() => {\r\n                if (addedTension > 0) incrementLineTension(addedTension)\r\n                if (moveDistance > 0 || moveDistance < 0) move(moveDistance)\r\n            }, intervalDuration)\r\n        }\r\n\r\n        return () => {\r\n            window.clearInterval(intervalID)\r\n            intervalID = null\r\n        }\r\n    }, [isFishPulling, isPlayerReeling, strengthRatio, fishRodLevel, move])\r\n    // Handle reeling alone\r\n    useEffect(() => {\r\n        // Play reeling sound effect\r\n        if (isPlayerReeling) {\r\n            reelingSE.play()\r\n        } else {\r\n            reelingSE.pause()\r\n        }\r\n    }, [isPlayerReeling])\r\n\r\n    // Success if player managed to reel in the fish to the shore\r\n    useEffect(() => {\r\n        if (baitDistance <= 0.1) {\r\n            catchNewFish(hookedFish.fish)\r\n            goBack()\r\n            setGameProcess(GameProcess.INITIAL)            \r\n        }\r\n    }, [baitDistance])\r\n\r\n    // Fail if line reached point of breaking / was too loose\r\n    useEffect(() => {\r\n        if (lineTension >= 100) {\r\n            // Line broke\r\n            goBack()\r\n            setGameProcess(GameProcess.INITIAL)\r\n            loseLineBreak() \r\n\r\n            // Play sound effect\r\n            try {\r\n                lineBreakSE.play()\r\n            } catch (err) {\r\n                console.log('Failed to play \\'line-snap.mp3\\' sound effect')\r\n            }\r\n        } else if (lineTension <= -100) {\r\n            // Line was too loose\r\n            goBack()\r\n            setGameProcess(GameProcess.INITIAL)\r\n            loseLineLoose()    \r\n        }\r\n    }, [lineTension])\r\n\r\n    // Cancel catching fish\r\n    const goBack = useCallback(\r\n        (): void => {\r\n            setLineTension(0)\r\n            setGameProcess(GameProcess.THROW_LINE)\r\n            setHookedFish(null)\r\n            reelingSE.pause()\r\n        }, []\r\n    )\r\n\r\n    // Decide whether fish is pulling\r\n    useEffect(() => {\r\n        function pullHandler () {\r\n            const willPull = probability(hookedFish.fish.pullChance)\r\n            if (willPull) setIsFishPulling(true)\r\n            else setIsFishPulling(false)\r\n        }\r\n        \r\n        // Repeat pullHandler\r\n        const { roamingInterval } = hookedFish.fish\r\n        if (Array.isArray(roamingInterval)) {\r\n            // Interval duration is variable\r\n            return setVariableInterval(\r\n                pullHandler,\r\n                () => randomIntFromInterval(roamingInterval[0], roamingInterval[1])/2\r\n            )\r\n        } else {\r\n            // Interval duration is constant\r\n            const pullIntervalID = window.setInterval(pullHandler, roamingInterval/2)\r\n            return () => window.clearInterval(pullIntervalID)\r\n        }\r\n    }, [])\r\n\r\n    // Player controls\r\n    // Cancel event\r\n    useEffect(() => {\r\n        function handleBackSpace (e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 8: // Backspace\r\n                case 46: // Delete\r\n                case 48: // 0\r\n                    e.preventDefault()\r\n                    goBack()\r\n                    break\r\n            }\r\n        }\r\n        document.addEventListener('keydown', handleBackSpace, true)\r\n        return () => document.removeEventListener('keydown', handleBackSpace, true)\r\n    }, [goBack])\r\n    // Space/Enter keys\r\n    useEffect(() => {\r\n        function handleSpaceDown (e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    e.preventDefault()\r\n                    if (!isPlayerReelingRef.current) {\r\n                        setIsPlayerReeling(true)\r\n                    }\r\n                    break\r\n            }\r\n        }\r\n        function handleSpaceUp (e: KeyboardEvent): void {\r\n            switch (e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    // Stop reeling\r\n                    if (isPlayerReelingRef.current) {\r\n                        setIsPlayerReeling(false)\r\n                    }\r\n                    break\r\n            }\r\n        } \r\n        \r\n        document.addEventListener('keydown', handleSpaceDown, true)\r\n        document.addEventListener('keyup', handleSpaceUp, false)\r\n        return () => {\r\n            document.removeEventListener('keydown', handleSpaceDown, true)\r\n            document.removeEventListener('keyup', handleSpaceUp, false)\r\n        }\r\n    }, [])\r\n    // Mousedown/up\r\n    useEffect(() => {\r\n        function handleMouseDown (e: MouseEvent): void {\r\n            setIsPlayerReeling(true)\r\n        }\r\n        function handleMouseUp (e: MouseEvent) : void {\r\n            setIsPlayerReeling(false)\r\n        }\r\n        document.body.addEventListener('mousedown', handleMouseDown, false)\r\n        document.body.addEventListener('mouseup', handleMouseUp, false)\r\n        document.body.addEventListener('touchstart', handleMouseDown, false)\r\n        document.body.addEventListener('touchend', handleMouseUp, false)\r\n\r\n        return () => {\r\n            document.body.removeEventListener('mousedown', handleMouseDown, false)\r\n            document.body.removeEventListener('mouseup', handleMouseUp, false)\r\n            document.body.removeEventListener('touchstart', handleMouseDown, false)\r\n            document.body.removeEventListener('touchend', handleMouseUp, false)\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        <button onClick={() => setLineTension(lineTension - 10)} style={{position: 'fixed', top: '3rem', left: '1rem' }}>-</button>\r\n        <button onClick={() => setLineTension(lineTension + 10)} style={{position: 'fixed', top: '3rem', left: '2rem' }}>+</button>\r\n        <nav className={styles.navigation}>\r\n        <button\r\n            className={`btn btn-cancel ${styles.repeatBTN}`}\r\n            onClick={goBack}\r\n        >\r\n            <BsArrowRepeat />\r\n        </button>\r\n    </nav>\r\n    </div>\r\n}\r\nBattleProcess.GameProcess = GameProcess.BATTLE\r\n\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    hookedFish: hookedFishSelector(state),\r\n    lineTension: lineTensionSelector(state),\r\n    isFishPulling: isPullingSelector(state),\r\n    fishRodLevel: rodLevelSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    setHookedFish: (hookedFish: FishData) => dispatch(setHookedFishAction(hookedFish)),\r\n    setLineTension: (newTension: number) => dispatch(setLineTensionAction(newTension)),\r\n    incrementLineTension: (step: number) => dispatch(incrementLineTensionAction(step)),\r\n    decrementLineTension: (step: number) => dispatch(decrementLineTensionAction(step)),\r\n    setIsFishPulling: (isPulling: boolean) => dispatch(setIsPullingAction(isPulling)),\r\n    setGameProcess: (nextProcess: GameProcess) => dispatch(setGameProcessAction(nextProcess)),\r\n    catchNewFish: (fish: UniqueFish) => dispatch(catchNewFishAction(fish)),\r\n    loseLineBreak: () => dispatch(breakLineAction(true)),\r\n    loseLineLoose: () => dispatch(breakLineAction(false))\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(BattleProcess)","C:\\www\\react-fishing-game\\src\\components\\Game\\GameNotification\\index.tsx",["367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383"],"import React, { useMemo, useEffect,useState } from 'react'\r\nimport { GameNotif, GameNotifType } from '../../../interfaces/game'\r\nimport useLazyAudio from '../../../hooks/useLazyAudio'\r\nimport { MdMoodBad, GiTrophyCup, GiTrophy, BsInfoCircleFill, FaPlus } from 'react-icons/all'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { gameNotificationSelector } from '../../../store/selectors/game'\r\nimport { setGameNotificationAction } from '../../../store/actions/game'\r\n\r\ninterface Props {\r\n    // Redux\r\n    gameNotification: GameNotif,\r\n    destroyNotification: () => void\r\n}\r\n\r\nconst GameNotification: React.FC<Props> = ({\r\n    // Redux\r\n    gameNotification,\r\n    destroyNotification\r\n}) => {\r\n    // Props\r\n    const { html, type } = gameNotification\r\n    const { header, body, footer } = html\r\n    const duration = gameNotification.duration || 10\r\n    const transition = gameNotification.transition || 1\r\n\r\n    // State\r\n    const [isClosing, setIsClosing] = useState<boolean>(false)\r\n\r\n    // Audio\r\n    // Decide which SE to load depending on notification type\r\n    const SEPath = useMemo((): string => {\r\n        switch(type) {\r\n            case GameNotifType.INFO:\r\n                return 'infobleep.mp3'\r\n                break\r\n            case GameNotifType.SUCCESS:\r\n                return 'short-success.mp3'\r\n                break\r\n            case GameNotifType.GREAT_SUCCESS:\r\n                return 'long-success.mp3'\r\n                break\r\n            case GameNotifType.ITEM:\r\n                return 'got-item.mp3'\r\n                break\r\n            case GameNotifType.FAIL:\r\n                return 'xylo.mp3'\r\n                break\r\n            default: return ''\r\n        }\r\n    }, [type])\r\n    const soundEffect = useLazyAudio({ src: `se/${SEPath}` }, [SEPath])\r\n    \r\n    // Play audio after mount\r\n    useEffect(() => {\r\n        if (soundEffect) {\r\n            const playPromise = soundEffect.play()\r\n            if (typeof playPromise !== 'undefined') {\r\n                playPromise\r\n                    .then(() => null)\r\n                    .catch(() => console.log(`Failed to play ${SEPath} sound effect`))\r\n            }\r\n        }\r\n    }, [soundEffect])\r\n\r\n    // Destroy notification after duration\r\n    useEffect(() => {\r\n        const transitionEndTimerID = setTimeout(() => setIsClosing(true), duration*1000 - transition*1000)\r\n        const destroyTimerID = setTimeout(destroyNotification, duration*1000)\r\n        return () => {\r\n            window.clearTimeout(transitionEndTimerID)\r\n            window.clearTimeout(destroyTimerID)\r\n        }\r\n    }, [duration])\r\n\r\n    // Style notif depending on type\r\n    const typeClass = useMemo((): string => {\r\n        switch(type) {\r\n            case GameNotifType.INFO:\r\n                return styles.info\r\n                break\r\n            case GameNotifType.SUCCESS:\r\n                return styles.success\r\n                break\r\n            case GameNotifType.GREAT_SUCCESS:\r\n                return styles.greatSuccess\r\n                break\r\n            case GameNotifType.ITEM:\r\n                return styles.item\r\n                break\r\n            case GameNotifType.FAIL:\r\n                return styles.fail\r\n                break\r\n            default: return ''\r\n        }\r\n    }, [type])\r\n\r\n    // Header icon depends on type too\r\n    const typeIcon = useMemo((): any => {\r\n        switch (type) {\r\n            case GameNotifType.FAIL:\r\n                return <MdMoodBad className={styles.notifIcon} />\r\n                break\r\n            case GameNotifType.INFO:\r\n                return <BsInfoCircleFill className={styles.notifIcon} />\r\n                break\r\n            case GameNotifType.SUCCESS:\r\n                return <GiTrophy className={styles.notifIcon} />\r\n                break\r\n            case GameNotifType.GREAT_SUCCESS:\r\n                return <GiTrophyCup className={styles.notifIcon} />\r\n                break\r\n            case GameNotifType.ITEM:\r\n                return <FaPlus className={styles.notifIcon} />\r\n                break\r\n            default: return null\r\n        }\r\n    }, [type])\r\n\r\n    return <div\r\n        className={`\r\n            ${styles.gameNotif} \r\n            ${isClosing ? styles.closing : ''}\r\n            ${typeClass}\r\n        `}\r\n        style={{ transitionDuration: transition + 's' }}\r\n    >\r\n        {header && (\r\n            <header\r\n                className={styles.notifHeader}\r\n                style={{ animationDuration: transition + 's' }}\r\n            >\r\n                <div\r\n                    className={styles.headerContent}\r\n                    dangerouslySetInnerHTML={{ __html: header }}\r\n                >\r\n                </div>\r\n                {typeIcon}\r\n            </header>\r\n        )}\r\n        {body && (\r\n            <main\r\n                className={styles.notifBody}\r\n                dangerouslySetInnerHTML={{ __html: body }}\r\n                style={{\r\n                    // Slide left then fade in\r\n                    animationDelay: transition + 's, ' + transition*2 + 's',\r\n                    animationDuration: transition + 's, ' + transition + 's',\r\n                    borderRadius: footer ? '0' : '0 0 5px 5px',\r\n                    transition: transition + 's'\r\n                }}\r\n            ></main>\r\n        )}\r\n        {footer && (\r\n            <footer\r\n                className={styles.notifFooter}\r\n                dangerouslySetInnerHTML={{ __html: footer }}\r\n                style={{\r\n                    // Slide left then fade in\r\n                    animationDelay: transition + 's, ' + transition*2 + 's',\r\n                    animationDuration: transition + 's, ' + transition + 's',\r\n                    borderRadius: '0 0 5px 5px',\r\n                    transition: transition + 's'\r\n                }}\r\n            ></footer>\r\n        )}\r\n    </div>\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    gameNotification: gameNotificationSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    destroyNotification: () => dispatch(setGameNotificationAction(null))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GameNotification)","C:\\www\\react-fishing-game\\src\\components\\Game\\processes\\WaitFish\\index.tsx",["384","385","386","387"],"C:\\www\\react-fishing-game\\src\\store\\reducers\\position.ts",["388","389"],"import { Map, Coordinates } from '../../interfaces/position'\r\nimport { UPDATE_POSITION } from '../actions/types'\r\n\r\nexport interface State {\r\n    map: Map,\r\n    baitLakeCoords: Coordinates // Read-only computed property in Game/index.tsx\r\n}\r\n\r\nconst initialMap: Map = {\r\n    width: 4200,\r\n    height: 3200,\r\n    shorePath: { from: { x: 0, y: 0 }, to: { x: 4200, y: 200 }},\r\n    lakePath: { from: { x: 0, y: 0 }, to: { x: 4200, y: 3000 }}\r\n}\r\n\r\n\r\nconst initialState = {\r\n    map: initialMap,\r\n    baitLakeCoords: { x: 0, y: 0 }\r\n}\r\n\r\nexport default function (state = initialState, action: any): State {\r\n    switch(action.type) {\r\n        case UPDATE_POSITION:\r\n            return ({\r\n                ...state,\r\n                ...action.payload\r\n            })\r\n            break\r\n        default: return state\r\n    }\r\n}","C:\\www\\react-fishing-game\\src\\store\\reducers\\game.ts",["390","391","392","393","394","395","396","397","398"],"import {\r\n    SET_GAME_PROCESS,\r\n    SPEND_ONE_MINUTE,\r\n    ENABLE_BGM,\r\n    OPEN_MAIN_MENU,\r\n    SET_IS_MAIN_MENU_CLOSING,\r\n    SET_FISHROD_LEVEL,\r\n    EARN_MONEY,\r\n    SPEND_MONEY,\r\n    GAME_NOTIFICATION,\r\n    COMPLETED_TUTORIAL_ENTRY\r\n} from '../actions/types'\r\nimport { GameProcess } from '../../interfaces/game'\r\nimport { GameStats } from '../../interfaces/evolution'\r\nimport { GameNotif, Tutorial, TutorialEntry } from '../../interfaces/game'\r\nimport { rodLevels } from '../../components/Game/evolution'\r\n\r\nexport interface State {\r\n    process: GameProcess,\r\n    isMainMenuOpen: boolean,\r\n    isMainMenuClosing: boolean,\r\n    isBGMEnabled: boolean,\r\n    gameStats: GameStats,\r\n    gameNotification: GameNotif|null,\r\n    tutorial: Tutorial\r\n}\r\n\r\nconst initialGameStats: GameStats = {\r\n    gameTimeSpent: 0,\r\n    doubloons: 50,\r\n    fishrodLevel: rodLevels.find(lvl => lvl._id === 'Starter')\r\n}\r\n\r\nlet initialTutorial: any\r\ntry {\r\n    initialTutorial = JSON.parse(localStorage['tutorial'])\r\n} catch (err) {\r\n    initialTutorial = {}\r\n    Object.values(TutorialEntry).forEach((entry: string) => initialTutorial[entry] = false)\r\n}\r\n\r\nconst initialState: State = {\r\n    process: GameProcess.INITIAL,\r\n    isMainMenuOpen: false,\r\n    isMainMenuClosing: false,\r\n    isBGMEnabled: typeof localStorage['bgm_enabled'] !== 'undefined' ? JSON.parse(localStorage['bgm_enabled']) : true,\r\n    gameStats: localStorage['gameStats'] ? JSON.parse(localStorage['gameStats']) : initialGameStats,\r\n    gameNotification: null,\r\n    tutorial: initialTutorial\r\n}\r\n\r\nexport default function (state: State = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_GAME_PROCESS:\r\n            return { ...state, process: action.payload }\r\n            break\r\n        case SPEND_ONE_MINUTE: {\r\n            const newTime = state.gameStats.gameTimeSpent + 1\r\n            const newStats = { ...state.gameStats, gameTimeSpent: newTime }\r\n            \r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        } case OPEN_MAIN_MENU:\r\n            return { ...state, isMainMenuOpen: action.payload }\r\n            break\r\n        case SET_IS_MAIN_MENU_CLOSING:\r\n            return { ...state, isMainMenuClosing: action.payload }\r\n            break\r\n        case SET_FISHROD_LEVEL: {\r\n            const newGameStats = {\r\n                ...state.gameStats,\r\n                fishrodLevel: rodLevels.find(lvl => lvl._id === action.payload)\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newGameStats)\r\n            return {\r\n                ...state,\r\n                gameStats: newGameStats\r\n            }\r\n        }\r\n        case EARN_MONEY: {\r\n            const maxDoubloons = 999999\r\n            const myDoubloons = state.gameStats.doubloons\r\n            const canEarnMore = myDoubloons + action.payload < maxDoubloons\r\n            let nextDoubloons = myDoubloons\r\n            if (!canEarnMore) nextDoubloons = maxDoubloons\r\n            else nextDoubloons = myDoubloons + action.payload\r\n\r\n            // Save game stats\r\n            const newStats = {\r\n                ...state.gameStats,\r\n                doubloons: nextDoubloons\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        }\r\n        case SPEND_MONEY: {\r\n            const minDoubloons = 0\r\n            const myDoubloons = state.gameStats.doubloons\r\n            const canSpendMore = myDoubloons - action.payload > minDoubloons\r\n            let nextDoubloons = myDoubloons\r\n            if (!canSpendMore) nextDoubloons = minDoubloons\r\n            else nextDoubloons = myDoubloons - action.payload\r\n\r\n            // Save game stats\r\n            const newStats = {\r\n                ...state.gameStats,\r\n                doubloons: nextDoubloons\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        }\r\n        case ENABLE_BGM:\r\n            localStorage['bgm_enabled'] = JSON.stringify(action.payload)\r\n            return {\r\n                ...state,\r\n                isBGMEnabled: action.payload\r\n            }\r\n            break\r\n        case GAME_NOTIFICATION:\r\n            return { ...state, gameNotification: action.payload }\r\n            break\r\n        case COMPLETED_TUTORIAL_ENTRY:\r\n            const completedEntry: TutorialEntry = action.payload\r\n            const tutorial: Tutorial = { \r\n                ...state.tutorial, \r\n                [completedEntry]: true\r\n            }\r\n\r\n            localStorage['tutorial'] = JSON.stringify(tutorial)\r\n            return { ...state, tutorial }\r\n        default: return state\r\n    }\r\n}","C:\\www\\react-fishing-game\\src\\store\\reducers\\inventory.ts",["399","400","401","402","403"],"import {\r\n    ADD_INVENTORY_ENTRY,\r\n    REMOVE_INVENTORY_ENTRY\r\n} from '../actions/types'\r\nimport { Item, InventoryEntry } from '../../interfaces/items'\r\nimport allItems from '../../components/items/items.json'\r\n\r\ninterface State {\r\n    entries: InventoryEntry[],\r\n    maxEntries: number\r\n}\r\n\r\nconst initialEntries: InventoryEntry[] = [\r\n    {\r\n        item: allItems['Starter'],\r\n        amount: 1\r\n    },/*\r\n    {\r\n        item: allItems['Beginner'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Intermediate'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Advanced'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Expert'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Sea king'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Abyssal'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Legendary'],\r\n        amount: 1\r\n    },*/\r\n    {\r\n        item: allItems['Mushroom'],\r\n        amount: 3\r\n    },\r\n    {\r\n        item: allItems['Fly'],\r\n        amount: 1\r\n    }/*,\r\n    {\r\n        item: allItems['Angelfish'],\r\n        amount: 1\r\n    }*/\r\n]\r\n\r\nconst initialState = localStorage['inventory'] ?\r\n    JSON.parse(localStorage['inventory']) \r\n    : ({\r\n        entries: initialEntries,\r\n        maxEntries: 20\r\n    })\r\n\r\nexport default function (state: State = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_INVENTORY_ENTRY: {\r\n            let newState = state\r\n            // Check if item is already in inventory\r\n            const itemInInventory = state.entries.find(entry => entry.item._id === action.payload.itemID)\r\n\r\n            if (itemInInventory) {\r\n                // Add amount only\r\n                let newAmount = itemInInventory.amount + action.payload.amount\r\n                if (newAmount > 99) newAmount = 99 // Limit max amount to 99\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.map(entry => {\r\n                        if (entry.item._id === action.payload.itemID) {\r\n                            return { ... entry, amount: newAmount }\r\n                        }\r\n                        return entry\r\n                    })\r\n                }\r\n            } else {\r\n                // Add new entry to inventory\r\n                if (state.entries.length < state.maxEntries) {\r\n                    // Find item data\r\n                    const item = allItems[action.payload.itemID]\r\n                    if (!item) {\r\n                        // This item does not exist !\r\n                        return state\r\n                    } else {\r\n                        newState = {\r\n                            ...state,\r\n                            entries: [...state.entries, { item, amount: action.payload.amount }]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Error: your inventory is full\r\n                    return state\r\n                }\r\n            }\r\n\r\n            localStorage['inventory'] = JSON.stringify(newState)\r\n            return newState\r\n            break\r\n        }\r\n        case REMOVE_INVENTORY_ENTRY: {\r\n            let newState = state\r\n            // Check if item is already in inventory\r\n            const itemInInventory = state.entries.find(entry => entry.item._id === action.payload.itemID)\r\n            if (!itemInInventory) return state\r\n\r\n            // Check if new amount is a positive integer\r\n            let newAmount = itemInInventory.amount - action.payload.amount\r\n\r\n            if (newAmount <= 0) {\r\n                // Remove entry from inventory\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.filter(entry => entry.item._id !== action.payload.itemID)\r\n                }\r\n            } else {\r\n                // Keep entry and replace amount\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.map(entry => {\r\n                        if (entry.item._id === action.payload.itemID) {\r\n                            return { ...entry, amount: newAmount }\r\n                        }\r\n                        return entry\r\n                    })\r\n                }\r\n            }\r\n\r\n            localStorage['inventory'] = JSON.stringify(newState)\r\n            return newState\r\n            break\r\n        }\r\n        default: return state\r\n    }\r\n}","C:\\www\\react-fishing-game\\src\\store\\reducers\\fishing.ts",["404","405","406","407","408","409","410","411"],"import {\r\n    MAKE_BAIT_AVAILABLE,\r\n    PUT_ON_BAIT_ITEM,\r\n    BAIT_FALL_IN_WATER,\r\n    SET_HOOKED_FISH,\r\n    SET_LINE_TENSION,\r\n    INCREMENT_LINE_TENSION,\r\n    DECREMENT_LINE_TENSION,\r\n    SET_IS_PULLING\r\n} from '../actions/types'\r\nimport { FishData } from '../../interfaces/fishes'\r\nimport { Item } from '../../interfaces/items'\r\nimport allItems from '../../components/items/items.json'\r\n\r\nexport interface State {\r\n    isBaitAvailable: boolean,\r\n    baitFood: Item,\r\n    hasBaitJustFallen: boolean, // Use this as an event for fishes to detect when and bait falls, go away and set back to false if it falls at their position\r\n    hookedFish: FishData, // Data of the fish that has taken the bait\r\n    lineTension: number, // Min: -100; max: 100,\r\n    isPulling: boolean // Whether fish is pulling on the line\r\n}\r\n\r\nconst initialState: State = {\r\n    isBaitAvailable: false,\r\n    baitFood: localStorage['baitFood'] ? JSON.parse(localStorage['baitFood']) : allItems['Fly'],\r\n    hasBaitJustFallen: false,\r\n    hookedFish: null,\r\n    lineTension: 0,\r\n    isPulling: false\r\n}\r\n\r\nexport default function(state: State = initialState, action): State {\r\n    switch(action.type) {\r\n        case MAKE_BAIT_AVAILABLE:\r\n            return { ...state, isBaitAvailable: action.payload }\r\n            break\r\n        case PUT_ON_BAIT_ITEM:\r\n            localStorage['baitFood'] = JSON.stringify(action.payload)\r\n            return { ...state, baitFood: action.payload }\r\n            break\r\n        case BAIT_FALL_IN_WATER:\r\n            return { ...state, hasBaitJustFallen: action.payload }\r\n            break\r\n        case SET_HOOKED_FISH:\r\n            return { ...state, hookedFish: action.payload }\r\n            break\r\n        case SET_LINE_TENSION:\r\n            return { ...state, lineTension: action.payload }\r\n            break\r\n        case INCREMENT_LINE_TENSION:\r\n            return { ...state, lineTension: state.lineTension + action.payload }\r\n            break\r\n        case DECREMENT_LINE_TENSION:\r\n            return { ...state, lineTension: state.lineTension - action.payload }\r\n        case SET_IS_PULLING:\r\n            return { ...state, isPulling: action.payload }\r\n            break\r\n        default: return state\r\n    }\r\n}","C:\\www\\react-fishing-game\\src\\utils\\throttle.ts",[],"C:\\www\\react-fishing-game\\src\\store\\actions\\fishing.ts",[],"C:\\www\\react-fishing-game\\src\\store\\selectors\\position.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\evolution\\index.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\animations\\index.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\index.tsx",["412","413","414","415","416"],"import React, { ReactNode, useState, useMemo, useEffect, useRef } from 'react'\r\nimport Buy from './Buy'\r\nimport Sell from './Sell'\r\nimport { randomIntFromInterval } from '../../../../utils/math'\r\nimport { GiPirateCaptain } from 'react-icons/all'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { useSelector } from 'react-redux'\r\nimport { inventoryLengthSelector } from '../../../../store/selectors/inventory'\r\n\r\nexport enum ContentID {\r\n    ROOT = 'ROOT',\r\n    BUY = 'BUY',\r\n    SELL = 'SELL'\r\n}\r\n\r\n// Seller comments\r\nexport const greetings: string[] = [\r\n    'Ahoy, Matey ! What brings you here ?',\r\n    'The better your fish rod, the bigger fishes you\\'ll catch ! How convenient that I\\'m selling some',\r\n    'Do you have some fish for me ?'\r\n]\r\nexport const thanks: string[] = [\r\n    'Thank ya !',\r\n    'It\\'s a pleasure doing business with ye',\r\n    'Don\\'t ya lose it, mate !'\r\n]\r\nexport const randomGreeting = (): string => greetings[randomIntFromInterval(0, greetings.length - 1)]\r\nexport const randomThanks = (): string => thanks[randomIntFromInterval(0, thanks.length - 1)]\r\n\r\n\r\nconst Shop: React.FC = () => {\r\n    // REDUX\r\n    const inventoryLength = useSelector(inventoryLengthSelector)\r\n\r\n    // STATE\r\n    const [currentContentID, setCurrentContentID] = useState<ContentID>(ContentID.ROOT)\r\n\r\n    // Seller comments\r\n    const [sellerPhrase, setSellerPhrase] = useState<string>(randomGreeting())\r\n    const [sellerPhraseSpelled, setSellerPhraseSpelled] = useState<string>('')\r\n    const sellerPhraseSpelledJSX = useMemo((): ReactNode[] => {\r\n        return sellerPhraseSpelled.split('').map((letter: string, index: number) => (\r\n            <span\r\n                key={index}\r\n                className={styles.letter}\r\n                style={{ filter: index >= sellerPhraseSpelled.length - 5 ? `hue-rotate(${index*360/sellerPhrase.length}deg)` : 'hue-rotate(0)' }}\r\n            >{letter}</span>\r\n        ))\r\n    }, [sellerPhraseSpelled])\r\n    // Spell seller's text letter by letter\r\n    const spellingIntervalID = useRef<number>(null)\r\n    const lastSellerPhraseRef = useRef<string>(null)\r\n    useEffect(() => {\r\n        // Restart process if seller's dialog changes\r\n        if (\r\n            lastSellerPhraseRef && lastSellerPhraseRef.current &&\r\n            spellingIntervalID && spellingIntervalID.current &&\r\n            sellerPhrase != lastSellerPhraseRef.current\r\n        ) {\r\n            setSellerPhraseSpelled('')\r\n            window.clearInterval(spellingIntervalID.current)\r\n        }\r\n\r\n        spellingIntervalID.current = window.setInterval(() => {            \r\n            if (sellerPhraseSpelled.length < sellerPhrase.length) {\r\n                setSellerPhraseSpelled(sellerPhraseSpelled + sellerPhrase[sellerPhraseSpelled.length])\r\n            } else {\r\n                window.clearInterval(spellingIntervalID.current)\r\n            }\r\n        }, 20)\r\n        lastSellerPhraseRef.current = sellerPhrase\r\n        \r\n        return () => {\r\n            window.clearInterval(spellingIntervalID.current)\r\n        }\r\n    }, [sellerPhrase, sellerPhraseSpelled])\r\n\r\n    const currentContentJSX = useMemo((): ReactNode => {\r\n        switch(currentContentID) {\r\n            case ContentID.ROOT:\r\n                return <div className={styles.root}>\r\n                    <ul>\r\n                        <li>\r\n                            <button onClick={() => setCurrentContentID(ContentID.BUY)} className={`btn btn-primary`}>\r\n                                I want to buy\r\n                            </button>\r\n                        </li>\r\n                        {inventoryLength > 0 && (\r\n                            <li>\r\n                                <button onClick={() => setCurrentContentID(ContentID.SELL)} className={`btn btn-primary`}>\r\n                                    I have stuff for you\r\n                                </button>\r\n                            </li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n                break\r\n            case ContentID.BUY:\r\n                return <Buy\r\n                    setSellerPhrase={setSellerPhrase}\r\n                    setCurrentContentID={setCurrentContentID}\r\n                 />\r\n                break\r\n            case ContentID.SELL:\r\n                return <Sell\r\n                    setSellerPhrase={setSellerPhrase}\r\n                    setCurrentContentID={setCurrentContentID}\r\n                 />\r\n                break\r\n            default: return null\r\n        }\r\n    }, [currentContentID, inventoryLength])\r\n \r\n    return <div className={styles.shop}>\r\n        <main className={styles.mainContent}>\r\n            {currentContentJSX}\r\n        </main>\r\n        <section className={styles.seller}>\r\n            <figure className={styles.sellerFigure}>\r\n                <GiPirateCaptain />\r\n                <figcaption>Captain Joe</figcaption>\r\n            </figure>\r\n            <p className={styles.sellerPhrase}>{sellerPhraseSpelledJSX}</p>\r\n        </section>\r\n    </div>\r\n}\r\n\r\nexport default Shop","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Status\\index.tsx",["417","418","419","420","421"],"import React, { ReactElement, Dispatch, SetStateAction, useMemo, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { minsToHrsMins } from '../../../../utils/time'\r\nimport allCategories from '../../../items/categories.json'\r\nimport { SectionID } from '../index'\r\nimport { GameStats } from '../../../../interfaces/evolution'\r\nimport { Item, ItemCategory } from '../../../../interfaces/items'\r\nimport styles from './index.module.sass'\r\nimport { BiStats, BiCoin, GiFishingPole, GiFishing } from 'react-icons/all'\r\n// Redux\r\nimport { gameStatsSelector } from '../../../../store/selectors/game'\r\nimport { baitFoodSelector } from '../../../../store/selectors/fishing'\r\nimport { removeBaitItemAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    setCurrentSection: Dispatch<SetStateAction<SectionID>>,\r\n    // Redux\r\n    gameStats?: GameStats,\r\n    baitFood?: Item,\r\n    removeBait: any\r\n}\r\n\r\nenum StatusSectionID {\r\n    GENERAL = 'GENERAL',\r\n    GEAR = 'GEAR'\r\n}\r\n\r\nconst Status: React.FC<Props> = ({\r\n    setCurrentSection,\r\n    gameStats,\r\n    baitFood,\r\n    removeBait\r\n}) => {\r\n    const { gameTimeSpent, fishrodLevel, doubloons } = gameStats\r\n    const gameTimeSpentFormatted = useMemo((): string => minsToHrsMins(gameTimeSpent), [gameTimeSpent])\r\n    const [currentStatusSectionID, setCurrentStatusSectionID] = useState<StatusSectionID>(StatusSectionID.GENERAL)\r\n\r\n    // The category of item which current bait belongs to\r\n    const baitCategory = useMemo((): ItemCategory => {\r\n        if (baitFood) return allCategories[baitFood['category']]\r\n        else return null\r\n    }, [baitFood, allCategories])\r\n\r\n    // The color used on the bait icon which depends on its item category\r\n    const baitColor = useMemo((): string => {\r\n        if (!baitCategory) return ''\r\n\r\n        return baitCategory.colors[0]\r\n    }, [baitCategory])\r\n\r\n    const currentStatusSection = useMemo((): ReactElement => {\r\n        switch (currentStatusSectionID) {\r\n            case StatusSectionID.GENERAL:\r\n                return <section className={styles.general}>\r\n                    <h3>General</h3>\r\n                    <ul className={styles.gameStats}>\r\n                        <li>\r\n                            Doubloons:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong>{doubloons}</strong>&nbsp;\r\n                                <BiCoin color=\"var(--yellow)\" style={{ verticalAlign: 'middle' }} />\r\n                            </span>\r\n                        </li>\r\n                        <li>Game time:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong className={styles.time}>{gameTimeSpentFormatted}</strong>\r\n                            </span>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                break\r\n            case StatusSectionID.GEAR:\r\n                return <section className={styles.general}>\r\n                    <h3>Gear</h3>\r\n                    <ul className={styles.gear}>\r\n                        <li>Fishrod:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong>{fishrodLevel._id}</strong>\r\n                            </span>\r\n                        </li>\r\n                        <li>Bait:&nbsp;\r\n                            {baitFood ? (\r\n                                <span className={styles.data}>\r\n                                    <span style={{ color: baitColor }} dangerouslySetInnerHTML={{ __html: baitFood.image }}></span>&nbsp;\r\n                                    <strong>{baitFood._id}</strong>&nbsp;\r\n                                    <button\r\n                                        className={`btn btn-cancel ${styles.btn}`}\r\n                                        onClick={removeBait}\r\n                                    >Remove</button>\r\n                                </span>\r\n                            ) : (\r\n                                <span className={styles.data}>\r\n                                    <strong>None</strong>&nbsp;\r\n                                    <button\r\n                                        className={`btn btn-primary ${styles.btn}`}\r\n                                        onClick={() => setCurrentSection(SectionID.INVENTORY)}\r\n                                    >\r\n                                        Add from inventory\r\n                                    </button>\r\n                                </span>\r\n                            )}\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                break\r\n        }\r\n    }, [\r\n        currentStatusSectionID,\r\n        fishrodLevel,\r\n        baitFood,\r\n        baitColor,\r\n        removeBait,\r\n        doubloons,\r\n        gameTimeSpentFormatted\r\n    ])\r\n\r\n    return <article className={styles.status}>\r\n        <nav className={styles.statusSectionNav}>\r\n            <ul>\r\n                <li\r\n                    className={currentStatusSectionID === StatusSectionID.GENERAL ? styles.active : ''}\r\n                    onClick={() => setCurrentStatusSectionID(StatusSectionID.GENERAL)}\r\n                >\r\n                    <BiStats />\r\n                </li>\r\n                <li\r\n                    className={currentStatusSectionID === StatusSectionID.GEAR ? styles.active : ''}\r\n                    onClick={() => setCurrentStatusSectionID(StatusSectionID.GEAR)}\r\n                >\r\n                    <GiFishingPole />\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n        {currentStatusSection}\r\n    </article>\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    gameStats: gameStatsSelector(state),\r\n    baitFood: baitFoodSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeBait: () => dispatch(removeBaitItemAction())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Status)","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Credits\\index.tsx",["422","423","424","425"],"import React from 'react'\r\nimport styles from './index.module.sass'\r\n\r\nconst Credits = () => <div className={styles.credits}>\r\n    <main>\r\n        <h3>Credits</h3>\r\n        <div style={{ fontSize: '.75em', textAlign: 'center', margin: '2em', lineHeight: '200%' }}>\r\n            <em>\"Go fishing\"</em>,&nbsp;\r\n            fishing simulator game developed and maintained by&nbsp;\r\n            <address>\r\n                <a\r\n                    href=\"https://www.linkedin.com/in/b748b01b7/\"\r\n                    target=\"_blank\"\r\n                    title=\"See developer's profile on linkedin\"\r\n                    rel=\"author\"\r\n                >dev.js.theo@gmail.com</a>\r\n            </address>\r\n        </div>\r\n        <section className={styles.audioSection}>\r\n            <h4>Audio</h4>\r\n            <ul className={styles.creditList}>\r\n                <li>\r\n                    <h5>\r\n                        Music theme composed by &nbsp;\r\n                        <address>\r\n                            <a\r\n                                href=\"https://soundcloud.com/coma8\"\r\n                                target=\"_blank\"\r\n                                title=\"See profile on soundcloud\"\r\n                                rel=\"author\"\r\n                            >coma8</a>\r\n                        </address>\r\n                    </h5>\r\n                </li>\r\n                <li>\r\n                    <h5>\r\n                        \"Coins Purchase 01\"&nbsp;\r\n                        <address>\r\n                            by&nbsp;\r\n                            <a\r\n                                href=\"https://freesound.org/people/rhodesmas/sounds/321263/\"\r\n                                title=\"Rhodesmas' work\"\r\n                                target=\"_blank\"\r\n                                rel=\"author\"\r\n                            >rhodesmas</a>\r\n                        </address>\r\n                    </h5>\r\n                    <p>Modified from .wav to .mp3</p>\r\n                </li>\r\n                <li>\r\n                    <h5>\r\n                        \"snapping-chain\"&nbsp;\r\n                        <address>\r\n                            by&nbsp;\r\n                            <a\r\n                                href=\"https://www.youtube.com/cosmicembers\"\r\n                                title=\"Cosmic embers' YouTube channel\"\r\n                                target=\"_blank\"\r\n                                rel=\"author\"\r\n                            >Cosmic Embers</a>\r\n                        </address>\r\n                    </h5>\r\n                    <p>Renamed to <em>line-snap.mp3</em></p>\r\n                </li>\r\n            </ul>\r\n        </section>\r\n    </main>\r\n</div>\r\n\r\nexport default Credits","C:\\www\\react-fishing-game\\src\\components\\Game\\Barometer\\TensionGauge\\index.tsx",["426"],"import React, { CSSProperties, useMemo, useState } from 'react'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { lineTensionSelector } from '../../../../store/selectors/fishing'\r\n\r\ninterface Props {\r\n    // Redux\r\n    lineTension: number\r\n}\r\n\r\nconst TensionGauge: React.FC<Props> = ({ lineTension }) => {\r\n\r\n    const lowTensionStyle = useMemo((): CSSProperties => {\r\n        if (lineTension >= 0) return { visibility: 'hidden' }\r\n        return {\r\n            clipPath: `polygon(${100 + lineTension}% 0, 100% 0, 100% 100%, ${100 + lineTension}% 100%)`\r\n        }\r\n    }, [lineTension])\r\n\r\n    const highTensionStyle = useMemo((): CSSProperties => {\r\n        if (lineTension <= 0) return { visibility: 'hidden' }\r\n        return {\r\n            clipPath: `polygon(0 0, ${lineTension}% 0, ${lineTension}% 100%, 0 100%)`\r\n        }\r\n    }, [lineTension])\r\n    \r\n    return <div className={styles.resistanceGauge}>\r\n        <meter\r\n            className={styles.lineTension}\r\n            min={-100}\r\n            max={100}\r\n            value={lineTension}\r\n            high={50}\r\n            low={-50}\r\n            optimum={0}\r\n        >\r\n        </meter>\r\n        <label\r\n            className={`${styles.lowTension} ${lineTension <= -75 ? styles.danger : ''}`}\r\n            style={{\r\n                ...lowTensionStyle,\r\n                animationDuration: lineTension <= -90 ? '.3s' : '.5s'\r\n            }}\r\n        ></label>\r\n        <label\r\n            className={`${styles.highTension} ${lineTension >= 75 ? styles.danger : ''}`}\r\n            style={{\r\n                ...highTensionStyle,\r\n                animationDuration: lineTension >= 90 ? '.3s' : '.5s'\r\n            }}\r\n        ></label>\r\n    </div>\r\n}\r\n\r\n// Redux connection\r\nconst mapStateToProps = state => ({\r\n    lineTension: lineTensionSelector(state)\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatch => ({})\r\n)(TensionGauge)","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Beginner\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Advanced\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Expert\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\ProgressCircle\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Starter\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\King\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Intermediate\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\Abyss\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Inventory\\index.tsx",["427","428","429","430","431","432","433","434","435","436","437","438","439"],"import React, { Dispatch, SetStateAction, ReactNode, Fragment, useMemo, useState, useCallback, useRef } from 'react'\r\nimport { InventoryEntry, ItemCategory, Item } from '../../../../interfaces/items'\r\nimport Modal from '../../../misc/Modal'\r\nimport categories from '../../../items/categories.json'\r\nimport { rodLevels } from '../../evolution'\r\nimport { pxToM } from '../../../../utils/position'\r\nimport { SectionID } from '../index'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport { baitFoodSelector } from '../../../../store/selectors/fishing'\r\nimport { rodLevelSelector } from '../../../../store/selectors/game'\r\nimport { inventoryEntriesSelector, maxEntriesSelector, isPlayerOutOfBaitsSelector } from '../../../../store/selectors/inventory'\r\nimport { deleteItemAction, removeInventoryEntryAction, equipItemAction } from '../../../../store/actions/inventory'\r\nimport { putOnBaitItemAction, removeBaitItemAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    setCurrentSection: Dispatch<SetStateAction<SectionID>>,\r\n    // Redux\r\n    isPlayerOutOfBaits: boolean,\r\n    entries: InventoryEntry[],\r\n    maxEntries: number\r\n}\r\n\r\ninterface EntryProps {\r\n    entry: InventoryEntry,\r\n    handleSelect: () => void,\r\n    isSelected: boolean\r\n}\r\n\r\ninterface DetailsProps {\r\n    entry: InventoryEntry,\r\n    setCurrentEntryNum: Dispatch<SetStateAction<number|ReactNode>>\r\n}\r\n\r\nexport const Entry: React.FC<EntryProps> = ({ entry, handleSelect, isSelected }) => {\r\n    const { amount, item } = entry\r\n    const { _id, category, image } = item\r\n    const itemCategory = useMemo((): ItemCategory => categories[category], [category])\r\n    const { colors } = itemCategory\r\n\r\n    // Redux\r\n    const rodLevel = useSelector(rodLevelSelector)\r\n    const baitFood = useSelector(baitFoodSelector)\r\n\r\n    // Computed\r\n    const isEquipment = useMemo((): boolean => !!category.match(/Fishing pole/), [category])\r\n    const isEquipped = useMemo((): boolean => {\r\n        if (!isEquipment) return false\r\n        switch (category) {\r\n            case 'Fishing pole':\r\n                return rodLevel._id === _id\r\n                break\r\n            default: return false\r\n        }\r\n    }, [rodLevel, category, _id])\r\n\r\n    const isAlpha = useMemo((): boolean => _id.startsWith('Alpha '), [_id])\r\n\r\n    return <li\r\n        className={`${styles.entry} ${isSelected ? styles.selected : ''}`}\r\n        onClick={handleSelect}\r\n    >\r\n        <figure\r\n            className={styles.image}\r\n            dangerouslySetInnerHTML={{ __html: image }}\r\n            style={{ color: colors[1] }}\r\n        >\r\n        </figure>\r\n        <span className={styles.amount}>&times;<strong>{amount}</strong></span>\r\n        {(isEquipped || (baitFood && _id === baitFood._id)) && <span className={styles.equipped}>E</span>}\r\n        {isAlpha && <span className={styles.alpha}>A</span>}\r\n    </li>\r\n}\r\n\r\nexport const Details: React.FC<DetailsProps> = ({ entry, setCurrentEntryNum }) => {\r\n    const { item, amount } = entry\r\n    const { _id, plural, description, category, isDisposable } = item\r\n    const itemCategory = useMemo((): ItemCategory => categories[category], [category])\r\n\r\n    const [modal, setModal] = useState<ReactNode>(null)\r\n    const modalRef = useRef<any>(null)\r\n    const [dropAmount, setDropAmount] = useState<number>(1)\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const removeItem = useCallback((itemID: string, amount: number): void => dispatch(removeInventoryEntryAction(itemID, amount)), [])\r\n    const deleteEntry = useCallback((itemID: string): void => dispatch(deleteItemAction(itemID)), [])\r\n    const putOnBait = useCallback((item: Item): void => dispatch(putOnBaitItemAction(item)), [])\r\n    const removeBait = useCallback((): void => dispatch(removeBaitItemAction()), [])\r\n    const equipItem = useCallback((itemID): void => dispatch(equipItemAction(itemID)), [])\r\n    const baitFood = useSelector(baitFoodSelector)\r\n    const rodLevel = useSelector(rodLevelSelector)\r\n\r\n    const isEquipment = useMemo((): boolean => !!category.match(/Fishing pole/), [category])\r\n    const isEquipped = useMemo((): boolean => {\r\n        if (!isEquipment) return false\r\n        switch (category) {\r\n            case 'Fishing pole':\r\n                return rodLevel._id === _id\r\n                break\r\n            default: return false\r\n        }\r\n    }, [rodLevel, category, _id])\r\n\r\n    const handleConfirm = useCallback(\r\n        (onConfirm, msg = 'Are you sure ?'): void => {\r\n            setModal(\r\n                <Modal\r\n                    ref={modalRef}\r\n                    onClose={setModal}\r\n                    className={styles.modal}\r\n                >\r\n                    <h3>{msg}</h3>\r\n                    <ul className={styles.actionsList}>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => modalRef.current.closeModal()}\r\n                                className={`btn btn-cancel`}\r\n                            >Cancel</button>\r\n                        </li>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => {\r\n                                    onConfirm()\r\n                                    modalRef.current.closeModal()\r\n                                }}\r\n                                className={`btn btn-primary`}\r\n                            >Confirm</button>\r\n                        </li>\r\n                    </ul>\r\n                </Modal>\r\n            )\r\n        }, []\r\n    )\r\n\r\n    const handleUseBait = useCallback(\r\n        (): void => {\r\n            putOnBait(item)\r\n            setCurrentEntryNum(\r\n                <p style={{ background: 'var(--black)', padding: '.25rem' }}>\r\n                    <strong style={{ color: itemCategory.colors[0] }}>\r\n                        {_id}\r\n                    </strong>&nbsp;\r\n                    is now on your fish pole\r\n                </p>\r\n            )\r\n        }, [item, putOnBait, setCurrentEntryNum, _id, itemCategory]\r\n    )\r\n\r\n    const btnUse = useMemo((): React.ReactElement => {\r\n        if (isEquipment && isEquipped) return null // Equipment is already in use\r\n        else if (isEquipment && !isEquipped) return (\r\n            <button\r\n                onClick={() => equipItem(_id)}\r\n                className={`btn btn-primary`}\r\n                title={`Equip yourself with ${_id}`}\r\n            >\r\n                Equip\r\n            </button>\r\n        )\r\n\r\n        return (\r\n            category.match(/Bait|Fish/i) && // Fishes can be used as baits\r\n            baitFood &&\r\n            baitFood._id === _id ? (\r\n                <button\r\n                    onClick={removeBait}\r\n                    className={`btn btn-primary`}\r\n                    title={`You are using some ${_id} as a bait. Remove it ?`}\r\n                >\r\n                    Remove from fish pole\r\n                </button>\r\n            ) : (\r\n                <button\r\n                    onClick={handleUseBait}\r\n                    className={`btn btn-primary`}\r\n                    title={`Try to use ${_id.toLowerCase()}`}\r\n                >Use</button>\r\n            )\r\n        )\r\n    }, [baitFood, _id, removeBait, handleUseBait, category, rodLevel])\r\n\r\n    // Display fishing pole stats\r\n    const fishingPoleStats = useMemo((): ReactNode => {\r\n        if (category !== 'Fishing pole') return null\r\n        \r\n        const lvl = rodLevels.find(level => level._id === _id)\r\n        if (!lvl) return null\r\n\r\n        return <section className={styles.fishingPoleStats}>\r\n            <br />\r\n            <p>Line length: <strong>{pxToM(lvl['maxLength'])}m</strong></p>\r\n            <p>Resistance: <strong>{lvl['resistance']*100}</strong></p>\r\n            <p>Strength: <strong>{lvl['strength']*5}</strong></p>\r\n        </section>\r\n    }, [_id, rodLevels])\r\n\r\n    return <aside className={styles.details}>\r\n        <h3\r\n            style={{\r\n                background: `-webkit-linear-gradient(${itemCategory.colors.join(', ')})`\r\n            }}\r\n        >\r\n            {_id}\r\n        </h3>\r\n        <article className={styles.description} style={{ color: itemCategory.colors[0] }}>\r\n            {description}\r\n            {fishingPoleStats}\r\n        </article>\r\n        <ul className={styles.actions}>\r\n            <li>\r\n                {btnUse}\r\n            </li>\r\n            {isDisposable && (\r\n                <li style={{ display: 'flex', alignItems: 'center', gap: '.25rem', flexWrap: 'nowrap' }}>\r\n                    <button\r\n                        className={`btn btn-cancel`}\r\n                        title={`Remove a chosen amount of ${_id.toLowerCase()} from the inventory`}\r\n                        onClick={() => handleConfirm(() => removeItem(_id, dropAmount), `Drop ${dropAmount} ${dropAmount > 1 ? plural.toLowerCase() : _id.toLowerCase()} ?`)}\r\n                    >Drop</button>\r\n                    <input\r\n                        title={`How many ${plural} should be thrown away ?`}\r\n                        className={styles.dropAmount}\r\n                        type=\"number\"\r\n                        value={dropAmount}\r\n                        min={1}\r\n                        max={amount}\r\n                        step={1}\r\n                        onChange={e => {\r\n                            const newAmount = parseInt(e.target.value)\r\n                            if (newAmount < 1) setDropAmount(1)\r\n                            else if(newAmount > amount) setDropAmount(amount)\r\n                            else setDropAmount(newAmount)\r\n                        }}\r\n                    />\r\n                </li>\r\n            )}\r\n            {isDisposable && (\r\n                <li>\r\n                    <button\r\n                        className={`btn btn-cancel`} \r\n                        title={`Remove every ${_id.toLowerCase()} from the inventory`}\r\n                        onClick={() => handleConfirm(() => deleteEntry(_id), `Drop every ${_id.toLowerCase()} ?`)}\r\n                    >\r\n                        Drop all\r\n                    </button>\r\n                </li>\r\n            )}\r\n        </ul>\r\n        {modal && modal}\r\n    </aside>\r\n}\r\n\r\nexport const Inventory: React.FC<Props> = ({\r\n    setCurrentSection,\r\n    // Redux\r\n    entries = [],\r\n    maxEntries,\r\n    isPlayerOutOfBaits\r\n}) => {\r\n    const [currentEntryNum, setCurrentEntryNum] = useState<number|ReactNode>(null)\r\n    const remainingEntries = useMemo((): number => maxEntries - entries.length, [entries, maxEntries])\r\n    const entriesJSX = useMemo((): (ReactNode[]) => {\r\n        return entries.map((entry: InventoryEntry, index: number) => {\r\n            const isSelected: boolean = currentEntryNum === index\r\n            return <Entry\r\n                key={entry.item._id}\r\n                entry={entry}\r\n                handleSelect={() => !isSelected ? setCurrentEntryNum(index) : setCurrentEntryNum(null)}\r\n                isSelected={isSelected}\r\n             />\r\n        })\r\n    }, [entries, currentEntryNum])\r\n\r\n    const remainingEntriesJSX = useMemo((): (ReactNode[] | ReactNode | null) => {\r\n        if (typeof remainingEntries !== 'number' || remainingEntries <= 0) return null\r\n        let remaining = []\r\n        for (let i = 0; i < remainingEntries; i++) {\r\n            remaining.push(\r\n                <li key={i} className={`${styles.entry} ${styles.empty}`}></li>\r\n            )\r\n        }\r\n        return remaining\r\n    }, [remainingEntries])\r\n\r\n    const detailsJSX = useMemo((): (ReactNode | null) => {\r\n        // Inventory is empty\r\n        if (!entries || entries.length <= 0) {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                <h3>Your inventory is empty ...</h3>\r\n                <p>Lost all your <em>baits</em> ?</p>\r\n                <p>\r\n                    You can buy new ones at the&nbsp;\r\n                    <span className={styles.link} onClick={() => setCurrentSection(SectionID.SHOPPING)}>fishing shop</span>\r\n                    ; otherwise, you might as well look after something edible for fish consumption somewhere on the shore.\r\n                </p>\r\n            </aside>\r\n        }\r\n\r\n        // Player does not have baits and no fishing pole is selected\r\n        if (isPlayerOutOfBaits) {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                <h3>Your inventory is empty ...</h3>\r\n                <p>Lost all your <em>baits</em> ?</p>\r\n                <p>\r\n                    You can buy new ones at the&nbsp;\r\n                    <span className={styles.link} onClick={() => setCurrentSection(SectionID.SHOPPING)}>fishing shop</span>\r\n                    ; otherwise, you might as well look after something edible for fish consumption somewhere on the shore.\r\n                </p>\r\n            </aside>\r\n        }\r\n\r\n        // No item selected\r\n        if (currentEntryNum === null) {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                <h3>Select an item</h3>\r\n            </aside>\r\n        }\r\n\r\n        // Display message\r\n        if (typeof currentEntryNum !== 'number') {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                {currentEntryNum}\r\n            </aside>\r\n        }\r\n        \r\n        // Item selected: display its details\r\n        const currentEntry = entries[currentEntryNum]\r\n        if (!currentEntry) return null\r\n        return <Details entry={currentEntry} setCurrentEntryNum={setCurrentEntryNum} />\r\n    }, [entries, currentEntryNum, isPlayerOutOfBaits])\r\n\r\n    return <div className={styles.inventory}>\r\n        <main className={styles.entries}>\r\n            <ul className={styles.entriesList}>\r\n                {entriesJSX}\r\n                {remainingEntriesJSX}\r\n            </ul>\r\n        </main>\r\n        {detailsJSX}\r\n    </div>\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    entries: inventoryEntriesSelector(state),\r\n    maxEntries: maxEntriesSelector(state),\r\n    isPlayerOutOfBaits: isPlayerOutOfBaitsSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Inventory)","C:\\www\\react-fishing-game\\src\\utils\\time.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Sell\\index.tsx",["440","441","442","443","444","445"],"import React, { ReactNode, Fragment, useState, useMemo, useCallback, useEffect } from 'react'\r\nimport styles from './index.module.sass'\r\nimport allCategories from '../../../../items/categories.json'\r\nimport { ContentID, randomGreeting, randomThanks } from \"../index\"\r\nimport { ItemCategory, InventoryEntry } from '../../../../../interfaces/items'\r\nimport { randomIntFromInterval } from '../../../../../utils/math'\r\nimport useLazyAudio from '../../../../../hooks/useLazyAudio'\r\nimport { BiCoin, GiMagnifyingGlass } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { doubloonsSelector } from '../../../../../store/selectors/game'\r\nimport { sellableEntriesSelector } from '../../../../../store/selectors/inventory'\r\nimport { sellItemAction } from '../../../../../store/actions/inventory'\r\n\r\n// Seller dialogs\r\nexport const saleIntroPhrases: string[] = [\r\n    'What do you need to get rid of ?',\r\n    'How can I help you ?',\r\n    'Alright, what do ye have for me ?'\r\n]\r\nexport const randomSaleIntroPhrase = (): string => saleIntroPhrases[randomIntFromInterval(0, saleIntroPhrases.length - 1)]\r\n\r\n\r\ninterface Props {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setCurrentContentID?: React.Dispatch<React.SetStateAction<ContentID>>,\r\n    myDoubloons?: number,\r\n    sellItem: any,\r\n    sellableEntries?: InventoryEntry[]\r\n}\r\n\r\nexport const Sell: React.FC<Props> = ({ setSellerPhrase, setCurrentContentID, myDoubloons, sellItem, sellableEntries }) => {\r\n    // Audio\r\n    const saleSE = useLazyAudio({ src: 'se/sale.mp3' })\r\n    \r\n    // State\r\n    const [focusedItem, setFocusedItem] = useState<string>(null)\r\n    const [searchFilter, setSearchFilter] = useState<string>('')\r\n\r\n    // Items\r\n    const forSaleItems = useMemo(() => {\r\n        // Figure out which entries to render\r\n        let entries = sellableEntries\r\n        if (searchFilter) {\r\n            entries = sellableEntries.filter((entry: InventoryEntry) => new RegExp(searchFilter, 'i').test(entry.item._id))\r\n        }\r\n\r\n        return entries.map((entry: InventoryEntry) => {\r\n            const { item } = entry\r\n            const isFocused = focusedItem === item._id\r\n            return <ForSaleItem\r\n                key={item._id}\r\n                isFocused={isFocused}\r\n                setFocusedItem={setFocusedItem}\r\n                entry={entry}\r\n                myDoubloons={myDoubloons}\r\n            />\r\n        })\r\n    }, [focusedItem, myDoubloons, sellableEntries, searchFilter])\r\n\r\n    useEffect(() => {\r\n        // Change seller's dialog\r\n        if (!focusedItem) setSellerPhrase(randomSaleIntroPhrase())\r\n    }, [focusedItem])\r\n\r\n    // JSX\r\n    const detailsJSX = useMemo((): ReactNode => {\r\n        const fallback = <aside className={styles.details}>\r\n            <p className={styles.description}>Select an item from your inventory</p>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n        </aside>\r\n\r\n        const entry: InventoryEntry = sellableEntries.find((entry: InventoryEntry) => entry.item._id === focusedItem)\r\n        if (!focusedItem || !entry) return fallback\r\n\r\n        return <SaleDetails\r\n            key={entry.item._id}\r\n            setSellerPhrase={setSellerPhrase}\r\n            entry={entry}\r\n            myDoubloons={myDoubloons}\r\n            sellItem={sellItem}\r\n            saleSE={saleSE}\r\n            setFocusedItem={setFocusedItem}\r\n         />\r\n    }, [focusedItem, sellableEntries, sellItem, myDoubloons])\r\n\r\n    return <div className={styles.sell}>\r\n        <main className={styles.forSaleItems}>\r\n            <ul className={styles.forSaleItemsList}>\r\n                <li className={`${styles.search} ${searchFilter ? styles.active : ''}`}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={searchFilter}\r\n                        onChange={e => setSearchFilter(e.target.value)}\r\n                     />\r\n                    <GiMagnifyingGlass />\r\n                </li>\r\n                {forSaleItems}\r\n            </ul>\r\n            {detailsJSX}\r\n        </main>\r\n        <aside className={styles.footer}>\r\n            <nav className={styles.navigation}>\r\n                <button onClick={() => {\r\n                    setSellerPhrase(randomGreeting())\r\n                    setCurrentContentID(ContentID.ROOT)\r\n                }} className={`btn btn-cancel ${styles.previous}`}>\r\n                    &lt;\r\n                </button>\r\n            </nav>\r\n        </aside>\r\n    </div>\r\n}\r\n\r\ninterface DetailsProps {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    entry: InventoryEntry, \r\n    myDoubloons?: number,\r\n    sellItem?: any,\r\n    saleSE?: HTMLAudioElement\r\n}\r\n\r\nconst SaleDetails: React.FC<DetailsProps> = ({ setSellerPhrase, setFocusedItem, entry, myDoubloons, sellItem, saleSE }) => {\r\n    const { item, amount } = entry\r\n    const { _id, plural, description, salePrice, isSellable } = item\r\n    const [saleAmount, setSaleAmount] = useState<number>(1)\r\n    const [isConfirmingSale, setIsConfirmingSale] = useState<boolean>(false)\r\n    \r\n    const totalPrice = useMemo((): number => salePrice*saleAmount, [salePrice, saleAmount])\r\n\r\n    const canSell = useMemo((): boolean => {\r\n        return isSellable && amount > 0 && saleAmount > 0\r\n    }, [isSellable, amount, saleAmount])\r\n\r\n    const saleBTN = useMemo((): ReactNode => {\r\n        if (!canSell) {\r\n            return <button className={`${styles.disabled} btn btn-cancel ${styles.saleBTN}`}>\r\n                Cannot sell this\r\n            </button>\r\n        }\r\n        if (isConfirmingSale) {\r\n            return <>\r\n                <span\r\n                    className={`btn btn-cancel ${styles.cancelBTN}`}\r\n                    onClick={() => {\r\n                        setIsConfirmingSale(false)\r\n                        setSellerPhrase(randomSaleIntroPhrase())\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </span>\r\n                <button className={`btn btn-primary ${styles.saleBTN}`}>\r\n                    Confirm\r\n                </button>\r\n            </>\r\n        }\r\n\r\n        return <button className={`btn btn-primary ${styles.saleBTN}`}>\r\n            Sell {saleAmount} {saleAmount <= 1 ? _id : plural}\r\n        </button>\r\n    }, [canSell, isConfirmingSale, saleAmount, _id, plural])\r\n\r\n    const confirmSale = useCallback(\r\n        (e: any): void => {\r\n            e.preventDefault()\r\n            if (canSell) {\r\n                if (!isConfirmingSale) {\r\n                    setIsConfirmingSale(true)\r\n                    setSellerPhrase(`Want to sell me ${saleAmount} ${saleAmount > 1 ? plural.toLowerCase() : _id.toLowerCase()} ?`)\r\n                } else {\r\n                    sellItem(_id, saleAmount, totalPrice)\r\n                    saleSE.play()\r\n                    setSellerPhrase(randomThanks())\r\n                    setIsConfirmingSale(false)\r\n\r\n                    // Remove focus if entry is removed from inventory (amount gets null)\r\n                    const isNextAmountNull = saleAmount >= amount\r\n                    if (isNextAmountNull) setFocusedItem(null)\r\n                }\r\n            } else {\r\n                setSellerPhrase('I\\'m not interested ...')\r\n            }\r\n        }, [\r\n            canSell,\r\n            isConfirmingSale,\r\n            _id,\r\n            plural,\r\n            amount,\r\n            saleAmount,\r\n            totalPrice,\r\n            sellItem,\r\n            saleSE\r\n        ]\r\n    )\r\n\r\n    // Component will unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            setSellerPhrase(randomSaleIntroPhrase)\r\n        }\r\n    }, [])\r\n    \r\n    return <aside className={styles.details}>\r\n        <article className={styles.description}>{description}</article>\r\n        <form className={styles.saleActions} onSubmit={confirmSale}>\r\n            <fieldset className={styles.amount}>\r\n                <label htmlFor={`${_id}_amount`}>\r\n                    Amount:&nbsp;\r\n                </label>\r\n                <input\r\n                    type=\"number\"\r\n                    readOnly={isConfirmingSale}\r\n                    id={`${_id}_amount`}\r\n                    value={saleAmount}\r\n                    max={amount}\r\n                    min={1}\r\n                    step={1}\r\n                    onChange={e => {\r\n                        const newAmount = parseInt(e.target.value)\r\n                        if (newAmount <= 0) setSaleAmount(1)\r\n                        else if (newAmount > amount) setSaleAmount(amount)\r\n                        else setSaleAmount(newAmount)\r\n                    }}\r\n                />\r\n                <p className={styles.totalPrice}>\r\n                    <span className={styles.label}>Total: </span>\r\n                    {totalPrice} <BiCoin />\r\n                </p>\r\n            </fieldset>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n            <fieldset className={styles.submit}>{saleBTN}</fieldset>\r\n        </form>\r\n    </aside>\r\n}\r\n\r\ninterface ForSaleItemProps {\r\n    entry: InventoryEntry,\r\n    isFocused: boolean,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    myDoubloons?: number\r\n}\r\n\r\nfunction ForSaleItem ({ entry, setFocusedItem, isFocused, myDoubloons }) {\r\n    const { item, amount } = entry\r\n    const { _id, salePrice, image, category } = item\r\n    const itemCategory: ItemCategory = allCategories[category]\r\n    const textStyle = useMemo(() => ({ background: `linear-gradient(${itemCategory.colors.join(', ')}` }), [itemCategory])\r\n\r\n    return <li\r\n        className={`${styles.forSaleItem} ${isFocused ? styles.focused : ''}`}\r\n        style={{ boxShadow: isFocused ? `0 0 1px 1px inset ${itemCategory.colors[0]}` : 'none' }}\r\n        onClick={() => isFocused ? setFocusedItem(null) : setFocusedItem(_id)}\r\n    >\r\n        <figure className={styles.itemImage} style={{ color: itemCategory.colors[1] }} dangerouslySetInnerHTML={{ __html: image }}></figure>\r\n        <span\r\n            className={styles.id}\r\n            style={textStyle}\r\n        >{_id}</span>\r\n        <span className={styles.amount}>&times;{amount}</span>\r\n        <span className={styles.price}><strong>{salePrice}</strong> <BiCoin /></span>\r\n    </li>\r\n}\r\n\r\n// Connect \"Sell\" component to Redux\r\nconst mapStateToProps = state => ({\r\n    myDoubloons: doubloonsSelector(state),\r\n    sellableEntries: sellableEntriesSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    sellItem: (itemID: string, amount: number, price: number) => dispatch(sellItemAction(itemID, amount, price))\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sell)","C:\\www\\react-fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Buy\\index.tsx",["446","447","448","449","450","451","452","453"],"import React, { ReactNode, Fragment, useState, useMemo, useCallback, useEffect } from 'react'\r\nimport styles from './index.module.sass'\r\nimport allItems from '../../../../items/items.json'\r\nimport { rodLevels } from '../../../evolution'\r\nimport allCategories from '../../../../items/categories.json'\r\nimport { ContentID, randomGreeting, randomThanks } from \"../index\"\r\nimport { Item, ItemCategory, InventoryEntry } from '../../../../../interfaces/items'\r\nimport { randomIntFromInterval } from '../../../../../utils/math'\r\nimport { pxToM } from '../../../../../utils/position'\r\nimport useLazyAudio from '../../../../../hooks/useLazyAudio'\r\nimport { BiCoin } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { doubloonsSelector } from '../../../../../store/selectors/game'\r\nimport { inventoryEntriesSelector } from '../../../../../store/selectors/inventory'\r\nimport { purchaseItemAction } from '../../../../../store/actions/inventory'\r\n\r\n// Seller dialogs\r\nexport const purchaseIntroPhrases: string[] = [\r\n    'Which item will you buy ?',\r\n    'How can I help you ?',\r\n    'Alright, what can I do for ye ?'\r\n]\r\nexport const randomPurchaseIntroPhrase = (): string => purchaseIntroPhrases[randomIntFromInterval(0, purchaseIntroPhrases.length - 1)]\r\n\r\nexport const tooExpensivePhrases: string[] = [\r\n    'Hey ! I want more doubloons for that !!',\r\n    'Come back with more cash, buddy !',\r\n    'Well tried, but that is worth WAY more doubloons !'\r\n]\r\nexport const randomTooExpensivePhrase = (): string => tooExpensivePhrases[randomIntFromInterval(0, tooExpensivePhrases.length - 1)]\r\n\r\ninterface Props {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setCurrentContentID?: React.Dispatch<React.SetStateAction<ContentID>>,\r\n    myDoubloons?: number,\r\n    purchaseItem: any\r\n}\r\n\r\nexport const Buy: React.FC<Props> = ({ setSellerPhrase, setCurrentContentID, myDoubloons, purchaseItem }) => {\r\n    // Redux\r\n    const inventoryEntries: InventoryEntry[] = useSelector(inventoryEntriesSelector)\r\n\r\n    // Audio\r\n    const purchaseSE = useLazyAudio({ src: 'se/purchase.mp3' })\r\n    const thankYouSE = useLazyAudio({ src: 'se/thank-you-for-the-doubloons.mp3' })\r\n\r\n    // Items\r\n    const [focusedItem, setFocusedItem] = useState<string>(null)\r\n    const forSaleItems = useMemo(() => {\r\n        const ids: string[] = [\r\n            'Mushroom',\r\n            'Fly',\r\n            'Butterfly',\r\n            'Dragonfly'\r\n        ]\r\n        // Add fishing poles that are not already in player's possession\r\n        const fishrodIDs: Array<string> = rodLevels.map(lvl => {\r\n            const fishrodID = lvl._id\r\n            // Add to available for purchase list if this id is not inventory yet\r\n            if (!inventoryEntries.find(entry => entry.item._id === fishrodID)) {\r\n                return fishrodID\r\n            }\r\n        }).filter(id => typeof id !== 'undefined')\r\n\r\n        return [...ids, ...fishrodIDs].map(id => {\r\n            const item: Item = allItems[id]\r\n            const isFocused = focusedItem === id\r\n            return <ForSaleItem\r\n                key={id}\r\n                isFocused={isFocused}\r\n                setFocusedItem={setFocusedItem}\r\n                item={item}\r\n                myDoubloons={myDoubloons}\r\n             />\r\n        })\r\n    }, [focusedItem, myDoubloons, inventoryEntries])\r\n\r\n    useEffect(() => {\r\n        // Change seller's dialog\r\n        if (!focusedItem) setSellerPhrase(randomPurchaseIntroPhrase())\r\n    }, [focusedItem])\r\n\r\n    // JSX\r\n    const detailsJSX = useMemo((): ReactNode => {\r\n        if (!focusedItem) {\r\n            return <aside className={styles.details}>\r\n                <p className={styles.description}>Select an item to check its details</p>\r\n                <p className={styles.myDoubloons}>\r\n                    <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                    {myDoubloons} <BiCoin />\r\n                </p>\r\n            </aside>\r\n        }\r\n\r\n        const item: Item = allItems[focusedItem]\r\n        return <PurchaseDetails\r\n            key={item._id}\r\n            setSellerPhrase={setSellerPhrase}\r\n            item={item}\r\n            myDoubloons={myDoubloons}\r\n            purchaseItem={purchaseItem}\r\n            purchaseSE={purchaseSE}\r\n            thankYouSE={thankYouSE}\r\n            inventoryEntries={inventoryEntries}\r\n         />\r\n    }, [focusedItem, purchaseItem, myDoubloons])\r\n\r\n    return <div className={styles.buy}>\r\n        <main className={styles.forSaleItems}>\r\n            <ul className={styles.forSaleItemsList}>\r\n                {forSaleItems}\r\n            </ul>\r\n            {detailsJSX}\r\n        </main>\r\n        <aside className={styles.footer}>\r\n            <nav className={styles.navigation}>\r\n                <button onClick={() => {\r\n                    setSellerPhrase(randomGreeting())\r\n                    setCurrentContentID(ContentID.ROOT)\r\n                }} className={`btn btn-cancel ${styles.previous}`}>\r\n                    &lt;\r\n                </button>\r\n            </nav>\r\n        </aside>\r\n    </div>\r\n}\r\n\r\ninterface DetailsProps {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    item: Item \r\n    myDoubloons?: number,\r\n    purchaseItem?: any,\r\n    purchaseSE?: HTMLAudioElement,\r\n    thankYouSE?: HTMLAudioElement,\r\n    inventoryEntries: InventoryEntry[]\r\n}\r\n\r\nconst PurchaseDetails: React.FC<DetailsProps> = ({ setSellerPhrase, item, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries }) => {\r\n    // State\r\n    const { _id, plural, description, purchasePrice, category } = item\r\n    const [amount, setAmount] = useState<number>(1)\r\n    const [isConfirmingPurchase, setIsConfirmingPurchase] = useState<boolean>(false)\r\n    \r\n    const totalPrice = useMemo((): number => purchasePrice*amount, [purchasePrice, amount])\r\n\r\n    const canBuy = useMemo((): boolean => {\r\n        const hasPlayerEnoughMoney = myDoubloons >= totalPrice\r\n        return hasPlayerEnoughMoney && amount > 0\r\n    }, [myDoubloons, totalPrice, amount])\r\n\r\n    const amountInInventory = useMemo((): number => {\r\n        const inventoryEntry = inventoryEntries.find((entry: InventoryEntry) => entry.item._id === _id)\r\n        // Item is not in player's inventory\r\n        if (!inventoryEntry) return 0\r\n        // Item is already in inventory\r\n        else return inventoryEntry.amount\r\n    }, [inventoryEntries, _id])\r\n\r\n    const purchaseBTN = useMemo((): ReactNode => {\r\n        if (!canBuy) {\r\n            return <button className={`${styles.disabled} btn btn-cancel ${styles.purchaseBTN}`}>\r\n                Too expensive\r\n            </button>\r\n        }\r\n        if (isConfirmingPurchase) {\r\n            return <>\r\n                <span\r\n                    className={`btn btn-cancel ${styles.cancelBTN}`}\r\n                    onClick={() => {\r\n                        setIsConfirmingPurchase(false)\r\n                        setSellerPhrase(randomPurchaseIntroPhrase())\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </span>\r\n                <button className={`btn btn-primary ${styles.purchaseBTN}`}>\r\n                    Confirm\r\n                </button>\r\n            </>\r\n        }\r\n\r\n        return <button className={`btn btn-primary ${styles.purchaseBTN}`}>\r\n            Buy {amount} {amount <= 1 ? _id : plural}\r\n        </button>\r\n    }, [canBuy, isConfirmingPurchase, amount, _id, plural])\r\n\r\n    const confirmPurchase = useCallback(\r\n        (e: any): void => {\r\n            e.preventDefault()\r\n            if (canBuy) {\r\n                if (!isConfirmingPurchase) {\r\n                    setIsConfirmingPurchase(true)\r\n                    setSellerPhrase(`Want to buy ${amount} ${amount > 1 ? plural.toLowerCase() : _id.toLowerCase()} ?`)\r\n                } else {\r\n                    purchaseItem(_id, amount, totalPrice)\r\n                    purchaseSE.play()\r\n                    setSellerPhrase(randomThanks())\r\n                    setIsConfirmingPurchase(false)\r\n                    setAmount(1)\r\n                    // \"Thank you !\"\r\n                    window.setTimeout(() => {\r\n                        if (thankYouSE) thankYouSE.play()\r\n                    }, 1500)\r\n                }\r\n            } else {\r\n                setSellerPhrase(randomTooExpensivePhrase())\r\n            }\r\n        }, [\r\n            canBuy,\r\n            isConfirmingPurchase,\r\n            _id,\r\n            plural,\r\n            amount,\r\n            totalPrice,\r\n            purchaseItem,\r\n            purchaseSE\r\n        ]\r\n    )\r\n\r\n    // Component will unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            setSellerPhrase(randomPurchaseIntroPhrase)\r\n        }\r\n    }, [])\r\n\r\n    // Display fishing pole stats\r\n    const fishingPoleStats = useMemo((): ReactNode => {\r\n        if (category !== 'Fishing pole') return null\r\n        \r\n        const lvl = rodLevels.find(level => level._id === _id)\r\n        if (!lvl) return null\r\n\r\n        return <section className={styles.fishingPoleStats}>\r\n            <br />\r\n            <p>Line length: <strong>{pxToM(lvl['maxLength'])}m</strong></p>\r\n            <p>Resistance: <strong>{lvl['resistance']*100}</strong></p>\r\n            <p>Strength: <strong>{lvl['strength']*5}</strong></p>\r\n        </section>\r\n    }, [_id, rodLevels])\r\n    \r\n    return <aside className={styles.details}>\r\n        <article className={styles.description}>\r\n            {description}\r\n            {fishingPoleStats}\r\n        </article>\r\n        <form className={styles.purchaseActions} onSubmit={confirmPurchase}>\r\n            <fieldset className={styles.amount}>\r\n                <label htmlFor={`${_id}_amount`}>\r\n                    Amount:&nbsp;\r\n                </label>\r\n                <input\r\n                    type=\"number\"\r\n                    readOnly={isConfirmingPurchase}\r\n                    id={`${_id}_amount`}\r\n                    value={amount}\r\n                    max={99}\r\n                    min={1}\r\n                    step={1}\r\n                    onChange={e => {\r\n                        if (category === 'Fishing pole') return setAmount(1) // Can only buy 1 fishing pole\r\n                        \r\n                        const newAmount = parseInt(e.target.value)\r\n                        if (newAmount <= 0) setAmount(1)\r\n                        else if (newAmount > 99) setAmount(99)\r\n                        else setAmount(newAmount)\r\n                    }}\r\n                />\r\n                <p className={styles.totalPrice}>\r\n                    <span className={styles.label}>Total: </span>\r\n                    {totalPrice} <BiCoin />\r\n                </p>\r\n            </fieldset>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Inventory:&nbsp;&nbsp;</span>\r\n                {amountInInventory} \r\n                <span\r\n                    className={styles.label}\r\n                    style={{ marginLeft: '.5em' }}\r\n                >Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n            <fieldset className={styles.submit}>{purchaseBTN}</fieldset>\r\n        </form>\r\n    </aside>\r\n}\r\n\r\ninterface ForSaleItemProps {\r\n    item: Item,\r\n    isFocused: boolean,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    myDoubloons?: number\r\n}\r\n\r\nfunction ForSaleItem ({ item, setFocusedItem, isFocused, myDoubloons }) {\r\n    const { _id, purchasePrice, image, category } = item\r\n    const itemCategory: ItemCategory = allCategories[category]\r\n    const textStyle = useMemo(() => ({ background: `linear-gradient(${itemCategory.colors.join(', ')}` }), [itemCategory])\r\n\r\n    return <li\r\n        className={`\r\n            ${styles.forSaleItem}\r\n             ${isFocused ? styles.focused : ''}\r\n             ${purchasePrice > myDoubloons ? styles.tooExpensive : ''}\r\n        `}\r\n        style={{ boxShadow: isFocused ? `0 0 1px 1px inset ${itemCategory.colors[0]}` : 'none' }}\r\n        onClick={() => isFocused ? setFocusedItem(null) : setFocusedItem(_id)}\r\n    >\r\n        <figure\r\n            className={styles.itemImage} \r\n            style={{ color: itemCategory.colors[1] }} \r\n            dangerouslySetInnerHTML={{ __html: image }}\r\n        ></figure>\r\n        <span\r\n            className={styles.id}\r\n            style={textStyle}\r\n        >{_id}</span>\r\n        <span className={styles.price}><strong>{purchasePrice}</strong> <BiCoin /></span>\r\n    </li>\r\n}\r\n\r\n// Connect \"Buy\" component to Redux\r\nconst mapStateToProps = state => ({\r\n    myDoubloons: doubloonsSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    purchaseItem: (itemID: string, amount: number, price: number) => dispatch(purchaseItemAction(itemID, amount, price))\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Buy)","C:\\www\\react-fishing-game\\src\\components\\fishes\\Default\\index.tsx",["454","455","456","457","458","459","460","461","462","463"],"import React, { useCallback, ReactNode, useState, useMemo, useEffect, useLayoutEffect, useRef } from 'react'\r\nimport { GameNotif, GameNotifType, GameProcess } from '../../../interfaces/game'\r\nimport { Coordinates, Path, Map } from '../../../interfaces/position'\r\nimport { Item } from '../../../interfaces/items'\r\nimport { Fish, FishData } from '../../../interfaces/fishes'\r\nimport { randomIntFromInterval, probability, toDeg } from '../../../utils/math'\r\nimport { getNextCoordinatesOfPath, areCoordinatesInPath, getAngleFromVerticalAxis } from '../../../utils/position'\r\nimport { takeBaitAnim } from '../../Game/animations'\r\nimport { FaHeart, FaTimes } from 'react-icons/fa'\r\nimport styles from './index.module.sass'\r\nimport allCategories from '../../items/categories.json'\r\n\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { mapSelector, baitLakeCoordsSelector } from '../../../store/selectors/position'\r\nimport {\r\n    isBaitAvailableSelector,\r\n    baitFoodSelector,\r\n    hookedFishSelector,\r\n    hasBaitJustFallenSelector\r\n} from'../../../store/selectors/fishing'\r\nimport { setGameNotificationAction } from '../../../store/actions/game'\r\nimport { makeBaitAvailableAction, setHookedFishAction, loseBaitAction } from '../../../store/actions/fishing'\r\nimport { setGameProcessAction } from '../../../store/actions/game'\r\n\r\n// Notif text when player hooks too soon\r\nconst fleePhrases: string[] = [\r\n    'Fish goes away',\r\n    'Fish is afraid',\r\n    'You gotta hook the fish when it\\'s green'\r\n]\r\nconst getRandomFleePhrase = (): string => fleePhrases[randomIntFromInterval(0, fleePhrases.length - 1)]\r\n\r\ninterface Props {\r\n    fish?: Fish, // fish stats template from json file\r\n    groupID: string, // fish group uuid\r\n    fishID: string, // fish uuid\r\n    _id: string, // fish name\r\n    size: number, // Size of the fish in px; width = 1em\r\n    strength: number,\r\n    area?: Path, // Path of the area the fish belongs to\r\n    detectionScope?: number, // Number of pixels around fish where it can detect the bait,\r\n    roamingInterval?: number|number[], // Interval in milliseconds between fish moves when it's roaming\r\n    roamingDistance?: number|number[], // Distance in px that fish travels when it's roaming\r\n    edibleFoods?: string[], // What foods the fish likes\r\n    biteChance?: number, // Probability that the fish will take the bait if it's attracted to it (min: 0; max: 1)\r\n    pullChance?: number, // Probability that the fish will pull on the line at each time interval during battle process (min: 0; max: 1)\r\n    catchTimeLapse?: number[] // Interval of time in which player is able to hook the fish after it took the bait; first n is the delay after the bait was taken, second is the duration\r\n    isBoss?: boolean,\r\n    className?: string,\r\n    children?: ReactNode,\r\n    // Redux\r\n    map?: Map,\r\n    baitLakeCoords?: Coordinates\r\n}\r\n\r\n// Lake is the referential of fish coords\r\nconst DefaultFish: React.FC<Props> = ({\r\n    fish = null,\r\n    fishID,\r\n    groupID,\r\n    _id,\r\n    size = 20,\r\n    strength = 10,\r\n    area,\r\n    detectionScope = 75,\r\n    roamingInterval = [1000, 5000],\r\n    roamingDistance = 20,\r\n    edibleFoods = ['Mushroom'],\r\n    biteChance = .75,\r\n    pullChance = .5,\r\n    catchTimeLapse =  [0, 2000],\r\n    isBoss = false,\r\n    className = '',\r\n    children,\r\n}) => {\r\n    // REDUX\r\n    const hookedFish = useSelector(hookedFishSelector)\r\n    const baitLakeCoords: Coordinates = useSelector(baitLakeCoordsSelector)\r\n    const map: Map = useSelector(mapSelector)\r\n    const isBaitAvailable: boolean = useSelector(isBaitAvailableSelector)\r\n    const baitFood: Item = useSelector(baitFoodSelector)\r\n    const hasBaitJustFallen = useSelector(hasBaitJustFallenSelector)\r\n    const dispatch = useDispatch()\r\n    const makeBaitAvailable = useCallback((bool: boolean): void => dispatch(makeBaitAvailableAction(bool)), [])\r\n    const setHookedFish = useCallback((fish: FishData): void => dispatch(setHookedFishAction(fish)), [])\r\n    const loseBait = useCallback((): void => dispatch(loseBaitAction()), [])\r\n    const setGameProcess = useCallback((newProcess: GameProcess): void => dispatch(setGameProcessAction(newProcess)), [])\r\n    const setGameNotification = useCallback((notif: GameNotif): void => dispatch(setGameNotificationAction(notif)), [])\r\n    \r\n    // REFS\r\n    const fishPathRef = useRef<HTMLDivElement>(null)\r\n\r\n    // STATE\r\n    const [fishDirection, setFishDirection] = useState<number>(() => randomIntFromInterval(-180, 180))\r\n    const [isRoaming, setIsRoaming] = useState<boolean>(true)\r\n    const [moveTransition, setMoveTransition] = useState<string>('none')\r\n    const [opacity, setOpacity] = useState(1)\r\n    const [wouldHookSuccessfully, setWouldHookSuccessfully] = useState<boolean>(false)\r\n    const [canTryToCatch, setCanTryToCatch] = useState<boolean>(false)\r\n\r\n    // Initialize fish position somewhere inside the area/group it belongs to\r\n    const [fishCoords, setFishCoords] = useState<Coordinates>({\r\n        x: area.from.x,\r\n        y: area.from.y\r\n    })\r\n    const fishWidth = useMemo((): number => size, [size])\r\n    const fishHeight = useMemo((): number => size*3/8, [size])\r\n    const isFishHorizontal = useMemo((): boolean => (fishDirection <= 135 && fishDirection >= 45) || (fishDirection >= -135 && fishDirection <= -45), [fishDirection])\r\n    const rectWidth = useMemo((): number => isFishHorizontal ? fishWidth : fishHeight, [isFishHorizontal, fishWidth, fishHeight])\r\n    const rectHeight = useMemo((): number => isFishHorizontal ? fishHeight : fishWidth, [isFishHorizontal, fishWidth, fishHeight])\r\n\r\n    const fishPath = useMemo((): Path => {\r\n        const halfWidth: number = rectWidth/2\r\n        const halfHeight: number = rectHeight/2\r\n        return ({\r\n            from: {\r\n                x: fishCoords.x - halfWidth,\r\n                y: fishCoords.y - halfHeight\r\n            },\r\n            to: {\r\n                x: fishCoords.x + halfWidth,\r\n                y: fishCoords.y + halfHeight\r\n            }\r\n        })\r\n    }, [fishCoords, rectWidth, rectHeight])\r\n\r\n    const detectionPath = useMemo((): Path => {\r\n        return ({\r\n            from: {\r\n                x: fishPath.from.x - detectionScope,\r\n                y: fishPath.from.y - detectionScope\r\n            },\r\n            to: {\r\n                x: fishPath.to.x + detectionScope,\r\n                y: fishPath.to.y + detectionScope\r\n            }\r\n        })\r\n    }, [fishPath, detectionScope])\r\n\r\n    // Check when bait gets within fish's detection scope\r\n    const isInScope = useMemo((): boolean => {\r\n        return isBaitAvailable && areCoordinatesInPath(baitLakeCoords, detectionPath)\r\n    }, [baitLakeCoords, detectionPath, isBaitAvailable])\r\n\r\n    // Check whether fish likes the food on the fishing hook\r\n    const likesBait = useMemo(() => {\r\n        if (!baitFood) return false\r\n        return edibleFoods.includes(baitFood._id)\r\n    }, [edibleFoods, baitFood])\r\n\r\n    // FUNCTIONS\r\n    const goAway = useCallback(\r\n        (): void => {\r\n            setFishCoords({\r\n                x: randomIntFromInterval(area.from.x, area.to.x),\r\n                y: randomIntFromInterval(area.from.y, area.to.y)\r\n            })\r\n            setFishDirection(randomIntFromInterval(-180, 180))\r\n            setOpacity(0)\r\n            window.setTimeout(() => {\r\n                if (setOpacity) {\r\n                    setOpacity(1)\r\n                }\r\n            }, 2000)\r\n        }, [setFishCoords, area, opacity]\r\n    )\r\n\r\n    const giveUpBait = useCallback(\r\n        (): void => {\r\n            window.clearTimeout(hookStartTimerIDRef.current)\r\n            window.clearTimeout(hookFailTimerIDRef.current)\r\n            window.clearTimeout(hookSucceedTimerIDRef.current)\r\n            setCanTryToCatch(false)\r\n            setWouldHookSuccessfully(false)\r\n            return setIsRoaming(true)\r\n        }, []\r\n    )\r\n\r\n    // This function gets called when a fish takes the bait and the player reacted too late\r\n    const handleHookFail = useCallback(\r\n        (): void => {\r\n            if (!inScopeRef.current || !!hookedFish) return giveUpBait()\r\n            else {\r\n                // Reinitialize fish behaviour\r\n                giveUpBait()\r\n                setWouldHookSuccessfully(false)\r\n                setCanTryToCatch(false)\r\n                setIsRoaming(true)\r\n\r\n                // Display notification\r\n                const baitColor = allCategories[baitFood.category]['colors'][1]\r\n                setGameNotification({\r\n                    type: GameNotifType.FAIL,\r\n                    html: {\r\n                        header: `<h3>Too late !</h3>`,\r\n                        body: `\r\n                            <p>A fish went away with your bait ...</p>\r\n                            <p>\r\n                                You lost \r\n                                <strong style=\"color: ${baitColor}\">\r\n                                    1 ${baitFood._id}\r\n                                </strong>\r\n                            </p>\r\n                        `\r\n                    },\r\n                    duration: 10\r\n                })\r\n\r\n                // Lose bait\r\n                loseBait()\r\n\r\n                // Go back to the shore automatically\r\n                setGameProcess(GameProcess.INITIAL)\r\n            }\r\n        }, [isInScope, giveUpBait, hookedFish]\r\n    )\r\n\r\n    const randomMove = useCallback(\r\n        (): void => {\r\n            if (typeof document.hidden === \"undefined\" || document.hidden === false) {\r\n                const newAngle: number = randomIntFromInterval(-180, 180)\r\n                const distance: number = roamingDistance ? Array.isArray(roamingDistance) ? randomIntFromInterval(roamingDistance[0], roamingDistance[1]) : roamingDistance : fishWidth\r\n                const offsetCoords: Coordinates = getNextCoordinatesOfPath(newAngle, distance)\r\n                const newCoords: Coordinates = {\r\n                    x: fishCoords.x + offsetCoords.x,\r\n                    y: fishCoords.y + offsetCoords.y\r\n                }\r\n        \r\n                // Only move if newCoords are inside fish area\r\n                if (areCoordinatesInPath(newCoords, area)) {\r\n                    setFishDirection(-newAngle)\r\n                    setFishCoords(newCoords)\r\n                }\r\n            }\r\n        }, [fishCoords, fishDirection, roamingDistance, fishWidth, area, isInScope, likesBait]\r\n    )\r\n\r\n    const approachBait = useCallback(\r\n        (): void => {\r\n            // Lean towards bait from current position\r\n            const angle: number = toDeg(getAngleFromVerticalAxis({ from: baitLakeCoords, to: fishCoords }))\r\n            setMoveTransition('2s transform ease-in-out, 0s background ease, 0s border-color ease, .5s opacity ease')\r\n            setFishDirection(angle)\r\n            // Handle offset\r\n            let offsetX: number = 0\r\n            let offsetY: number = 0\r\n\r\n            offsetX = (angle > 0 && angle < 45) || (angle > 135 && angle <= 180) ? rectWidth/2 : offsetX\r\n            offsetX = angle < 0 ? -rectWidth : offsetX\r\n            offsetX = (angle < 45 && angle > -45) || angle > 135 ?  -rectHeight/2 : offsetX\r\n            offsetY = Math.abs(angle) > 90 ? rectHeight/2 : -rectHeight/2\r\n\r\n            setFishCoords({\r\n                x: baitLakeCoords.x + offsetX,\r\n                y: baitLakeCoords.y + offsetY\r\n            })\r\n        }, [baitLakeCoords, fishCoords, rectHeight, rectWidth]\r\n    )\r\n\r\n    // Handle take bait\r\n    // Timer IDs\r\n    const hookStartTimerIDRef = useRef<number>(null)\r\n    const hookSucceedTimerIDRef = useRef<number>(null)\r\n    const hookFailTimerIDRef = useRef<number>(null)\r\n    // We need to access current values of these refs during setTimeout\r\n    const inScopeRef = useRef<boolean>(null)\r\n    // Map dependencies to refs\r\n    useEffect(() => {\r\n        inScopeRef.current = isInScope\r\n    }, [isInScope])\r\n    const takeBait = useCallback(\r\n        (): void => {\r\n             // Stop roaming and approach bait\r\n            setIsRoaming(false)\r\n            const [delay, duration] = catchTimeLapse\r\n            const approachDuration = 4000\r\n            approachBait()\r\n            //console.log('approaching bait')\r\n            \r\n            hookFailTimerIDRef.current = window.setTimeout(\r\n                handleHookFail, approachDuration + delay + duration\r\n            )\r\n\r\n            hookSucceedTimerIDRef.current = window.setTimeout(() => {\r\n                if (!inScopeRef.current) return giveUpBait()\r\n                setWouldHookSuccessfully(true)\r\n                // Player would hook the fish successfully during this interval\r\n            }, approachDuration + delay)\r\n\r\n            // Fish will approach bait during x seconds before taking it\r\n            hookStartTimerIDRef.current = window.setTimeout(() => {\r\n                // If bait went out of scope or is unavailable, stop\r\n                if (!inScopeRef.current) {\r\n                    return giveUpBait()\r\n                }\r\n                \r\n                setCanTryToCatch(true)\r\n                takeBaitAnim(fishPathRef.current)\r\n                // \"takes bait\"; if tries to hook now, too soon\r\n            }, approachDuration)\r\n        }, [\r\n            catchTimeLapse,\r\n            approachBait,\r\n            handleHookFail,\r\n            giveUpBait\r\n        ]\r\n    )\r\n    // Allow player to hook the fish during the right timelapse\r\n    useEffect(() => {\r\n        function handleHook (): void {\r\n            if (isBaitAvailable) {\r\n                if (wouldHookSuccessfully) {\r\n                    // Hooked successfully\r\n                    setHookedFish({\r\n                        fishID,\r\n                        groupID,\r\n                        fish: {\r\n                            ...fish,\r\n                            strength,\r\n                            size,\r\n                            pullChance, // Use DefaultFish's default value if not set in json\r\n                            isBoss,\r\n                            roamingInterval\r\n                        }\r\n                    })\r\n                    setGameProcess(GameProcess.BATTLE)\r\n\r\n                    // Cancel failure and reinitialize state\r\n                    window.clearTimeout(hookFailTimerIDRef.current)                    \r\n                    setWouldHookSuccessfully(false)\r\n                    setCanTryToCatch(false)\r\n                    setMoveTransition('none')\r\n\r\n                    // Prevent more than one fish at a time to get hooked\r\n                    makeBaitAvailable(false)\r\n                } else {\r\n                    // Too soon\r\n                    // Fish flees\r\n                    makeBaitAvailable(true)\r\n                    goAway()\r\n                    // Notify\r\n                    setGameNotification({\r\n                    type: GameNotifType.FAIL,\r\n                    html: {\r\n                        header: `<h3>Too soon !</h3>`,\r\n                        body: `<p>${getRandomFleePhrase()}</p>`\r\n                    },\r\n                    duration: 5\r\n                })\r\n                }\r\n            } else console.log('Tried to hook but bait is not available ...')\r\n        }\r\n        function handleKeyPress (e: KeyboardEvent): void {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            switch(e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    handleHook()\r\n                    break\r\n            }\r\n        }\r\n        function handleClick (e: MouseEvent): void {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            handleHook()\r\n        }\r\n        function handleTouch (e: TouchEvent): void {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            handleHook()\r\n        }\r\n\r\n        if (canTryToCatch) {\r\n            document.addEventListener('keypress', handleKeyPress, true)\r\n            document.body.addEventListener('mousedown', handleClick, true)\r\n            document.body.addEventListener('touchstart', handleTouch, true)\r\n        } else {\r\n            document.removeEventListener('keypress', handleKeyPress, true)\r\n            document.body.removeEventListener('mousedown', handleClick, true)\r\n            document.body.removeEventListener('touchstart', handleTouch, true)\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('keypress', handleKeyPress, true)\r\n            document.body.removeEventListener('mousedown', handleClick, true)\r\n            document.body.removeEventListener('touchstart', handleTouch, true)\r\n        }\r\n    }, [wouldHookSuccessfully, canTryToCatch, isBaitAvailable, fishID, groupID, strength, size, goAway])\r\n\r\n    // Default fish behaviour when it's roaming\r\n    useEffect(() => {\r\n        let intervalID = null\r\n        const handleRoaming = (): void => {\r\n            if (!isInScope || !likesBait) randomMove()\r\n            else {\r\n                // Decide whether to take the bait\r\n                if (probability(biteChance)) {\r\n                    takeBait()\r\n                } else randomMove()\r\n            }\r\n        }\r\n\r\n        if (isRoaming && !hookedFish) {\r\n            const intervalDuration = Array.isArray(roamingInterval) ? randomIntFromInterval(roamingInterval[0], roamingInterval[1]) : roamingInterval\r\n            intervalID = window.setInterval(handleRoaming, intervalDuration)\r\n            setMoveTransition('1s all ease')\r\n        } else {\r\n            window.clearInterval(intervalID)\r\n        }\r\n\r\n        return () => {\r\n            window.clearInterval(intervalID)\r\n        }\r\n    }, [\r\n        isRoaming,\r\n        randomMove,\r\n        roamingInterval,\r\n        likesBait,\r\n        isInScope,\r\n        biteChance,\r\n        takeBait,\r\n        hookedFish\r\n    ])\r\n\r\n    // Flee if bait falls on fish\r\n    useEffect(() => {\r\n        if (hasBaitJustFallen) {\r\n            if (areCoordinatesInPath(baitLakeCoords, fishPath)) {\r\n                goAway()\r\n            }\r\n        }\r\n    }, [hasBaitJustFallen, baitLakeCoords, fishPath, goAway])\r\n\r\n    // Make fish follow bait when it is hooked\r\n    useEffect(() => {\r\n        if (hookedFish && hookedFish.fishID === fishID) {\r\n            setFishCoords(baitLakeCoords)\r\n        }\r\n    }, [hookedFish, fishID, baitLakeCoords])\r\n\r\n    // Fish struggles when it gets hooked\r\n    const isStruggling = useMemo((): boolean => hookedFish && hookedFish.fishID === fishID, [hookedFish, fishID])\r\n\r\n    useLayoutEffect(() => {\r\n        // Stop roaming when fish starts struggling\r\n        if (isStruggling) setIsRoaming(false)\r\n        else {\r\n            // After fish was mounted or released from hook,\r\n            // start roaming at random position within area\r\n            setIsRoaming(true)\r\n            setFishCoords({\r\n                x: randomIntFromInterval(area.from.x, area.to.x),\r\n                y: randomIntFromInterval(area.from.y, area.to.y)\r\n            })\r\n        }\r\n    }, [isStruggling, area])\r\n\r\n    // All other fishes disappear when fish gets hooked\r\n    if (hookedFish && hookedFish.fishID !== fishID) return null\r\n\r\n    return <><div\r\n        className={`\r\n            ${className} \r\n            ${styles.defaultFish} \r\n            ${isStruggling ? styles.struggling : ''} \r\n            ${canTryToCatch ? styles.canTryToCatch : ''} \r\n            ${wouldHookSuccessfully ? styles.wouldHookSuccessfully : ''}\r\n        `}\r\n        style={{\r\n            fontSize: `${size}px`,\r\n            animationDelay: `${Math.random()}s`,\r\n            transform: `\r\n                translate(\r\n                    ${fishPath.from.x - (isFishHorizontal ? 0 : fishHeight/2)}px,\r\n                     ${fishPath.from.y + (isFishHorizontal ? 0 : fishHeight)}px\r\n                )\r\n                 rotate(${fishDirection + 90}deg)\r\n            `,\r\n            left: 0,\r\n            top: 0,\r\n            transition: moveTransition,\r\n            opacity\r\n        }}\r\n    >\r\n        {children}\r\n    </div>\r\n    <div\r\n        className={styles.fishPath}\r\n        ref={fishPathRef}\r\n        style={{\r\n            left: fishPath.from.x,\r\n            top: fishPath.from.y,\r\n            width: fishPath.to.x - fishPath.from.x,\r\n            height: fishPath.to.y - fishPath.from.y,\r\n            transition: moveTransition,\r\n            opacity\r\n        }}\r\n    >\r\n        {isInScope && isRoaming && (\r\n            /* Emoji indicating whether the fish is attracted by the bait */\r\n            <div className={styles.likeStatus} style={{ opacity }}>\r\n                {likesBait ? <FaHeart className={styles.heart} />\r\n                : <FaTimes className={styles.times} />}\r\n            </div>\r\n        )}\r\n    </div>\r\n    <div\r\n        className={`\r\n            ${styles.detectionPath}\r\n            ${isStruggling ? styles.struggling : ''} \r\n        `}\r\n        style={{\r\n            left: detectionPath.from.x,\r\n            top: detectionPath.from.y,\r\n            width: detectionPath.to.x - detectionPath.from.x,\r\n            height: detectionPath.to.y - detectionPath.from.y,\r\n            opacity\r\n        }}\r\n    ></div>\r\n    {hookedFish && <div className={styles.focusBG}></div>}\r\n    </>\r\n}\r\n\r\nexport default React.memo(DefaultFish)","C:\\www\\react-fishing-game\\src\\components\\misc\\Modal\\index.tsx",["464","465","466"],"C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\FishArea\\index.tsx",["467"],"import React, { FC, useRef } from 'react'\r\nimport FishGroup from '../FishGroup'\r\nimport { randomIntFromInterval } from '../../../../utils/math'\r\nimport { Fish } from '../../../../interfaces/fishes'\r\nimport { Path } from '../../../../interfaces/position'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\ninterface FishEntryProps {\r\n    size: number[],\r\n    strength: number[],\r\n    [key: string]: any\r\n}\r\n\r\ninterface FishEntry {\r\n    amount: number,\r\n    component: any,\r\n    fish: Fish,\r\n    props: any\r\n}\r\n\r\ninterface Props {\r\n    path: Path,\r\n    fishes: FishEntry[],\r\n}\r\n\r\nconst FishArea: FC<Props> = ({ path, fishes }) => {\r\n    const fishGroupID = useRef<string>(uuid())\r\n\r\n    return <FishGroup groupID={fishGroupID.current} path={path} render={groupProps => {\r\n        return (\r\n         /* Pass props to each fish */\r\n        fishes\r\n        .map((fishEntry: FishEntry) => {\r\n            const { amount, fish, props } = fishEntry\r\n            const Fish: any = fishEntry.component\r\n            // Render \"amount\" times the provided component\r\n            let result = []\r\n            for (let i = 0; i < amount; i++) {\r\n                const fishID = uuid()\r\n\r\n                result.push(\r\n                    <Fish\r\n                        key={fishID}\r\n                        fishID={fishID}\r\n                        fish={fish}\r\n                        groupID={fishGroupID.current}\r\n                        {...props}\r\n                        {...groupProps}\r\n                        area={groupProps.path}\r\n                        // Generate random props for a unique fish\r\n                        size={randomIntFromInterval(props.size[0], props.size[1])}\r\n                        strength={randomIntFromInterval(props.strength[0], props.strength[1])}\r\n                     />\r\n                )\r\n            }\r\n            return result\r\n        })\r\n        .flat()\r\n    )}} />\r\n}\r\n\r\nexport default React.memo(FishArea)","C:\\www\\react-fishing-game\\src\\components\\Game\\areas\\FishGroup\\index.tsx",["468"],"import React, { ReactNode, Fragment, useEffect, useState, useRef, useMemo } from 'react'\r\nimport { Path } from '../../../../interfaces/position'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { useSelector } from 'react-redux'\r\nimport { hookedFishSelector } from '../../../../store/selectors/fishing'\r\n\r\ninterface Props {\r\n    groupID: string,\r\n    path: Path,\r\n    render?: (Path) => ReactNode\r\n}\r\n\r\nconst FishGroup = ({ groupID, path, render }) => {\r\n    const [isGroupVisible, setIsGroupVisible] = useState<boolean>(false)\r\n    const groupRef = useRef<HTMLDivElement>(null)\r\n\r\n    // Redux\r\n    const hookedFish = useSelector(hookedFishSelector)\r\n\r\n    // Use intersection observer API to render fishes only if their area is in viewport\r\n    useEffect(() => {\r\n        const options: any = {\r\n            root: null,\r\n            rootMargin: '0px',\r\n            threshold: 0.1\r\n        }\r\n        const observer: IntersectionObserver = new IntersectionObserver((entries, observer) => {\r\n            const group = entries[0]\r\n            group.isIntersecting ? setIsGroupVisible(true) : setIsGroupVisible(false)\r\n        }, options)\r\n\r\n        if (groupRef.current) observer.observe(groupRef.current)\r\n\r\n        return () => observer.disconnect()\r\n    }, [])\r\n\r\n    // Decide whether to render fishes\r\n    const mustRender = useMemo((): boolean => {\r\n        if (!hookedFish) return isGroupVisible\r\n\r\n        // If fish gets hooked, render it no matter if its area is outside of viewport\r\n        return hookedFish.groupID === groupID\r\n    }, [isGroupVisible, hookedFish, groupID])\r\n\r\n    // Use a ref to prevent rerendering of fishes, generating a new uuid for hooked fish\r\n    const renderRef = useRef<any>(render({ path }))\r\n\r\n    return <>\r\n        <div\r\n            ref={groupRef}\r\n            className={styles.fishGroup}\r\n            style={{\r\n                left: path.from.x,\r\n                top: path.from.y,\r\n                width: path.to.x - path.from.x,\r\n                height: path.to.y - path.from.y\r\n            }}\r\n        ></div>\r\n    {mustRender && renderRef.current}\r\n    </>\r\n}\r\n\r\nexport default React.memo(FishGroup)","C:\\www\\react-fishing-game\\src\\interfaces\\position.ts",[],"C:\\www\\react-fishing-game\\src\\hooks\\useLazyAudio\\index.ts",["469","470","471"],"// Returns dynamically imported, memoized audio\r\nimport { useMemo } from 'react'\r\n\r\ninterface AudioOptions {\r\n    src: string,\r\n    [key: string]: any\r\n}\r\n\r\nexport default (\r\n    { src = '', ...rest }: AudioOptions,\r\n    deps: any[] = []\r\n): HTMLAudioElement => useMemo(\r\n    (): HTMLAudioElement => { \r\n        const audio = new Audio();\r\n\r\n        // Dynamically import audio file\r\n        (async () => {\r\n            const module = await import(`../../assets/audio/${src}`)\r\n            audio.src = module.default\r\n        })()\r\n\r\n        // Append other parameters to audio element\r\n        for (let param in rest) {\r\n            audio[param] = rest[param]\r\n        }\r\n\r\n        return audio\r\n    }, deps\r\n)","C:\\www\\react-fishing-game\\src\\utils\\tests\\time.test.ts",[],["472","473"],"C:\\www\\react-fishing-game\\src\\utils\\tests\\position.test.ts",["474"],"import {\r\n    pxToM, mToPx,\r\n    formatMeters,\r\n    getVectorLength,\r\n    getNextCoordinatesOfPath,\r\n    areCoordinatesInPath,\r\n    getAngleFromVerticalAxis\r\n} from '../position'\r\nimport { Path, Coordinates } from '../../interfaces/position'\r\n\r\ndescribe('position module', () => {\r\n    test('should convert distance symetrically', () => {\r\n        const testValue = 5\r\n        expect(typeof mToPx(testValue) === 'number').toBe(true)\r\n        expect(typeof pxToM(testValue) === 'number').toBe(true)\r\n        expect(mToPx(pxToM(testValue))).toBe(testValue)\r\n    })\r\n\r\n    test('formatMeters', () => {\r\n        expect(formatMeters(0)).toBe('0cm')\r\n        expect(formatMeters(.99)).toBe('99cm')\r\n        expect(formatMeters(1)).toBe('1m')\r\n        expect(formatMeters(1.01)).toBe('1.01m')\r\n        expect(formatMeters(-.5)).toBe('-50cm')\r\n    })\r\n\r\n    test('getVectorLength', () => {\r\n        // Distance should be 0 when from and to are the same coordinates\r\n        const fromEqualsTo: Path = {\r\n            from: { x: 322, y: 185 },\r\n            to: { x: 322, y: 185 }\r\n        }\r\n        expect(getVectorLength(fromEqualsTo)).toBe(0)\r\n\r\n        // Test typical output\r\n        const typicalPath: Path = {from: {x: 100, y: 100}, to: {x: 200, y: 200}}\r\n        const typicalOutput: number = getVectorLength(typicalPath)\r\n        expect(typeof typicalOutput === 'number').toBe(true)\r\n        expect(typicalOutput).toBe(141.4213562373095)\r\n\r\n        // Value should be absolute\r\n        const upVector: Path = {\r\n            from: {x: 0, y: 0},\r\n            to: {x: 0, y: -100}\r\n        }\r\n        const downVector: Path = {\r\n            from: {x: 0, y: 0},\r\n            to: {x: 0, y: 100}\r\n        }\r\n        expect(getVectorLength(upVector)).toBe(getVectorLength(downVector))\r\n    })\r\n\r\n    test('getNextCoordinatesOfPath', () => {\r\n        // If hypotenuse length is 0, next coordinates are current\r\n        expect(getNextCoordinatesOfPath(90, 0)).toStrictEqual({ x: 0, y: 0 })\r\n\r\n        // Test typical output\r\n        expect(getNextCoordinatesOfPath(15, 100000000000000000))\r\n        .toStrictEqual({x: 25881904510252070, y: 96592582628906830})\r\n    })\r\n\r\n    test('areCoordinatesInPath', () => {\r\n        // Coordinates are outside\r\n        expect(\r\n            areCoordinatesInPath(\r\n                { x: 0, y: 0 },\r\n                {\r\n                    from: { x: 10, y: 10 },\r\n                    to: { x: 20, y: 20 }\r\n                }\r\n            )\r\n        ).toBe(false)\r\n\r\n        // Coordinates are inside\r\n        expect(\r\n            areCoordinatesInPath(\r\n                { x: 0, y: 0 },\r\n                {\r\n                    from: { x: -10, y: -10 },\r\n                    to: { x: 10, y: 10 }\r\n                }\r\n            )\r\n        ).toBe(true)\r\n    })\r\n\r\n    test('getAngleFromVerticalAxis', () => {\r\n        // Angle should be 0 if vector is vertical\r\n        expect(getAngleFromVerticalAxis({\r\n            from: { x: 0, y: 0 },\r\n            to: { x: 0, y: 100 }\r\n        })).toBe(0)\r\n        expect(getAngleFromVerticalAxis({\r\n            from: { x: 0, y: 0 },\r\n            to: { x: 0, y: -100 }\r\n        })).toBe(0)\r\n        expect(getAngleFromVerticalAxis({\r\n            from: { x: 100, y: 0 },\r\n            to: { x: 100, y: 100 }\r\n        })).toBe(0)\r\n\r\n        // Test typical positive vector\r\n        const typicalPosVector = {\r\n            from: { x: 40, y: 20 },\r\n            to: { x: 120, y: 50 }\r\n        }\r\n        expect(\r\n            getAngleFromVerticalAxis(typicalPosVector)\r\n            .toPrecision(4)\r\n        ).toBe('1.212')\r\n\r\n        // Test typical negative vector\r\n        const typicalNegVector = {\r\n            from: { x: 120, y: 20 },\r\n            to: { x: 40, y: 50 }\r\n        }\r\n        expect(\r\n            getAngleFromVerticalAxis(typicalNegVector)\r\n            .toPrecision(4)\r\n        ).toBe('-1.212')\r\n    })\r\n})","C:\\www\\react-fishing-game\\src\\utils\\tests\\math.test.ts",[],"C:\\www\\react-fishing-game\\src\\setupTests.ts",[],"C:\\www\\react-fishing-game\\src\\react-app-env.d.ts",[],"C:\\www\\react-fishing-game\\src\\interfaces\\items.ts",[],"C:\\www\\react-fishing-game\\src\\interfaces\\fishes.ts",["475"],"C:\\www\\react-fishing-game\\src\\interfaces\\evolution.ts",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\INITIAL.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\index.tsx",["476","477"],"import { FC, Dispatch, SetStateAction, memo, Component, lazy, Suspense, ReactNode } from 'react'\r\nimport { TutorialEntry } from '../../../interfaces/game'\r\nimport { WaveSpinnerLoading } from '../../misc/Spinners/Wave'\r\nimport modalStyles from './styles/modal.module.sass'\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { tutorialEntrySelectors } from '../../../store/selectors/game'\r\nimport { completeTutorialEntryAction } from '../../../store/actions/game'\r\n\r\n\r\n/*\r\n    Base tutorial component:\r\n    - renders a view and marks this tutorial entry as completed when finished\r\n    - passes common styles to all tutorial entries\r\n*/\r\nexport interface EntryProps {\r\n    onComplete: Dispatch<SetStateAction<TutorialEntry>>,\r\n    modalStyles: any\r\n}\r\n\r\nexport interface TutorialProps {\r\n    entry: TutorialEntry,\r\n    render: (renderOptions: EntryProps) => any,\r\n    afterComplete?: () => any // Do smth after tutorial entry has been completed\r\n}\r\n\r\nconst Tutorial: FC<TutorialProps> = ({ \r\n    entry, \r\n    render, \r\n    afterComplete \r\n}) => {\r\n    const dispatch = useDispatch()\r\n    const onComplete = () => {\r\n        dispatch(completeTutorialEntryAction(entry))\r\n        afterComplete && afterComplete()\r\n    }\r\n\r\n    return render({ onComplete, modalStyles })\r\n}\r\n\r\n\r\n/* \r\n    LoadTutorial component: checks if tutorial entry is already completed;\r\n    if not, lazy loads and renders tutorial component \r\n*/\r\ninterface LoadTutorialProps {\r\n    entry: TutorialEntry,\r\n    dependencies?: TutorialEntry[],\r\n    fallback?: ReactNode, // Component to display while Tutorial is loading. Defaults to spinner\r\n    onLoad?: () => any, // Do smth when tutorial has been loaded\r\n    afterComplete?: () => any // Do smth after tutorial entry has been completed\r\n}\r\nexport const LoadTutorial: FC<LoadTutorialProps> = memo(({ entry, dependencies = [], fallback, onLoad, afterComplete }) => {\r\n    const isCompleted: boolean = useSelector(tutorialEntrySelectors[entry])\r\n    const depCompletionState: Array<boolean|undefined> = useSelector(\r\n        state => dependencies.map((dep: TutorialEntry): (boolean|undefined) => state.game.tutorial[dep])\r\n    )\r\n    \r\n    // Check if target entry is completed already\r\n    if (isCompleted || typeof isCompleted === 'undefined') return null\r\n\r\n    // Check if all dependency entries are completed\r\n    const isAnyDepMissing = depCompletionState.some((state: (boolean|undefined)) => state !== true)\r\n    if (isAnyDepMissing) return null\r\n\r\n    // Tutorial entry is not completed yet: load tutorial component\r\n    const Tuto = lazy(() => {\r\n        const promise = import(`./${entry}`)\r\n        promise.then(() => onLoad && onLoad()) // Do smth\r\n        return promise\r\n    })\r\n\r\n    return <LoadTutorialErrBoundary>\r\n        <Suspense fallback={typeof fallback === 'undefined' ? <WaveSpinnerLoading /> : fallback}>\r\n            <Tuto afterComplete={afterComplete} />\r\n        </Suspense>\r\n    </LoadTutorialErrBoundary>\r\n})\r\n\r\nclass LoadTutorialErrBoundary extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n    }\r\n    state = { hasError: false }\r\n    componentDidCatch () {\r\n        this.state.hasError = true\r\n    }\r\n    render () {\r\n        if (this.state.hasError) return null\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\nexport default Tutorial","C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\index.test.tsx",[],["478","479"],"C:\\www\\react-fishing-game\\src\\components\\misc\\Slider\\index.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\BAG.tsx",["480","481"],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\THROW_LINE.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\Game\\tutorial\\THROWN.tsx",[],"C:\\www\\react-fishing-game\\src\\components\\misc\\Spinners\\Wave\\index.tsx",[],{"ruleId":"482","replacedBy":"483"},{"ruleId":"484","replacedBy":"485"},{"ruleId":"482","replacedBy":"483"},{"ruleId":"484","replacedBy":"485"},{"ruleId":"486","severity":1,"message":"487","line":86,"column":8,"nodeType":"488","endLine":86,"endColumn":22,"suggestions":"489"},{"ruleId":"486","severity":1,"message":"490","line":137,"column":8,"nodeType":"488","endLine":137,"endColumn":36,"suggestions":"491"},{"ruleId":"486","severity":1,"message":"492","line":143,"column":8,"nodeType":"488","endLine":143,"endColumn":10,"suggestions":"493"},{"ruleId":"494","severity":1,"message":"495","line":153,"column":17,"nodeType":"496","messageId":"497","endLine":153,"endColumn":23},{"ruleId":"486","severity":1,"message":"498","line":175,"column":9,"nodeType":"488","endLine":175,"endColumn":28,"suggestions":"499"},{"ruleId":"486","severity":1,"message":"500","line":197,"column":8,"nodeType":"488","endLine":197,"endColumn":64,"suggestions":"501"},{"ruleId":"486","severity":1,"message":"502","line":206,"column":12,"nodeType":"488","endLine":206,"endColumn":41,"suggestions":"503"},{"ruleId":"486","severity":1,"message":"504","line":217,"column":9,"nodeType":"488","endLine":217,"endColumn":44,"suggestions":"505"},{"ruleId":"486","severity":1,"message":"506","line":285,"column":8,"nodeType":"488","endLine":285,"endColumn":24,"suggestions":"507"},{"ruleId":"508","severity":1,"message":"509","line":304,"column":17,"nodeType":"510","messageId":"511","endLine":304,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":326,"column":17,"nodeType":"510","messageId":"511","endLine":326,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":341,"column":17,"nodeType":"510","messageId":"511","endLine":341,"endColumn":22},{"ruleId":"486","severity":1,"message":"512","line":360,"column":8,"nodeType":"488","endLine":374,"endColumn":6,"suggestions":"513"},{"ruleId":"486","severity":1,"message":"514","line":395,"column":8,"nodeType":"488","endLine":395,"endColumn":28,"suggestions":"515"},{"ruleId":"508","severity":1,"message":"509","line":508,"column":17,"nodeType":"510","messageId":"511","endLine":508,"endColumn":22},{"ruleId":"494","severity":1,"message":"516","line":1,"column":8,"nodeType":"496","messageId":"497","endLine":1,"endColumn":13},{"ruleId":"486","severity":1,"message":"517","line":42,"column":8,"nodeType":"488","endLine":42,"endColumn":10,"suggestions":"518"},{"ruleId":"508","severity":1,"message":"509","line":48,"column":17,"nodeType":"510","messageId":"511","endLine":48,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":51,"column":17,"nodeType":"510","messageId":"511","endLine":51,"endColumn":22},{"ruleId":"486","severity":1,"message":"519","line":63,"column":8,"nodeType":"488","endLine":63,"endColumn":49,"suggestions":"520"},{"ruleId":"486","severity":1,"message":"521","line":50,"column":12,"nodeType":"488","endLine":50,"endColumn":27,"suggestions":"522"},{"ruleId":"486","severity":1,"message":"521","line":56,"column":12,"nodeType":"488","endLine":56,"endColumn":27,"suggestions":"523"},{"ruleId":"486","severity":1,"message":"524","line":87,"column":12,"nodeType":"488","endLine":87,"endColumn":46,"suggestions":"525"},{"ruleId":"486","severity":1,"message":"526","line":96,"column":8,"nodeType":"488","endLine":96,"endColumn":10,"suggestions":"527"},{"ruleId":"486","severity":1,"message":"528","line":103,"column":8,"nodeType":"488","endLine":103,"endColumn":10,"suggestions":"529"},{"ruleId":"486","severity":1,"message":"530","line":115,"column":12,"nodeType":"488","endLine":115,"endColumn":69,"suggestions":"531"},{"ruleId":"532","severity":1,"message":"533","line":150,"column":17,"nodeType":"534","messageId":"535","endLine":152,"endColumn":26},{"ruleId":"486","severity":1,"message":"536","line":202,"column":26,"nodeType":"496","endLine":202,"endColumn":33},{"ruleId":"486","severity":1,"message":"537","line":207,"column":8,"nodeType":"488","endLine":207,"endColumn":58,"suggestions":"538"},{"ruleId":"494","severity":1,"message":"539","line":67,"column":23,"nodeType":"496","messageId":"497","endLine":67,"endColumn":35},{"ruleId":"486","severity":1,"message":"521","line":72,"column":86,"nodeType":"488","endLine":72,"endColumn":88,"suggestions":"540"},{"ruleId":"486","severity":1,"message":"541","line":97,"column":12,"nodeType":"488","endLine":97,"endColumn":27,"suggestions":"542"},{"ruleId":"486","severity":1,"message":"543","line":105,"column":8,"nodeType":"488","endLine":105,"endColumn":10,"suggestions":"544"},{"ruleId":"486","severity":1,"message":"528","line":108,"column":73,"nodeType":"488","endLine":108,"endColumn":75,"suggestions":"545"},{"ruleId":"486","severity":1,"message":"546","line":119,"column":12,"nodeType":"488","endLine":119,"endColumn":39,"suggestions":"547"},{"ruleId":"486","severity":1,"message":"548","line":200,"column":8,"nodeType":"488","endLine":200,"endColumn":86,"suggestions":"549"},{"ruleId":"486","severity":1,"message":"550","line":215,"column":12,"nodeType":"488","endLine":215,"endColumn":47,"suggestions":"551"},{"ruleId":"486","severity":1,"message":"552","line":363,"column":26,"nodeType":"496","endLine":363,"endColumn":33},{"ruleId":"486","severity":1,"message":"553","line":366,"column":8,"nodeType":"488","endLine":374,"endColumn":6,"suggestions":"554"},{"ruleId":"486","severity":1,"message":"555","line":443,"column":8,"nodeType":"488","endLine":443,"endColumn":31,"suggestions":"556"},{"ruleId":"486","severity":1,"message":"557","line":147,"column":44,"nodeType":"496","endLine":147,"endColumn":57},{"ruleId":"486","severity":1,"message":"558","line":208,"column":12,"nodeType":"488","endLine":208,"endColumn":51,"suggestions":"559"},{"ruleId":"486","severity":1,"message":"560","line":264,"column":8,"nodeType":"488","endLine":264,"endColumn":75,"suggestions":"561"},{"ruleId":"486","severity":1,"message":"562","line":273,"column":8,"nodeType":"488","endLine":273,"endColumn":25,"suggestions":"563"},{"ruleId":"486","severity":1,"message":"564","line":282,"column":8,"nodeType":"488","endLine":282,"endColumn":22,"suggestions":"565"},{"ruleId":"486","severity":1,"message":"566","line":304,"column":8,"nodeType":"488","endLine":304,"endColumn":21,"suggestions":"567"},{"ruleId":"486","severity":1,"message":"568","line":313,"column":12,"nodeType":"488","endLine":313,"endColumn":14,"suggestions":"569"},{"ruleId":"486","severity":1,"message":"570","line":337,"column":8,"nodeType":"488","endLine":337,"endColumn":10,"suggestions":"571"},{"ruleId":"508","severity":1,"message":"509","line":38,"column":17,"nodeType":"510","messageId":"511","endLine":38,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":41,"column":17,"nodeType":"510","messageId":"511","endLine":41,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":44,"column":17,"nodeType":"510","messageId":"511","endLine":44,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":47,"column":17,"nodeType":"510","messageId":"511","endLine":47,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":50,"column":17,"nodeType":"510","messageId":"511","endLine":50,"endColumn":22},{"ruleId":"486","severity":1,"message":"572","line":66,"column":8,"nodeType":"488","endLine":66,"endColumn":21,"suggestions":"573"},{"ruleId":"486","severity":1,"message":"574","line":76,"column":8,"nodeType":"488","endLine":76,"endColumn":18,"suggestions":"575"},{"ruleId":"508","severity":1,"message":"509","line":83,"column":17,"nodeType":"510","messageId":"511","endLine":83,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":86,"column":17,"nodeType":"510","messageId":"511","endLine":86,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":89,"column":17,"nodeType":"510","messageId":"511","endLine":89,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":92,"column":17,"nodeType":"510","messageId":"511","endLine":92,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":95,"column":17,"nodeType":"510","messageId":"511","endLine":95,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":105,"column":17,"nodeType":"510","messageId":"511","endLine":105,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":108,"column":17,"nodeType":"510","messageId":"511","endLine":108,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":111,"column":17,"nodeType":"510","messageId":"511","endLine":111,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":114,"column":17,"nodeType":"510","messageId":"511","endLine":114,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":117,"column":17,"nodeType":"510","messageId":"511","endLine":117,"endColumn":22},{"ruleId":"486","severity":1,"message":"576","line":54,"column":8,"nodeType":"488","endLine":54,"endColumn":10,"suggestions":"577"},{"ruleId":"486","severity":1,"message":"578","line":96,"column":12,"nodeType":"488","endLine":96,"endColumn":72,"suggestions":"579"},{"ruleId":"486","severity":1,"message":"528","line":104,"column":8,"nodeType":"488","endLine":104,"endColumn":10,"suggestions":"580"},{"ruleId":"486","severity":1,"message":"562","line":127,"column":8,"nodeType":"488","endLine":127,"endColumn":19,"suggestions":"581"},{"ruleId":"582","severity":1,"message":"583","line":22,"column":1,"nodeType":"584","endLine":32,"endColumn":2},{"ruleId":"508","severity":1,"message":"509","line":29,"column":13,"nodeType":"510","messageId":"511","endLine":29,"endColumn":18},{"ruleId":"582","severity":1,"message":"583","line":52,"column":1,"nodeType":"584","endLine":138,"endColumn":2},{"ruleId":"508","severity":1,"message":"509","line":56,"column":13,"nodeType":"510","messageId":"511","endLine":56,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":63,"column":13,"nodeType":"510","messageId":"511","endLine":63,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":66,"column":13,"nodeType":"510","messageId":"511","endLine":66,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":69,"column":13,"nodeType":"510","messageId":"511","endLine":69,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":97,"column":13,"nodeType":"510","messageId":"511","endLine":97,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":115,"column":13,"nodeType":"510","messageId":"511","endLine":115,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":123,"column":13,"nodeType":"510","messageId":"511","endLine":123,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":126,"column":13,"nodeType":"510","messageId":"511","endLine":126,"endColumn":18},{"ruleId":"494","severity":1,"message":"585","line":5,"column":10,"nodeType":"496","messageId":"497","endLine":5,"endColumn":14},{"ruleId":"582","severity":1,"message":"583","line":67,"column":1,"nodeType":"584","endLine":145,"endColumn":2},{"ruleId":"586","severity":1,"message":"587","line":82,"column":41,"nodeType":"588","messageId":"589","endLine":82,"endColumn":42,"fix":"590"},{"ruleId":"508","severity":1,"message":"509","line":109,"column":13,"nodeType":"510","messageId":"511","endLine":109,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":141,"column":13,"nodeType":"510","messageId":"511","endLine":141,"endColumn":18},{"ruleId":"582","severity":1,"message":"583","line":33,"column":1,"nodeType":"584","endLine":61,"endColumn":2},{"ruleId":"508","severity":1,"message":"509","line":37,"column":13,"nodeType":"510","messageId":"511","endLine":37,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":41,"column":13,"nodeType":"510","messageId":"511","endLine":41,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":44,"column":13,"nodeType":"510","messageId":"511","endLine":44,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":47,"column":13,"nodeType":"510","messageId":"511","endLine":47,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":50,"column":13,"nodeType":"510","messageId":"511","endLine":50,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":53,"column":13,"nodeType":"510","messageId":"511","endLine":53,"endColumn":18},{"ruleId":"508","severity":1,"message":"509","line":58,"column":13,"nodeType":"510","messageId":"511","endLine":58,"endColumn":18},{"ruleId":"486","severity":1,"message":"591","line":51,"column":8,"nodeType":"488","endLine":51,"endColumn":29,"suggestions":"592"},{"ruleId":"593","severity":1,"message":"594","line":60,"column":26,"nodeType":"595","messageId":"535","endLine":60,"endColumn":28},{"ruleId":"508","severity":1,"message":"509","line":99,"column":17,"nodeType":"510","messageId":"511","endLine":99,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":105,"column":17,"nodeType":"510","messageId":"511","endLine":105,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":111,"column":17,"nodeType":"510","messageId":"511","endLine":111,"endColumn":22},{"ruleId":"494","severity":1,"message":"596","line":9,"column":42,"nodeType":"496","messageId":"497","endLine":9,"endColumn":51},{"ruleId":"486","severity":1,"message":"597","line":42,"column":8,"nodeType":"488","endLine":42,"endColumn":33,"suggestions":"598"},{"ruleId":"508","severity":1,"message":"509","line":71,"column":17,"nodeType":"510","messageId":"511","endLine":71,"endColumn":22},{"ruleId":"508","severity":1,"message":"509","line":105,"column":17,"nodeType":"510","messageId":"511","endLine":105,"endColumn":22},{"ruleId":"486","severity":1,"message":"599","line":107,"column":8,"nodeType":"488","endLine":115,"endColumn":6,"suggestions":"600"},{"ruleId":"601","severity":1,"message":"602","line":13,"column":21,"nodeType":"603","endLine":13,"endColumn":36},{"ruleId":"601","severity":1,"message":"602","line":28,"column":33,"nodeType":"603","endLine":28,"endColumn":48},{"ruleId":"601","severity":1,"message":"602","line":43,"column":33,"nodeType":"603","endLine":43,"endColumn":48},{"ruleId":"601","severity":1,"message":"602","line":58,"column":33,"nodeType":"603","endLine":58,"endColumn":48},{"ruleId":"494","severity":1,"message":"604","line":1,"column":41,"nodeType":"496","messageId":"497","endLine":1,"endColumn":49},{"ruleId":"494","severity":1,"message":"605","line":1,"column":54,"nodeType":"496","messageId":"497","endLine":1,"endColumn":62},{"ruleId":"508","severity":1,"message":"509","line":54,"column":17,"nodeType":"510","messageId":"511","endLine":54,"endColumn":22},{"ruleId":"486","severity":1,"message":"606","line":57,"column":8,"nodeType":"488","endLine":57,"endColumn":33,"suggestions":"607"},{"ruleId":"486","severity":1,"message":"521","line":88,"column":132,"nodeType":"488","endLine":88,"endColumn":134,"suggestions":"608"},{"ruleId":"486","severity":1,"message":"521","line":89,"column":99,"nodeType":"488","endLine":89,"endColumn":101,"suggestions":"609"},{"ruleId":"486","severity":1,"message":"521","line":90,"column":94,"nodeType":"488","endLine":90,"endColumn":96,"suggestions":"610"},{"ruleId":"486","severity":1,"message":"521","line":91,"column":82,"nodeType":"488","endLine":91,"endColumn":84,"suggestions":"611"},{"ruleId":"486","severity":1,"message":"521","line":92,"column":88,"nodeType":"488","endLine":92,"endColumn":90,"suggestions":"612"},{"ruleId":"508","severity":1,"message":"509","line":102,"column":17,"nodeType":"510","messageId":"511","endLine":102,"endColumn":22},{"ruleId":"486","severity":1,"message":"606","line":105,"column":8,"nodeType":"488","endLine":105,"endColumn":33,"suggestions":"613"},{"ruleId":"486","severity":1,"message":"614","line":183,"column":8,"nodeType":"488","endLine":183,"endColumn":70,"suggestions":"615"},{"ruleId":"486","severity":1,"message":"616","line":198,"column":8,"nodeType":"488","endLine":198,"endColumn":24,"suggestions":"617"},{"ruleId":"486","severity":1,"message":"599","line":333,"column":8,"nodeType":"488","endLine":333,"endColumn":54,"suggestions":"618"},{"ruleId":"486","severity":1,"message":"619","line":65,"column":8,"nodeType":"488","endLine":65,"endColumn":21,"suggestions":"620"},{"ruleId":"486","severity":1,"message":"621","line":89,"column":8,"nodeType":"488","endLine":89,"endColumn":61,"suggestions":"622"},{"ruleId":"486","severity":1,"message":"623","line":166,"column":8,"nodeType":"488","endLine":166,"endColumn":60,"suggestions":"624"},{"ruleId":"486","severity":1,"message":"625","line":188,"column":12,"nodeType":"488","endLine":198,"endColumn":10,"suggestions":"626"},{"ruleId":"486","severity":1,"message":"619","line":206,"column":8,"nodeType":"488","endLine":206,"endColumn":10,"suggestions":"627"},{"ruleId":"494","severity":1,"message":"628","line":244,"column":11,"nodeType":"496","messageId":"497","endLine":244,"endColumn":27},{"ruleId":"629","severity":1,"message":"630","line":59,"column":61,"nodeType":"631","messageId":"632","endLine":59,"endColumn":63},{"ruleId":"486","severity":1,"message":"619","line":83,"column":8,"nodeType":"488","endLine":83,"endColumn":21,"suggestions":"633"},{"ruleId":"486","severity":1,"message":"634","line":108,"column":8,"nodeType":"488","endLine":108,"endColumn":48,"suggestions":"635"},{"ruleId":"486","severity":1,"message":"623","line":187,"column":8,"nodeType":"488","endLine":187,"endColumn":59,"suggestions":"636"},{"ruleId":"486","severity":1,"message":"637","line":210,"column":12,"nodeType":"488","endLine":219,"endColumn":10,"suggestions":"638"},{"ruleId":"486","severity":1,"message":"619","line":227,"column":8,"nodeType":"488","endLine":227,"endColumn":10,"suggestions":"639"},{"ruleId":"486","severity":1,"message":"616","line":242,"column":8,"nodeType":"488","endLine":242,"endColumn":24,"suggestions":"640"},{"ruleId":"494","severity":1,"message":"628","line":290,"column":11,"nodeType":"496","messageId":"497","endLine":290,"endColumn":27},{"ruleId":"494","severity":1,"message":"641","line":80,"column":11,"nodeType":"496","messageId":"497","endLine":80,"endColumn":19},{"ruleId":"486","severity":1,"message":"521","line":85,"column":109,"nodeType":"488","endLine":85,"endColumn":111,"suggestions":"642"},{"ruleId":"486","severity":1,"message":"521","line":86,"column":102,"nodeType":"488","endLine":86,"endColumn":104,"suggestions":"643"},{"ruleId":"486","severity":1,"message":"521","line":87,"column":74,"nodeType":"488","endLine":87,"endColumn":76,"suggestions":"644"},{"ruleId":"486","severity":1,"message":"521","line":88,"column":119,"nodeType":"488","endLine":88,"endColumn":121,"suggestions":"645"},{"ruleId":"486","severity":1,"message":"521","line":89,"column":117,"nodeType":"488","endLine":89,"endColumn":119,"suggestions":"646"},{"ruleId":"486","severity":1,"message":"647","line":166,"column":12,"nodeType":"488","endLine":166,"endColumn":42,"suggestions":"648"},{"ruleId":"486","severity":1,"message":"649","line":216,"column":12,"nodeType":"488","endLine":216,"endColumn":47,"suggestions":"650"},{"ruleId":"486","severity":1,"message":"651","line":236,"column":12,"nodeType":"488","endLine":236,"endColumn":95,"suggestions":"652"},{"ruleId":"486","severity":1,"message":"653","line":390,"column":8,"nodeType":"488","endLine":390,"endColumn":104,"suggestions":"654"},{"ruleId":"494","severity":1,"message":"655","line":32,"column":11,"nodeType":"496","messageId":"497","endLine":32,"endColumn":23},{"ruleId":"486","severity":1,"message":"656","line":42,"column":12,"nodeType":"488","endLine":42,"endColumn":21,"suggestions":"657"},{"ruleId":"486","severity":1,"message":"658","line":59,"column":8,"nodeType":"488","endLine":59,"endColumn":29,"suggestions":"659"},{"ruleId":"494","severity":1,"message":"660","line":8,"column":11,"nodeType":"496","messageId":"497","endLine":8,"endColumn":25},{"ruleId":"494","severity":1,"message":"661","line":9,"column":11,"nodeType":"496","messageId":"497","endLine":9,"endColumn":16},{"ruleId":"582","severity":1,"message":"662","line":9,"column":1,"nodeType":"584","endLine":29,"endColumn":2},{"ruleId":"486","severity":1,"message":"663","line":28,"column":8,"nodeType":"496","endLine":28,"endColumn":12},{"ruleId":"486","severity":1,"message":"664","line":28,"column":8,"nodeType":"496","endLine":28,"endColumn":12,"suggestions":"665"},{"ruleId":"482","replacedBy":"666"},{"ruleId":"484","replacedBy":"667"},{"ruleId":"494","severity":1,"message":"668","line":9,"column":16,"nodeType":"496","messageId":"497","endLine":9,"endColumn":27},{"ruleId":"494","severity":1,"message":"585","line":1,"column":10,"nodeType":"496","messageId":"497","endLine":1,"endColumn":14},{"ruleId":"669","severity":1,"message":"670","line":81,"column":5,"nodeType":"671","messageId":"672","endLine":83,"endColumn":6},{"ruleId":"673","severity":1,"message":"674","line":86,"column":9,"nodeType":"675","endLine":86,"endColumn":19},{"ruleId":"482","replacedBy":"483"},{"ruleId":"484","replacedBy":"485"},{"ruleId":"494","severity":1,"message":"676","line":1,"column":10,"nodeType":"496","messageId":"497","endLine":1,"endColumn":19},{"ruleId":"494","severity":1,"message":"677","line":1,"column":21,"nodeType":"496","messageId":"497","endLine":1,"endColumn":27},"no-native-reassign",["678"],"no-negated-in-lhs",["679"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'creekBE'. Either include it or remove the dependency array.","ArrayExpression",["680"],"React Hook useEffect has a missing dependency: 'backgroundMusic'. Either include it or remove the dependency array.",["681"],"React Hook useEffect has a missing dependency: 'spendOneMinute'. Either include it or remove the dependency array.",["682"],"@typescript-eslint/no-unused-vars","'setMap' is assigned a value but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'rodDimensions.height'. Either include it or remove the dependency array.",["683"],"React Hook useMemo has an unnecessary dependency: 'playerCoordinates'. Either exclude it or remove the dependency array.",["684"],"React Hook useMemo has a missing dependency: 'map.shorePath.to.y'. Either include it or remove the dependency array.",["685"],"React Hook useMemo has missing dependencies: 'rodAngle' and 'rodDimensions.height'. Either include them or remove the dependency array.",["686"],"React Hook useEffect has a missing dependency: 'updateGlobalPositionState'. Either include it or remove the dependency array. If 'updateGlobalPositionState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["687"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useMemo has missing dependencies: 'isBarometerVisible', 'scrollToBait', and 'scrollToPlayer'. Either include them or remove the dependency array.",["688"],"React Hook useEffect has missing dependencies: 'map.shorePath.from.x', 'map.shorePath.from.y', 'map.shorePath.to.x', and 'map.shorePath.to.y'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMushroom' needs the current value of 'map.shorePath.from.x'.",["689"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'closeMenu'. Either include it or remove the dependency array. If 'closeMenu' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["690"],"React Hook useMemo has missing dependencies: 'lineStepMatches.steps', 'lineStepMatches.subSteps', and 'nextStep'. Either include them or remove the dependency array.",["691"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["692"],["693"],"React Hook useCallback has missing dependencies: 'isPlayerMoving', 'map.width', 'scrollToPlayer', and 'setPlayerCoordinates'. Either include them or remove the dependency array. If 'scrollToPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["694"],"React Hook useLayoutEffect has missing dependencies: 'scrollToPlayer', 'setBaitOffset', 'setBaitType', and 'setRodAngle'. Either include them or remove the dependency array. If 'scrollToPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["695"],"React Hook useEffect has missing dependencies: 'isBarometerVisible' and 'setIsBarometerVisible'. Either include them or remove the dependency array. If 'setIsBarometerVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["696"],"React Hook useCallback has a missing dependency: 'setProcess'. Either include it or remove the dependency array. If 'setProcess' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["697"],"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","The ref value 'shoreRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'shoreRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'movePlayer', 'shoreRef', and 'throwLine'. Either include them or remove the dependency array.",["698"],"'setHasThrown' is assigned a value but never used.",["699"],"React Hook useCallback has missing dependencies: 'setBaitOffset', 'setBaitType', 'setProcess', 'setRodAngle', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["700"],"React Hook useEffect has missing dependencies: 'scrollToPlayer', 'setBaitOffset', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["701"],["702"],"React Hook useCallback has missing dependencies: 'setBaitOffset', 'setRodAngle', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["703"],"React Hook useEffect has missing dependencies: 'badassSE', 'baitDropSE', 'baitRef', 'emitBaitFallEvent', 'lakeRef', 'scrollToBait', 'setBaitOffset', 'setBaitType', 'setIsBarometerVisible', and 'setProcess'. Either include them or remove the dependency array. If 'setIsBarometerVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["704"],"React Hook useCallback has a missing dependency: 'setBaitOffset'. Either include it or remove the dependency array. If 'setBaitOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["705"],"The ref value 'gaugeRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'gaugeRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'changeRodDirection' and 'goBack'. Either include them or remove the dependency array.",["706"],"React Hook useMemo has an unnecessary dependency: 'gaugeValueRef.current'. Either exclude it or remove the dependency array. Mutable values like 'gaugeValueRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["707"],"Assignments to the 'recoverTensionValue' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useCallback has missing dependencies: 'baitOffsetLimit.to.y', 'scrollToBait', and 'setRodAngle'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["708"],"React Hook useEffect has a missing dependency: 'incrementLineTension'. Either include it or remove the dependency array. If 'incrementLineTension' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["709"],"React Hook useEffect has a missing dependency: 'reelingSE'. Either include it or remove the dependency array.",["710"],"React Hook useEffect has missing dependencies: 'catchNewFish', 'goBack', 'hookedFish.fish', and 'setGameProcess'. Either include them or remove the dependency array. If 'catchNewFish' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["711"],"React Hook useEffect has missing dependencies: 'goBack', 'lineBreakSE', 'loseLineBreak', 'loseLineLoose', and 'setGameProcess'. Either include them or remove the dependency array. If 'setGameProcess' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["712"],"React Hook useCallback has missing dependencies: 'reelingSE', 'setGameProcess', 'setHookedFish', and 'setLineTension'. Either include them or remove the dependency array. If 'setLineTension' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["713"],"React Hook useEffect has missing dependencies: 'hookedFish.fish' and 'setIsFishPulling'. Either include them or remove the dependency array. If 'setIsFishPulling' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["714"],"React Hook useEffect has a missing dependency: 'SEPath'. Either include it or remove the dependency array.",["715"],"React Hook useEffect has missing dependencies: 'destroyNotification' and 'transition'. Either include them or remove the dependency array.",["716"],"React Hook useEffect has a missing dependency: 'makeBaitAvailable'. Either include it or remove the dependency array.",["717"],"React Hook useCallback has missing dependencies: 'baitOffset.x', 'baitOffset.y', 'scrollToBait', 'setBaitOffset', and 'setRodAngle'. Either include them or remove the dependency array. If 'setBaitOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["718"],["719"],["720"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Item' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"721","text":"722"},"React Hook useMemo has a missing dependency: 'sellerPhrase.length'. Either include it or remove the dependency array.",["723"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'GiFishing' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'allCategories'. Either exclude it or remove the dependency array. Outer scope values like 'allCategories' aren't valid dependencies because mutating them doesn't re-render the component.",["724"],"React Hook useMemo has a missing dependency: 'setCurrentSection'. Either include it or remove the dependency array. If 'setCurrentSection' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["725"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useState' is defined but never used.","'Fragment' is defined but never used.","React Hook useMemo has a missing dependency: 'isEquipment'. Either include it or remove the dependency array.",["726"],["727"],["728"],["729"],["730"],["731"],["732"],"React Hook useMemo has missing dependencies: 'equipItem', 'isEquipment', and 'isEquipped'. Either include them or remove the dependency array.",["733"],"React Hook useMemo has a missing dependency: 'category'. Either include it or remove the dependency array. Outer scope values like 'rodLevels' aren't valid dependencies because mutating them doesn't re-render the component.",["734"],["735"],"React Hook useEffect has a missing dependency: 'setSellerPhrase'. Either include it or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["736"],"React Hook useMemo has missing dependencies: 'saleSE' and 'setSellerPhrase'. Either include them or remove the dependency array.",["737"],"React Hook useMemo has a missing dependency: 'setSellerPhrase'. Either include it or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["738"],"React Hook useCallback has missing dependencies: 'setFocusedItem' and 'setSellerPhrase'. Either include them or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["739"],["740"],"'ForSaleItemProps' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["741"],"React Hook useMemo has missing dependencies: 'inventoryEntries', 'purchaseSE', 'setSellerPhrase', and 'thankYouSE'. Either include them or remove the dependency array.",["742"],["743"],"React Hook useCallback has missing dependencies: 'setSellerPhrase' and 'thankYouSE'. Either include them or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["744"],["745"],["746"],"'map' is assigned a value but never used.",["747"],["748"],["749"],["750"],["751"],"React Hook useCallback has an unnecessary dependency: 'opacity'. Either exclude it or remove the dependency array.",["752"],"React Hook useCallback has missing dependencies: 'baitFood._id', 'baitFood.category', 'loseBait', 'setGameNotification', and 'setGameProcess'. Either include them or remove the dependency array.",["753"],"React Hook useCallback has unnecessary dependencies: 'fishDirection', 'isInScope', and 'likesBait'. Either exclude them or remove the dependency array.",["754"],"React Hook useEffect has missing dependencies: 'fish', 'isBoss', 'makeBaitAvailable', 'pullChance', 'roamingInterval', 'setGameNotification', 'setGameProcess', and 'setHookedFish'. Either include them or remove the dependency array.",["755"],"'containerRef' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'transition'. Either include it or remove the dependency array.",["756"],"React Hook useLayoutEffect has a missing dependency: 'transition'. Either include it or remove the dependency array.",["757"],"'FishEntryProps' is defined but never used.","'Props' is defined but never used.","Assign arrow function to a variable before exporting as module default","React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useMemo has missing dependencies: 'rest' and 'src'. Either include them or remove the dependency array.",["758"],["678"],["679"],"'Coordinates' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'useEffect' is defined but never used.","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"759","fix":"760"},{"desc":"761","fix":"762"},{"desc":"763","fix":"764"},{"desc":"765","fix":"766"},{"desc":"767","fix":"768"},{"desc":"769","fix":"770"},{"desc":"771","fix":"772"},{"desc":"773","fix":"774"},{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"781","fix":"782"},{"desc":"783","fix":"784"},{"desc":"783","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},{"desc":"796","fix":"797"},{"desc":"798","fix":"799"},{"desc":"800","fix":"801"},{"desc":"790","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"807","fix":"808"},{"desc":"809","fix":"810"},{"desc":"811","fix":"812"},{"desc":"813","fix":"814"},{"desc":"815","fix":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},{"desc":"821","fix":"822"},{"desc":"823","fix":"824"},{"desc":"825","fix":"826"},{"desc":"827","fix":"828"},{"desc":"829","fix":"830"},{"desc":"831","fix":"832"},{"desc":"833","fix":"834"},{"desc":"790","fix":"835"},{"desc":"836","fix":"837"},[2090,2091],"",{"desc":"838","fix":"839"},{"desc":"840","fix":"841"},{"desc":"842","fix":"843"},{"desc":"844","fix":"845"},{"desc":"796","fix":"846"},{"desc":"796","fix":"847"},{"desc":"796","fix":"848"},{"desc":"796","fix":"849"},{"desc":"796","fix":"850"},{"desc":"844","fix":"851"},{"desc":"852","fix":"853"},{"desc":"854","fix":"855"},{"desc":"856","fix":"857"},{"desc":"858","fix":"859"},{"desc":"860","fix":"861"},{"desc":"862","fix":"863"},{"desc":"864","fix":"865"},{"desc":"866","fix":"867"},{"desc":"858","fix":"868"},{"desc":"869","fix":"870"},{"desc":"871","fix":"872"},{"desc":"873","fix":"874"},{"desc":"866","fix":"875"},{"desc":"854","fix":"876"},{"desc":"796","fix":"877"},{"desc":"796","fix":"878"},{"desc":"796","fix":"879"},{"desc":"796","fix":"880"},{"desc":"796","fix":"881"},{"desc":"882","fix":"883"},{"desc":"884","fix":"885"},{"desc":"886","fix":"887"},{"desc":"888","fix":"889"},{"desc":"890","fix":"891"},{"desc":"892","fix":"893"},{"desc":"894","fix":"895"},"Update the dependencies array to be: [audioEnabled, creekBE]",{"range":"896","text":"897"},"Update the dependencies array to be: [audioEnabled, backgroundMusic, isBGMEnabled]",{"range":"898","text":"899"},"Update the dependencies array to be: [spendOneMinute]",{"range":"900","text":"901"},"Update the dependencies array to be: [playerCoordinates.width, playerCoordinates.x, playerCoordinates.y, rodDimensions.height]",{"range":"902","text":"903"},"Update the dependencies array to be: [map, baitCoordinates, rodDimensions]",{"range":"904","text":"905"},"Update the dependencies array to be: [baitCoordinates.x, baitCoordinates.y, baitOffset.x, baitOffset.y, map.shorePath.to.y]",{"range":"906","text":"907"},"Update the dependencies array to be: [lineOrigin.x, lineOrigin.y, baitOffset.x, baitOffset.y, rodOffset.x, rodOffset.y, rodAngle, rodDimensions.height]",{"range":"908","text":"909"},"Update the dependencies array to be: [baitLakeCoords, updateGlobalPositionState]",{"range":"910","text":"911"},"Update the dependencies array to be: [process, setProcess, playerCoordinates, scrollToPlayer, map, isBarometerVisible, scrollToBait, rodAngle, rodOffset, baitOffset, baitOffsetLimit, baitLakeCoords, rodLevel, baitDistance, lineLength]",{"range":"912","text":"913"},"Update the dependencies array to be: [isPlayerOutOfBaits, map.shorePath.from.x, map.shorePath.from.y, map.shorePath.to.x, map.shorePath.to.y]",{"range":"914","text":"915"},"Update the dependencies array to be: [closeMenu]",{"range":"916","text":"917"},"Update the dependencies array to be: [nextStep, baitDistance, lineStepMatches.steps, lineStepMatches.subSteps]",{"range":"918","text":"919"},"Update the dependencies array to be: [dispatch, processFrozen]",{"range":"920","text":"921"},{"range":"922","text":"921"},"Update the dependencies array to be: [isPlayerMoving, map.width, playerCoordinates, processFrozen, scrollToPlayer, setPlayerCoordinates]",{"range":"923","text":"924"},"Update the dependencies array to be: [scrollToPlayer, setBaitOffset, setBaitType, setRodAngle]",{"range":"925","text":"926"},"Update the dependencies array to be: [isBarometerVisible, setIsBarometerVisible]",{"range":"927","text":"928"},"Update the dependencies array to be: [isPlayerMoving, isMainMenuOpen, baitFood, processFrozen, setProcess]",{"range":"929","text":"930"},"Update the dependencies array to be: [playerCoordinates, isMainMenuOpen, processFrozen, movePlayer, throwLine, shoreRef]",{"range":"931","text":"932"},"Update the dependencies array to be: [dispatch]",{"range":"933","text":"934"},"Update the dependencies array to be: [processFrozen, setBaitOffset, setBaitType, setProcess, setRodAngle, setRodOffset]",{"range":"935","text":"936"},"Update the dependencies array to be: [scrollToPlayer, setBaitOffset, setRodOffset]",{"range":"937","text":"938"},{"range":"939","text":"928"},"Update the dependencies array to be: [isThrowing, processFrozen, setBaitOffset, setRodAngle, setRodOffset]",{"range":"940","text":"941"},"Update the dependencies array to be: [isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords, setIsBarometerVisible, setBaitOffset, scrollToBait, emitBaitFallEvent, setBaitType, baitRef, lakeRef, setProcess, baitDropSE, badassSE]",{"range":"942","text":"943"},"Update the dependencies array to be: [processFrozen, rodLevel.maxLength, setBaitOffset, rodAngle]",{"range":"944","text":"945"},"Update the dependencies array to be: [isPreparingThrow, spaceFired, rodAngle, rodOffset, confirmThrow, isThrowing, processFrozen, goBack, changeRodDirection]",{"range":"946","text":"947"},"Update the dependencies array to be: []",{"range":"948","text":"949"},"Update the dependencies array to be: [baitOffset, lineLength, setBaitOffset, setRodAngle, scrollToBait, baitOffsetLimit.to.y]",{"range":"950","text":"951"},"Update the dependencies array to be: [isFishPulling, isPlayerReeling, strengthRatio, fishRodLevel, move, incrementLineTension]",{"range":"952","text":"953"},"Update the dependencies array to be: [isPlayerReeling, reelingSE]",{"range":"954","text":"955"},"Update the dependencies array to be: [baitDistance, catchNewFish, goBack, hookedFish.fish, setGameProcess]",{"range":"956","text":"957"},"Update the dependencies array to be: [goBack, lineBreakSE, lineTension, loseLineBreak, loseLineLoose, setGameProcess]",{"range":"958","text":"959"},"Update the dependencies array to be: [reelingSE, setGameProcess, setHookedFish, setLineTension]",{"range":"960","text":"961"},"Update the dependencies array to be: [hookedFish.fish, setIsFishPulling]",{"range":"962","text":"963"},"Update the dependencies array to be: [SEPath, soundEffect]",{"range":"964","text":"965"},"Update the dependencies array to be: [destroyNotification, duration, transition]",{"range":"966","text":"967"},"Update the dependencies array to be: [makeBaitAvailable]",{"range":"968","text":"969"},"Update the dependencies array to be: [processFrozen, baitDistance, isReeling, baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait, goBack]",{"range":"970","text":"971"},{"range":"972","text":"928"},"Update the dependencies array to be: [isReeling, reelingSE]",{"range":"973","text":"974"},"Update the dependencies array to be: [sellerPhrase.length, sellerPhraseSpelled]",{"range":"975","text":"976"},"Update the dependencies array to be: [baitFood]",{"range":"977","text":"978"},"Update the dependencies array to be: [currentStatusSectionID, doubloons, gameTimeSpentFormatted, fishrodLevel._id, baitFood, baitColor, removeBait, setCurrentSection]",{"range":"979","text":"980"},"Update the dependencies array to be: [isEquipment, category, rodLevel._id, _id]",{"range":"981","text":"982"},{"range":"983","text":"934"},{"range":"984","text":"934"},{"range":"985","text":"934"},{"range":"986","text":"934"},{"range":"987","text":"934"},{"range":"988","text":"982"},"Update the dependencies array to be: [isEquipment, isEquipped, _id, category, baitFood, removeBait, handleUseBait, equipItem]",{"range":"989","text":"990"},"Update the dependencies array to be: [_id, category]",{"range":"991","text":"992"},"Update the dependencies array to be: [entries, isPlayerOutOfBaits, currentEntryNum, setCurrentSection]",{"range":"993","text":"994"},"Update the dependencies array to be: [focusedItem, setSellerPhrase]",{"range":"995","text":"996"},"Update the dependencies array to be: [myDoubloons, sellableEntries, focusedItem, setSellerPhrase, sellItem, saleSE]",{"range":"997","text":"998"},"Update the dependencies array to be: [canSell, isConfirmingSale, saleAmount, _id, plural, setSellerPhrase]",{"range":"999","text":"1000"},"Update the dependencies array to be: [canSell, isConfirmingSale, setSellerPhrase, saleAmount, plural, _id, sellItem, totalPrice, saleSE, amount, setFocusedItem]",{"range":"1001","text":"1002"},"Update the dependencies array to be: [setSellerPhrase]",{"range":"1003","text":"1004"},{"range":"1005","text":"996"},"Update the dependencies array to be: [focusedItem, setSellerPhrase, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries]",{"range":"1006","text":"1007"},"Update the dependencies array to be: [canBuy, isConfirmingPurchase, amount, _id, plural, setSellerPhrase]",{"range":"1008","text":"1009"},"Update the dependencies array to be: [canBuy, isConfirmingPurchase, setSellerPhrase, amount, plural, _id, purchaseItem, totalPrice, purchaseSE, thankYouSE]",{"range":"1010","text":"1011"},{"range":"1012","text":"1004"},{"range":"1013","text":"992"},{"range":"1014","text":"934"},{"range":"1015","text":"934"},{"range":"1016","text":"934"},{"range":"1017","text":"934"},{"range":"1018","text":"934"},"Update the dependencies array to be: [setFishCoords, area]",{"range":"1019","text":"1020"},"Update the dependencies array to be: [hookedFish, giveUpBait, baitFood.category, baitFood._id, setGameNotification, loseBait, setGameProcess]",{"range":"1021","text":"1022"},"Update the dependencies array to be: [fishCoords, roamingDistance, fishWidth, area]",{"range":"1023","text":"1024"},"Update the dependencies array to be: [wouldHookSuccessfully, canTryToCatch, isBaitAvailable, fishID, groupID, strength, size, goAway, setHookedFish, fish, pullChance, isBoss, roamingInterval, setGameProcess, makeBaitAvailable, setGameNotification]",{"range":"1025","text":"1026"},"Update the dependencies array to be: [onClose, transition]",{"range":"1027","text":"1028"},"Update the dependencies array to be: [blur, blurContainer, transition]",{"range":"1029","text":"1030"},"Update the dependencies array to be: [rest, src]",{"range":"1031","text":"1032"},[3096,3110],"[audioEnabled, creekBE]",[4926,4954],"[audioEnabled, backgroundMusic, isBGMEnabled]",[5132,5134],"[spendOneMinute]",[6395,6414],"[playerCoordinates.width, playerCoordinates.x, playerCoordinates.y, rodDimensions.height]",[7342,7398],"[map, baitCoordinates, rodDimensions]",[7693,7722],"[baitCoordinates.x, baitCoordinates.y, baitOffset.x, baitOffset.y, map.shorePath.to.y]",[8447,8482],"[lineOrigin.x, lineOrigin.y, baitOffset.x, baitOffset.y, rodOffset.x, rodOffset.y, rodAngle, rodDimensions.height]",[10939,10955],"[baitLakeCoords, updateGlobalPositionState]",[14239,14533],"[process, setProcess, playerCoordinates, scrollToPlayer, map, isBarometerVisible, scrollToBait, rodAngle, rodOffset, baitOffset, baitOffsetLimit, baitLakeCoords, rodLevel, baitDistance, lineLength]",[15269,15289],"[isPlayerOutOfBaits, map.shorePath.from.x, map.shorePath.from.y, map.shorePath.to.x, map.shorePath.to.y]",[1360,1362],"[closeMenu]",[2281,2322],"[nextStep, baitDistance, lineStepMatches.steps, lineStepMatches.subSteps]",[1931,1946],"[dispatch, processFrozen]",[2113,2128],[3577,3611],"[isPlayerMoving, map.width, playerCoordinates, processFrozen, scrollToPlayer, setPlayerCoordinates]",[3886,3888],"[scrollToPlayer, setBaitOffset, setBaitType, setRodAngle]",[4034,4036],"[isBarometerVisible, setIsBarometerVisible]",[4349,4406],"[isPlayerMoving, isMainMenuOpen, baitFood, processFrozen, setProcess]",[8177,8227],"[playerCoordinates, isMainMenuOpen, processFrozen, movePlayer, throwLine, shoreRef]",[2738,2740],"[dispatch]",[3655,3670],"[processFrozen, setBaitOffset, setBaitType, setProcess, setRodAngle, setRodOffset]",[3864,3866],"[scrollToPlayer, setBaitOffset, setRodOffset]",[3966,3968],[4354,4381],"[isThrowing, processFrozen, setBaitOffset, setRodAngle, setRodOffset]",[8365,8443],"[isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords, setIsBarometerVisible, setBaitOffset, scrollToBait, emitBaitFallEvent, setBaitType, baitRef, lakeRef, setProcess, baitDropSE, badassSE]",[9007,9042],"[processFrozen, rodLevel.maxLength, setBaitOffset, rodAngle]",[15711,15873],"[isPreparingThrow, spaceFired, rodAngle, rodOffset, confirmThrow, isThrowing, processFrozen, goBack, changeRodDirection]",[19301,19324],"[]",[7845,7884],"[baitOffset, lineLength, setBaitOffset, setRodAngle, scrollToBait, baitOffsetLimit.to.y]",[10083,10150],"[isFishPulling, isPlayerReeling, strengthRatio, fishRodLevel, move, incrementLineTension]",[10372,10389],"[isPlayerReeling, reelingSE]",[10664,10678],"[baitDistance, catchNewFish, goBack, hookedFish.fish, setGameProcess]",[11345,11358],"[goBack, lineBreakSE, lineTension, loseLineBreak, loseLineLoose, setGameProcess]",[11606,11608],"[reelingSE, setGameProcess, setHookedFish, setLineTension]",[12481,12483],"[hookedFish.fish, setIsFishPulling]",[2221,2234],"[SEPath, soundEffect]",[2639,2649],"[destroyNotification, duration, transition]",[2090,2092],"[makeBaitAvailable]",[3899,3959],"[processFrozen, baitDistance, isReeling, baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait, goBack]",[4131,4133],[4824,4835],"[isReeling, reelingSE]",[1946,1967],"[sellerPhrase.length, sellerPhraseSpelled]",[1622,1647],"[baitFood]",[4719,4895],"[currentStatusSectionID, doubloons, gameTimeSpentFormatted, fishrodLevel._id, baitFood, baitColor, removeBait, setCurrentSection]",[2264,2289],"[isEquipment, category, rodLevel._id, _id]",[3578,3580],[3681,3683],[3779,3781],[3865,3867],[3957,3959],[4435,4460],[7283,7345],"[isEquipment, isEquipped, _id, category, baitFood, removeBait, handleUseBait, equipItem]",[7929,7945],"[_id, category]",[13634,13680],"[entries, isPlayerOutOfBaits, currentEntryNum, setCurrentSection]",[2648,2661],"[focusedItem, setSellerPhrase]",[3556,3609],"[myDoubloons, sellableEntries, focusedItem, setSellerPhrase, sellItem, saleSE]",[6495,6547],"[canSell, isConfirmingSale, saleAmount, _id, plural, setSellerPhrase]",[7473,7691],"[canSell, isConfirmingSale, setSellerPhrase, saleAmount, plural, _id, sellItem, totalPrice, saleSE, amount, setFocusedItem]",[7850,7852],"[setSellerPhrase]",[3521,3534],[4417,4457],"[focusedItem, setSellerPhrase, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries]",[7423,7474],"[canBuy, isConfirmingPurchase, amount, _id, plural, setSellerPhrase]",[8392,8596],"[canBuy, isConfirmingPurchase, setSellerPhrase, amount, plural, _id, purchaseItem, totalPrice, purchaseSE, thankYouSE]",[8759,8761],[9345,9361],[3873,3875],[3979,3981],[4057,4059],[4180,4182],[4301,4303],[7456,7486],"[setFishCoords, area]",[9323,9358],"[hookedFish, giveUpBait, baitFood.category, baitFood._id, setGameNotification, loseBait, setGameProcess]",[10327,10410],"[fishCoords, roamingDistance, fishWidth, area]",[16603,16699],"[wouldHookSuccessfully, canTryToCatch, isBaitAvailable, fishID, groupID, strength, size, goAway, setHookedFish, fish, pullChance, isBoss, roamingInterval, setGameProcess, makeBaitAvailable, setGameNotification]",[1239,1248],"[onClose, transition]",[1855,1876],"[blur, blurContainer, transition]",[704,708],"[rest, src]"]