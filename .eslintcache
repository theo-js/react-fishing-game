[{"C:\\www\\personal\\fishing-game\\src\\index.tsx":"1","C:\\www\\personal\\fishing-game\\src\\reportWebVitals.ts":"2","C:\\www\\personal\\fishing-game\\src\\App.tsx":"3","C:\\www\\personal\\fishing-game\\src\\store\\index.js":"4","C:\\www\\personal\\fishing-game\\src\\components\\Game\\index.tsx":"5","C:\\www\\personal\\fishing-game\\src\\store\\actions\\game.ts":"6","C:\\www\\personal\\fishing-game\\src\\utils\\position.ts":"7","C:\\www\\personal\\fishing-game\\src\\store\\actions\\position.ts":"8","C:\\www\\personal\\fishing-game\\src\\store\\selectors\\game.ts":"9","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\index.ts":"10","C:\\www\\personal\\fishing-game\\src\\utils\\math.ts":"11","C:\\www\\personal\\fishing-game\\src\\store\\actions\\types.ts":"12","C:\\www\\personal\\fishing-game\\src\\components\\Game\\Barometer\\index.tsx":"13","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\index.tsx":"14","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\Initial\\index.tsx":"15","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\ThrowLine\\index.tsx":"16","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\WaitFish\\index.tsx":"17","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\game.ts":"18","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\inventory.ts":"19","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\position.ts":"20","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\fishing.ts":"21","C:\\www\\personal\\fishing-game\\src\\utils\\throttle.ts":"22","C:\\www\\personal\\fishing-game\\src\\store\\actions\\fishing.ts":"23","C:\\www\\personal\\fishing-game\\src\\components\\Game\\animations\\index.ts":"24","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Inventory\\index.tsx":"25","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\FishArea\\index.tsx":"26","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\index.tsx":"27","C:\\www\\personal\\fishing-game\\src\\components\\ProgressCircle\\index.tsx":"28","C:\\www\\personal\\fishing-game\\src\\components\\fishes\\Default\\index.tsx":"29","C:\\www\\personal\\fishing-game\\src\\components\\Game\\evolution\\index.ts":"30","C:\\www\\personal\\fishing-game\\src\\store\\actions\\inventory.ts":"31","C:\\www\\personal\\fishing-game\\src\\store\\selectors\\inventory.ts":"32","C:\\www\\personal\\fishing-game\\src\\store\\selectors\\position.ts":"33","C:\\www\\personal\\fishing-game\\src\\store\\selectors\\fishing.ts":"34","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\FishGroup\\index.tsx":"35","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Sell\\index.tsx":"36","C:\\www\\personal\\fishing-game\\src\\components\\misc\\Modal\\index.tsx":"37","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Buy\\index.tsx":"38","C:\\www\\personal\\fishing-game\\src\\interfaces\\position.ts":"39","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Credits\\index.tsx":"40","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Status\\index.tsx":"41","C:\\www\\personal\\fishing-game\\src\\components\\Game\\AudioPlayer\\index.tsx":"42","C:\\www\\personal\\fishing-game\\src\\utils\\time.ts":"43","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\Battle\\index.tsx":"44","C:\\www\\personal\\fishing-game\\src\\components\\Game\\Barometer\\TensionGauge\\index.tsx":"45","C:\\www\\personal\\fishing-game\\src\\components\\Game\\GameNotification\\index.tsx":"46","C:\\www\\personal\\fishing-game\\src\\interfaces\\game.ts":"47","C:\\www\\personal\\fishing-game\\src\\interfaces\\evolution.ts":"48","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\index.tsx":"49","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Starter\\index.tsx":"50","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Beginner\\index.tsx":"51","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Intermediate\\index.tsx":"52","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Expert\\index.tsx":"53","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Advanced\\index.tsx":"54","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\King\\index.tsx":"55","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Abyss\\index.tsx":"56"},{"size":500,"mtime":1608227343144,"results":"57","hashOfConfig":"58"},{"size":425,"mtime":1608227343144,"results":"59","hashOfConfig":"58"},{"size":287,"mtime":1611501758526,"results":"60","hashOfConfig":"58"},{"size":402,"mtime":1609447471652,"results":"61","hashOfConfig":"58"},{"size":22398,"mtime":1611732869032,"results":"62","hashOfConfig":"58"},{"size":1078,"mtime":1611681067057,"results":"63","hashOfConfig":"58"},{"size":1667,"mtime":1611687372672,"results":"64","hashOfConfig":"58"},{"size":145,"mtime":1611428205464,"results":"65","hashOfConfig":"58"},{"size":1643,"mtime":1611678378163,"results":"66","hashOfConfig":"58"},{"size":350,"mtime":1609278467473,"results":"67","hashOfConfig":"58"},{"size":532,"mtime":1611686540927,"results":"68","hashOfConfig":"58"},{"size":1278,"mtime":1611677784421,"results":"69","hashOfConfig":"58"},{"size":4044,"mtime":1611501292027,"results":"70","hashOfConfig":"58"},{"size":4342,"mtime":1610120918345,"results":"71","hashOfConfig":"58"},{"size":8336,"mtime":1611506651505,"results":"72","hashOfConfig":"58"},{"size":19915,"mtime":1611581431253,"results":"73","hashOfConfig":"58"},{"size":8161,"mtime":1611579307621,"results":"74","hashOfConfig":"58"},{"size":4135,"mtime":1611677886071,"results":"75","hashOfConfig":"58"},{"size":4422,"mtime":1611742158062,"results":"76","hashOfConfig":"58"},{"size":820,"mtime":1611733624751,"results":"77","hashOfConfig":"58"},{"size":2235,"mtime":1611608506365,"results":"78","hashOfConfig":"58"},{"size":275,"mtime":1609123618760,"results":"79","hashOfConfig":"58"},{"size":3909,"mtime":1611726782372,"results":"80","hashOfConfig":"58"},{"size":1914,"mtime":1609212803604,"results":"81","hashOfConfig":"58"},{"size":14308,"mtime":1611727131623,"results":"82","hashOfConfig":"58"},{"size":1926,"mtime":1611521323167,"results":"83","hashOfConfig":"58"},{"size":5055,"mtime":1609787430917,"results":"84","hashOfConfig":"58"},{"size":1497,"mtime":1608823676820,"results":"85","hashOfConfig":"58"},{"size":20965,"mtime":1611732321143,"results":"86","hashOfConfig":"58"},{"size":1507,"mtime":1611691041562,"results":"87","hashOfConfig":"58"},{"size":1551,"mtime":1611415381809,"results":"88","hashOfConfig":"58"},{"size":1027,"mtime":1611710544625,"results":"89","hashOfConfig":"58"},{"size":558,"mtime":1611733836883,"results":"90","hashOfConfig":"58"},{"size":1038,"mtime":1611581835646,"results":"91","hashOfConfig":"58"},{"size":2159,"mtime":1611448115875,"results":"92","hashOfConfig":"58"},{"size":10939,"mtime":1611737629072,"results":"93","hashOfConfig":"58"},{"size":1653,"mtime":1609474919965,"results":"94","hashOfConfig":"58"},{"size":12973,"mtime":1611741648753,"results":"95","hashOfConfig":"58"},{"size":395,"mtime":1608539951678,"results":"96","hashOfConfig":"58"},{"size":2098,"mtime":1611233193855,"results":"97","hashOfConfig":"58"},{"size":6011,"mtime":1611618699474,"results":"98","hashOfConfig":"58"},{"size":2935,"mtime":1611150773413,"results":"99","hashOfConfig":"58"},{"size":236,"mtime":1609794867884,"results":"100","hashOfConfig":"58"},{"size":15116,"mtime":1611716555973,"results":"101","hashOfConfig":"58"},{"size":1958,"mtime":1611508765064,"results":"102","hashOfConfig":"58"},{"size":6286,"mtime":1611718429809,"results":"103","hashOfConfig":"58"},{"size":511,"mtime":1611695292610,"results":"104","hashOfConfig":"58"},{"size":360,"mtime":1611690476002,"results":"105","hashOfConfig":"58"},{"size":2299,"mtime":1611735845794,"results":"106","hashOfConfig":"58"},{"size":1303,"mtime":1611732524793,"results":"107","hashOfConfig":"58"},{"size":1317,"mtime":1611734400134,"results":"108","hashOfConfig":"58"},{"size":1327,"mtime":1611734563419,"results":"109","hashOfConfig":"58"},{"size":1315,"mtime":1611734834712,"results":"110","hashOfConfig":"58"},{"size":1319,"mtime":1611734797191,"results":"111","hashOfConfig":"58"},{"size":1317,"mtime":1611734940534,"results":"112","hashOfConfig":"58"},{"size":1318,"mtime":1611735085266,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"w9s9g4",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"116"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"116"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"116"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"160","usedDeprecatedRules":"116"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"116"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"116"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"116"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"116"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"200","usedDeprecatedRules":"116"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"116"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":2,"source":"206","usedDeprecatedRules":"116"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"116"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"116"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"116"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\www\\personal\\fishing-game\\src\\index.tsx",[],["246","247"],"C:\\www\\personal\\fishing-game\\src\\reportWebVitals.ts",[],"C:\\www\\personal\\fishing-game\\src\\App.tsx",[],"C:\\www\\personal\\fishing-game\\src\\store\\index.js",[],["248","249"],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\index.tsx",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265"],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\game.ts",[],"C:\\www\\personal\\fishing-game\\src\\utils\\position.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\position.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\selectors\\game.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\reducers\\index.ts",[],"C:\\www\\personal\\fishing-game\\src\\utils\\math.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\types.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\Barometer\\index.tsx",["266"],"import React, { useMemo } from 'react'\r\nimport TensionGauge from './TensionGauge'\r\nimport { pxToM } from '../../../utils/position'\r\nimport { FishRodLevel } from '../../../interfaces/evolution'\r\nimport gameProcesses from '../processes/index.json'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { processSelector } from '../../../store/selectors/game'\r\n\r\ninterface Props {\r\n    rodLevel: FishRodLevel,\r\n    baitDistance: number,\r\n    // Redux\r\n    gameProcess?: string\r\n}\r\n\r\ninterface StepMatch {\r\n    steps: number[],\r\n    subSteps: number[]\r\n}\r\n\r\nexport const Barometer: React.FC<Props> = ({\r\n    rodLevel,\r\n    baitDistance,\r\n    // Redux\r\n    gameProcess\r\n}) => {\r\n    const maxLength = useMemo((): number => pxToM(rodLevel.maxLength), [rodLevel])\r\n    const lineStepLength = useMemo((): number => 10, [])\r\n    const lineSteps = useMemo((): number => Math.ceil(maxLength/lineStepLength), [maxLength, lineStepLength])\r\n    const lineStepMatches = useMemo((): StepMatch => {\r\n        let matches = { steps: [], subSteps: [] }\r\n        for(let i = 0; i < (lineSteps+1)*2 - 1; i++) {\r\n            if (i%2 === 0) {\r\n                matches.steps.push(i*lineStepLength/2)\r\n            } else {\r\n                matches.subSteps.push(i*lineStepLength/2)\r\n            }\r\n        }\r\n        return matches\r\n    }, [lineSteps, lineStepLength])\r\n    const nextStep = useMemo((): number => {\r\n        return lineSteps*lineStepLength\r\n    }, [lineSteps, lineStepLength])\r\n    const lineStepsJSX = useMemo(() => {\r\n        let JSX = []\r\n        // How much times step length in maxLength\r\n        for (let i = 0; i <= nextStep; i++) {\r\n            const isReached = baitDistance >= i ? styles.reached : ''\r\n            if (lineStepMatches.steps.includes(i)) {\r\n                // Step\r\n                JSX.push(<div key={i} className={`${styles.step} ${isReached} ${i === 0 ? styles.origin : ''}`}>\r\n                    <span><strong>{i}</strong></span>\r\n                </div>)\r\n            } else if (lineStepMatches.subSteps.includes(i)) {\r\n                // Substep\r\n                JSX.push(<div key={i} className={`${styles.subStep} ${isReached}`}></div>)\r\n            } else continue\r\n        }\r\n        return JSX\r\n    }, [lineSteps, lineStepLength, baitDistance])\r\n    const linePercentage = useMemo((): number => baitDistance/maxLength*100, [baitDistance, maxLength])\r\n\r\n    return <div className={`${styles.barometer} ${rodLevel.className}`}>\r\n        <nav>\r\n            <div className={styles.handle}></div>\r\n            <div className={styles.tip}>\r\n                <div className={styles.lineLengthScale}>\r\n                    <div\r\n                        className={styles.lengthLimit}\r\n                        style={{ width: `${maxLength/nextStep*100}%` }}\r\n                    >\r\n                        <meter\r\n                            className={styles.lineLength}\r\n                            min={0}\r\n                            max={maxLength}\r\n                            value={baitDistance}\r\n                            high={maxLength*3/4}\r\n                            low={maxLength/4}\r\n                            optimum={maxLength}\r\n                        >\r\n                        </meter>\r\n                        <label style={{ width: `${linePercentage}%` }}>\r\n                            <span className={styles.tooltip}>\r\n                                <span><strong>{baitDistance}</strong>m</span>\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n                    {lineStepsJSX}\r\n                </div>\r\n                {gameProcess === gameProcesses.BATTLE && (\r\n                    // Line tension gauge\r\n                    <TensionGauge />\r\n                )}\r\n            </div>\r\n        </nav>\r\n    </div>\r\n}\r\n\r\n// Redux connection\r\nconst mapStateToProps = state => ({\r\n    gameProcess: processSelector(state)\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatch => ({})\r\n)(Barometer)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\index.tsx",["267","268","269"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport Inventory from './Inventory'\r\nimport Status from './Status'\r\nimport Shop from './Shop'\r\nimport Credits from './Credits'\r\nimport styles from './index.module.sass'\r\nimport { CgInbox, BiStats, AiTwotoneShop, FaHandsHelping } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { closeMainMenuAction } from '../../../store/actions/game'\r\nimport { isMainMenuClosingSelector } from '../../../store/selectors/game'\r\n\r\ninterface Props {\r\n    closeMenu?: () => void,\r\n    isMenuClosing?: boolean\r\n}\r\n\r\nexport enum SectionID {\r\n    INVENTORY = 'INVENTORY',\r\n    STATS = 'STATS',\r\n    SHOPPING = 'SHOPPING',\r\n    CREDITS = 'CREDITS'\r\n}\r\n\r\nexport const MainMenu: React.FC<Props> = ({ closeMenu, isMenuClosing }) => {\r\n    const [currentSection, setCurrentSection] = useState<SectionID>(SectionID.INVENTORY)\r\n\r\n    // Keyboard events\r\n    useEffect(() => {\r\n        function handleKeyPress(e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 8: // Backspace\r\n                case 46: // Delete\r\n                    closeMenu()\r\n                    break\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keypress', handleKeyPress, false)\r\n        return () => document.removeEventListener('keypress', handleKeyPress, false)\r\n    }, [])\r\n\r\n    const currentSectionJSX = useMemo(() => {\r\n        switch(currentSection) {\r\n            case SectionID.INVENTORY:\r\n                return <Inventory setCurrentSection={setCurrentSection} />\r\n                break\r\n            case SectionID.STATS:\r\n                return <Status setCurrentSection={setCurrentSection} />\r\n                break\r\n            case SectionID.CREDITS:\r\n                return <Credits />\r\n            default: return <Shop />\r\n        }\r\n    }, [currentSection])\r\n\r\n    return (\r\n        <div\r\n            className={`${styles.mainMenu} ${isMenuClosing ? styles.closing : ''}`}\r\n            onClick={closeMenu}\r\n        >\r\n            <main className={styles.menuContent} onClick={e => e.stopPropagation()}>\r\n                {currentSectionJSX}\r\n            </main>\r\n            <nav className={styles.menuNavigation}>\r\n                <ul>\r\n                    <li\r\n                        title=\"Inventory\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.INVENTORY)}}\r\n                        className={`${currentSection === SectionID.INVENTORY ? styles.active : ''} ${styles.inventory}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Inventory </span><CgInbox />\r\n                    </li>\r\n                    <li\r\n                        title=\"Status\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.STATS)}}\r\n                        className={`${currentSection === SectionID.STATS ? styles.active : ''} ${styles.stats}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Status </span><BiStats />\r\n                    </li>\r\n                    <li\r\n                        title=\"Shopping\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.SHOPPING)}}\r\n                        className={`${currentSection === SectionID.SHOPPING ? styles.active : ''} ${styles.shopping}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Shopping </span><AiTwotoneShop />\r\n                    </li>\r\n                    <li\r\n                        title=\"Credits\"\r\n                        onClick={e => {e.stopPropagation(); setCurrentSection(SectionID.CREDITS)}}\r\n                        className={`${currentSection === SectionID.CREDITS ? styles.active : ''} ${styles.credits}`}\r\n                    >\r\n                        <span className={styles.infoFacultative}>Credits </span><FaHandsHelping />\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    isMenuClosing: isMainMenuClosingSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    closeMenu: () => dispatch(closeMainMenuAction())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MainMenu)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\Initial\\index.tsx",["270","271","272","273","274","275","276","277"],"import React, { Dispatch, SetStateAction, useCallback, useRef, useEffect, useLayoutEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport gameProcesses from '../index.json'\r\nimport { Coordinates, Map } from '../../../../interfaces/position'\r\nimport throttle from '../../../../utils/throttle'\r\nimport { FaFish, IoClose, GiLightBackpack } from 'react-icons/all'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { isMainMenuOpenSelector, isMainMenuClosingSelector } from '../../../../store/selectors/game'\r\nimport { baitFoodSelector } from '../../../../store/selectors/fishing'\r\nimport { openMainMenuAction, closeMainMenuAction } from '../../../../store/actions/game'\r\n\r\ninterface Props {\r\n    setProcess: Dispatch<SetStateAction<string>>,\r\n    playerCoordinates: Coordinates,\r\n    setPlayerCoordinates: Dispatch<SetStateAction<Coordinates>>,\r\n    scrollToPlayer: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    shoreRef: any,\r\n    map: Map,\r\n    setIsBarometerVisible: Dispatch<SetStateAction<boolean>>,\r\n    isBarometerVisible: boolean,\r\n    setBaitOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    setRodAngle: Dispatch<SetStateAction<number>>,\r\n    setBaitType: Dispatch<SetStateAction<string>>\r\n}\r\n\r\nenum Direction {\r\n    LEFT = 'LEFT',\r\n    RIGHT = \"RIGHT\"\r\n}\r\n\r\nexport default (({\r\n    setProcess,\r\n    playerCoordinates,\r\n    setPlayerCoordinates,\r\n    scrollToPlayer,\r\n    shoreRef,\r\n    map,\r\n    isBarometerVisible,\r\n    setIsBarometerVisible,\r\n    setBaitOffset,\r\n    setRodAngle,\r\n    setBaitType\r\n}) => {\r\n    // REDUX\r\n    const dispatch = useDispatch()\r\n    const openMainMenu = useCallback(\r\n        (): void => dispatch(openMainMenuAction()), []\r\n    )\r\n    const closeMainMenu = useCallback(\r\n        (): void => dispatch(closeMainMenuAction()), []\r\n    )\r\n    const isMainMenuOpen = useSelector(isMainMenuOpenSelector)\r\n    const isMainMenuClosing = useSelector(isMainMenuClosingSelector)\r\n    const baitFood = useSelector(baitFoodSelector)\r\n\r\n    // STATE\r\n    const [isPlayerMoving, setIsPlayerMoving] = useState<boolean>(false)\r\n    const lastTouchX = useRef<number>(null)\r\n\r\n    const movePlayer = useCallback(\r\n        (direction: Direction, value: number): void => {\r\n            // Set isPlayerMoving if it's not already\r\n            if (!isPlayerMoving)setIsPlayerMoving(true)\r\n\r\n            if (direction === Direction.LEFT) {\r\n                // Prevent player from leaving map, left side\r\n                if (playerCoordinates.x - value < 0) {\r\n                    return setPlayerCoordinates({ ...playerCoordinates, x: 0 })\r\n                }\r\n                setPlayerCoordinates({ ...playerCoordinates, x: playerCoordinates.x - value })\r\n            } else if (direction === Direction.RIGHT) {\r\n                // Prevent player from leaving map, right side\r\n                if (map.width - playerCoordinates.x < value + playerCoordinates.width) {\r\n                    return setPlayerCoordinates({ ...playerCoordinates, x: map.width - playerCoordinates.width })\r\n                }\r\n                setPlayerCoordinates({ ...playerCoordinates, x: playerCoordinates.x + value })\r\n            }\r\n            scrollToPlayer('auto')\r\n        }, [playerCoordinates]\r\n    )\r\n\r\n    // Initialize scroll position at player's position and bait at 0,0\r\n    useLayoutEffect(() => {\r\n        scrollToPlayer('auto')\r\n        setBaitOffset({ x: 0, y: -20, transition: '.2 all ease' })\r\n        setRodAngle(0)\r\n        setBaitType('default')\r\n    }, [])\r\n\r\n    // Hide barometer\r\n    useEffect(() => {\r\n        if (isBarometerVisible) {\r\n            setIsBarometerVisible(false)\r\n        }\r\n    }, [])\r\n\r\n    const throwLine = useCallback(\r\n        (): void => {\r\n            if (!isPlayerMoving && !isMainMenuOpen && baitFood) {\r\n                setProcess(gameProcesses.THROW_LINE)\r\n            }\r\n        }, [isPlayerMoving, isMainMenuOpen, baitFood]\r\n    )\r\n\r\n    // Attach event listeners\r\n    useEffect(() => {\r\n        function handleKeyDown (e: KeyboardEvent): void {\r\n            const { keyCode } = e\r\n            switch (keyCode) {\r\n                case 37: // Left\r\n                    e.preventDefault()\r\n                    movePlayer(Direction.LEFT, 40)\r\n                    break\r\n                case 38: // Top\r\n                    e.preventDefault()\r\n                    break\r\n                case 39: // Right\r\n                    e.preventDefault()\r\n                    movePlayer(Direction.RIGHT, 40)\r\n                    break\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    e.preventDefault()\r\n                    throwLine()\r\n                    break\r\n            }\r\n        }\r\n        const handleKeyDownThrottle = throttle(handleKeyDown, 100)\r\n        function preventVerticalScroll (e: KeyboardEvent): void {\r\n            const { keyCode } = e\r\n            switch (keyCode) {\r\n                case 38: // Top\r\n                    e.preventDefault()\r\n                    break\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n            }\r\n        }\r\n        function handleKeyUp (e: KeyboardEvent): void {\r\n            setIsPlayerMoving(false)\r\n        }\r\n        function handleClick (e: any): void {\r\n            const { layerX } = e\r\n            const difference = layerX - playerCoordinates.x\r\n            movePlayer(difference >= 0 ? Direction.RIGHT : Direction.LEFT, Math.abs(difference))\r\n            setIsPlayerMoving(false)\r\n        }\r\n        function handleTouchMove (e: TouchEvent) {\r\n            const currentTouchX = e.touches[0].clientX\r\n            if (lastTouchX.current !== null) {\r\n                if (currentTouchX < lastTouchX.current) {\r\n                    // Swipe left\r\n                    movePlayer(Direction.RIGHT, 20)\r\n                } else if (currentTouchX > lastTouchX.current) {\r\n                    // Swipe right\r\n                    movePlayer(Direction.LEFT, 20)\r\n                }\r\n            }\r\n            lastTouchX.current = currentTouchX\r\n        }\r\n        const handleTouchMoveThrottle = throttle(handleTouchMove, 100)\r\n        function handleTouchEnd (e: TouchEvent) {\r\n            setIsPlayerMoving(false)\r\n        }\r\n\r\n        if (!isMainMenuOpen) {\r\n            document.addEventListener('keydown', handleKeyDownThrottle, false)\r\n            document.addEventListener('keydown', preventVerticalScroll, true)\r\n            document.addEventListener('keyup', handleKeyUp, false)\r\n            if (shoreRef && shoreRef.current) {\r\n                shoreRef.current.addEventListener('click', handleClick, false)\r\n            }\r\n            document.addEventListener('touchmove', handleTouchMoveThrottle, false)\r\n            document.addEventListener('touchend', handleTouchEnd, false)\r\n        }\r\n\r\n        return (): void => {\r\n            document.removeEventListener('keydown', handleKeyDownThrottle, false)\r\n            document.removeEventListener('keydown', preventVerticalScroll, true)\r\n            document.removeEventListener('keyup', handleKeyUp, false)\r\n            if (shoreRef && shoreRef.current) {\r\n                shoreRef.current.removeEventListener('click', handleClick, false)\r\n            }\r\n            document.removeEventListener('touchmove', handleTouchMoveThrottle, false)\r\n            document.removeEventListener('touchend', handleTouchEnd, false)\r\n        }\r\n    }, [playerCoordinates, isMainMenuOpen])\r\n\r\n    if (!isPlayerMoving) {\r\n        return <nav className={`menu ${styles.navigation} ${isMainMenuOpen && !isMainMenuClosing ? styles.open : ''}`}>\r\n            <button\r\n                className={`btn ${styles.openMainMenuBTN}`}\r\n                onClick={isMainMenuOpen ? closeMainMenu : openMainMenu}\r\n            >\r\n                {isMainMenuOpen ? <IoClose /> : <GiLightBackpack />}\r\n            </button>\r\n            {baitFood && (\r\n                <button \r\n                    className={`btn btn-primary ${styles.fishBTN}`}\r\n                    onClick={throwLine}\r\n                >\r\n                    Fish here ? <FaFish />\r\n                </button>\r\n            )}\r\n        </nav>\r\n    }\r\n\r\n    return null\r\n}) as React.FC<Props>","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\ThrowLine\\index.tsx",["278","279","280","281","282","283","284","285","286","287"],"import React, { Dispatch, SetStateAction, ReactNode, useCallback, useRef, useEffect, useState, useMemo } from 'react'\r\nimport gameProcesses from '../index.json'\r\nimport ProgressCircle from '../../../ProgressCircle'\r\nimport { Coordinates, Path } from '../../../../interfaces/position'\r\nimport { FishRodLevel } from '../../../../interfaces/evolution'\r\nimport { getVectorLength, getNextCoordinatesOfPath } from '../../../../utils/position'\r\nimport throttle from '../../../../utils/throttle'\r\nimport { splashAnim } from '../../animations'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { useDispatch } from 'react-redux'\r\nimport { emitBaitFallEventAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    setProcess: Dispatch<SetStateAction<string>>,\r\n    scrollToBait: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    scrollToPlayer: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    rodAngle: number,\r\n    setRodAngle: Dispatch<SetStateAction<number>>,\r\n    rodOffset: Coordinates,\r\n    setRodOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitOffset: Coordinates,\r\n    setBaitOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitDistance: number,\r\n    baitOffsetLimit: Path,\r\n    baitLakeCoords: Coordinates,\r\n    lakeRef: any,\r\n    baitRef: any,\r\n    setBaitType: Dispatch<SetStateAction<string>>,\r\n    playerCoordinates: Coordinates,\r\n    rodLevel: FishRodLevel,\r\n    setIsBarometerVisible: Dispatch<SetStateAction<boolean>>,\r\n    isBarometerVisible: boolean\r\n}\r\n\r\nconst maxAngle: number = 70\r\nconst minAngle: number = -70\r\n\r\nexport default (({\r\n    setProcess,\r\n    scrollToBait,\r\n    scrollToPlayer,\r\n    rodAngle,\r\n    setRodAngle,\r\n    rodOffset,\r\n    setRodOffset,\r\n    baitOffset,\r\n    setBaitOffset,\r\n    baitDistance,\r\n    baitOffsetLimit,\r\n    baitRef,\r\n    baitLakeCoords,\r\n    lakeRef,\r\n    setBaitType,\r\n    playerCoordinates,\r\n    rodLevel,\r\n    isBarometerVisible,\r\n    setIsBarometerVisible\r\n }) => {\r\n     // Audio\r\n    const baitDropSE = useMemo(() => require('../../../../assets/audio/se/bait-drop.mp3').default, [])\r\n    const badassSE = useMemo(() => require('../../../../assets/audio/se/badass.mp3').default, [])\r\n\r\n    // State\r\n    const [gaugeValue, setGaugeValue] = useState<number>(0)\r\n    const [spaceFired, setSpaceFired] = useState<boolean>(false)\r\n    const [isPushing, setIsPushing] = useState<boolean>(false)\r\n    const [isPreparingThrow, setIsPreparingThrow] = useState<boolean>(false)\r\n    const [isThrowing, setIsThrowing] = useState<boolean>(false)\r\n    const [hasThrown, setHasThrown] = useState<boolean>(false)\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const emitBaitFallEvent = useCallback(() => dispatch(emitBaitFallEventAction()), [])\r\n\r\n    // Refs\r\n    const lastTouchX = useRef<number>(null)\r\n    const gaugeRef = useRef<any>(null)\r\n    const gaugeValueRef = useRef<number>(0)\r\n    const requestRef = useRef<any>(null)\r\n    const directionRef = useRef<number>(rodAngle)\r\n    const stepRef = useRef<number>(0)\r\n    const remainingDistanceRef = useRef<number>(0)\r\n    const baitDropSERef = useRef<HTMLAudioElement>(new Audio())\r\n    baitDropSERef.current.src = baitDropSE\r\n    const badassSERef = useRef<HTMLAudioElement>(new Audio())\r\n    badassSERef.current.src = badassSE\r\n    badassSERef.current.volume = .75\r\n\r\n    // Go back to initial process\r\n    const goBack = useCallback(\r\n        (): void => {\r\n            // Set fishing rod to initial position before\r\n            setRodAngle(0)\r\n            setRodOffset({ x: 0, y: -20 })\r\n            setBaitOffset({ x: 0, y: -20, transition: '.2s ease all' })\r\n            setBaitType('default')\r\n            setProcess(gameProcesses.INITIAL)\r\n        }, []\r\n    )\r\n\r\n    // Move fishing rod forward on process start\r\n    useEffect(() => {\r\n        setRodOffset({ x: 0, y: 0 })\r\n        setBaitOffset({ x: 0, y: 0 })\r\n        scrollToPlayer()\r\n    }, [])\r\n\r\n    // Hide barometer\r\n    useEffect(() => isBarometerVisible && setIsBarometerVisible(false), [])\r\n\r\n    // Move fishing rod direction\r\n    const changeRodDirection = useCallback(\r\n        (angle: number) => {\r\n            if (!isThrowing) {\r\n                setRodAngle(angle)\r\n                setRodOffset({ x: -angle/4, y: -Math.abs(angle)/2 })\r\n                setBaitOffset({x: -angle, y: -Math.abs(angle)/2 })\r\n            }\r\n        }, [isThrowing]\r\n    )\r\n\r\n    // Throw bait at the right distance and direction\r\n    useEffect(() => {\r\n        if (isThrowing) {\r\n            // Display barometer\r\n            setIsBarometerVisible(true)\r\n            // Initial throw speed\r\n            stepRef.current = remainingDistanceRef.current / 15 // stepRef.current is the distance travelled in px / frame\r\n\r\n            const move = (): void => {\r\n                if (remainingDistanceRef.current > 0) {\r\n                    // Bait is still moving\r\n                    // Get next coordinates\r\n                    let nextCoords: Coordinates = getNextCoordinatesOfPath(directionRef.current, stepRef.current)\r\n                    let nextOffset: Coordinates = { x: baitOffset.x - nextCoords.x, y: baitOffset.y + nextCoords.y }\r\n                    remainingDistanceRef.current = Math.floor(remainingDistanceRef.current - stepRef.current)\r\n                    /*\r\n                        Detect collision against lake borders before it happens\r\n                        and change direction in that case\r\n                    */\r\n                    if (nextOffset.x > baitOffsetLimit.to.x) {\r\n                        // Handle right limit collision\r\n                        // Deviate\r\n                        directionRef.current *= -1\r\n                        // Kinetic energy loss\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    } else if (nextOffset.y > baitOffsetLimit.to.y) {\r\n                        // Handle bottom limit collision\r\n                        directionRef.current = directionRef.current - 270\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    } else if (nextOffset.x < baitOffsetLimit.from.x) {\r\n                        // Handle left limit collision\r\n                        directionRef.current *= -1\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    /*} else if (nextOffset.y < baitOffsetLimit.from.y) {\r\n                        // Handle top limit collision\r\n                        directionRef.current = directionRef.current - 270\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    */\r\n                    }\r\n\r\n                    // Apply translation and scroll\r\n                    setBaitOffset(nextOffset)\r\n                    scrollToBait()\r\n\r\n                    // Ease-out\r\n                    stepRef.current *= .999 // Deceleration coeff\r\n                    throttle(move, 100)\r\n                } else {\r\n                    // Bait has reached the correct distance\r\n                    emitBaitFallEvent()\r\n                    setIsThrowing(false)\r\n                    setBaitType('immersed')\r\n                    // Play bait drop sound effect\r\n                    const baitDropSEPromise = baitDropSERef.current.play()\r\n                    if (typeof baitDropSEPromise !== 'undefined') {\r\n                        baitDropSEPromise\r\n                        .then(() => null)\r\n                        .catch(err => console.log(err))\r\n                    }\r\n                    // Play \"badass\"\" sound effect if throw was particularly high\r\n                    if (gaugeValueRef.current >= 90) {\r\n                        window.setTimeout(() => {\r\n                            const badassSEPromise = badassSERef.current.play()\r\n                            if (typeof badassSEPromise !== 'undefined') {\r\n                                badassSEPromise\r\n                                .then(() => null)\r\n                                .catch(() => console.log('Failed to play \"badass\" sound effect'))\r\n                            }\r\n                        }, 1000)\r\n                    }\r\n                    // Play splash animation on bait\r\n                    baitRef.current && splashAnim(baitLakeCoords, lakeRef.current)\r\n                    // Wait for fish\r\n                    gaugeValueRef.current = 0\r\n                    setProcess(gameProcesses.WAIT_FISH)\r\n                    return\r\n                }\r\n            }\r\n            throttle(move, 100)()\r\n        }\r\n    }, [isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords])\r\n\r\n    const confirmThrow = useCallback(\r\n        (): void => {\r\n            if (gaugeValueRef.current >= 5) {\r\n                const reach = Math.round(gaugeValueRef.current)/100 * rodLevel.maxLength\r\n                remainingDistanceRef.current = reach\r\n                setIsThrowing(true)\r\n                setBaitOffset({ x: 0, y: 0 })\r\n                // Initial direction\r\n                directionRef.current = rodAngle\r\n            }\r\n            setIsPreparingThrow(false)\r\n            setGaugeValue(0)\r\n        }, [rodLevel, rodAngle]\r\n    )\r\n\r\n    // Attach event listeners\r\n    useEffect(() => {\r\n        function handleKeyDown (e: KeyboardEvent): void {\r\n            const { keyCode } = e\r\n            switch (keyCode) {\r\n                case 8: // Backspace\r\n                case 46: // Delete\r\n                case 48: // 0\r\n                    e.preventDefault()\r\n                    if (!isThrowing) {\r\n                        goBack()\r\n                    }\r\n                    break\r\n                case 37: // Left\r\n                    e.preventDefault()\r\n                    if (!isThrowing) {\r\n                        // Increase fishrod angle\r\n                        const addOffset = 4\r\n                        if (rodAngle < maxAngle) {\r\n                            let newAngle = 0\r\n                            if (rodAngle + addOffset >= maxAngle) newAngle = maxAngle\r\n                            else newAngle = rodAngle + addOffset\r\n                            changeRodDirection(newAngle)\r\n                        }\r\n                    }\r\n                    break\r\n                case 38: // Top\r\n                    e.preventDefault()\r\n                    break\r\n                case 39: // Right\r\n                    e.preventDefault()\r\n                    if (!isThrowing) {\r\n                        // Decrease fishrod angle\r\n                        const subOffset = 4\r\n                        if (rodAngle > minAngle) {\r\n                            let newAngle = 0\r\n                            if (rodAngle - subOffset <= minAngle) newAngle = minAngle\r\n                            else newAngle = rodAngle - subOffset\r\n                            changeRodDirection(newAngle)\r\n                        }\r\n                    }\r\n                    break\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    e.preventDefault()\r\n                    if (!isThrowing) {\r\n                        if (!spaceFired) { // Prevent mousedown event from firing multiple times\r\n                            setSpaceFired(true)\r\n                            if(!isPreparingThrow) {\r\n                                setIsPreparingThrow(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    break\r\n            }\r\n        }\r\n        function handleKeyUp (e: KeyboardEvent): void {\r\n            if (!isThrowing) {\r\n                const { keyCode } = e\r\n                switch (keyCode) {\r\n                    case 32:\r\n                    case 13:\r\n                        setSpaceFired(false)\r\n                        if (isPreparingThrow) {\r\n                            confirmThrow()\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n        function handleMouseDown (e: Event): void {\r\n            if (!isThrowing) {\r\n                setSpaceFired(true)\r\n                if(!isPreparingThrow) {\r\n                    setIsPreparingThrow(true)\r\n\r\n                }\r\n            }\r\n        }\r\n        function handleMouseUp (e: Event): void {\r\n            setSpaceFired(false)\r\n            if (isPreparingThrow) {\r\n                confirmThrow()\r\n            }\r\n        }\r\n        function handleTouchMove (e: TouchEvent) {\r\n            const currentTouchX = e.touches[0].clientX\r\n            if (lastTouchX.current !== null && !isThrowing) {\r\n                e.stopPropagation()\r\n                if (currentTouchX > lastTouchX.current) {\r\n                    // Swap right\r\n                    // Decrease fishrod angle\r\n                    const subOffset: number = 8\r\n                    if (rodAngle > minAngle) {\r\n                        let newAngle: number = 0\r\n                        if (rodAngle - subOffset <= minAngle) newAngle = minAngle\r\n                        else newAngle = rodAngle - subOffset\r\n                        changeRodDirection(newAngle)\r\n                    }\r\n                } else if (currentTouchX < lastTouchX.current) {\r\n                    // Swap left\r\n                    // Increase fishrod angle\r\n                    const addOffset: number = 6\r\n                    if (rodAngle < maxAngle) {\r\n                        let newAngle: number = 0\r\n                        if (rodAngle + addOffset >= maxAngle) newAngle = maxAngle\r\n                        else newAngle = rodAngle + addOffset\r\n                        changeRodDirection(newAngle)\r\n                    }\r\n                }\r\n            }\r\n            lastTouchX.current = currentTouchX\r\n        }\r\n        const handleTouchMoveThrottle = throttle(handleTouchMove, 50)\r\n    \r\n        document.addEventListener('keydown', handleKeyDown, false)\r\n        document.addEventListener('keyup', handleKeyUp, false)\r\n        document.addEventListener('mousedown', handleMouseDown, false)\r\n        document.addEventListener('mouseup', handleMouseUp, false)\r\n        // Touch events\r\n        document.addEventListener('touchmove', handleTouchMoveThrottle, false)\r\n        if (gaugeRef.current) {\r\n            gaugeRef.current.addEventListener('touchstart', (e: TouchEvent) => {setIsPushing(true); handleMouseDown(e)}, false)\r\n            gaugeRef.current.addEventListener('touchmove', (e: TouchEvent) => {e.stopPropagation(); e.preventDefault()}, false)\r\n            gaugeRef.current.addEventListener('touchend', (e: TouchEvent) => {setIsPushing(false); handleMouseUp(e)}, false)\r\n        }\r\n\r\n        return (): void => {\r\n            document.removeEventListener('keydown', handleKeyDown, false)\r\n            document.removeEventListener('keyup', handleKeyUp, false)\r\n            document.removeEventListener('mousedown', handleMouseDown, false)\r\n            document.removeEventListener('mouseup', handleMouseUp, false)\r\n            document.removeEventListener('touchmove', handleTouchMoveThrottle, false)\r\n            if (gaugeRef.current) {\r\n                gaugeRef.current.removeEventListener('touchstart', (e: TouchEvent) => {setIsPushing(true); handleMouseDown(e)}, false)\r\n                gaugeRef.current.removeEventListener('touchmove', (e: TouchEvent) => {e.stopPropagation(); e.preventDefault()}, false)\r\n                gaugeRef.current.removeEventListener('touchend', (e: TouchEvent) => {setIsPushing(false); handleMouseUp(e)}, false)\r\n            }\r\n        }\r\n    }, [\r\n        isPreparingThrow,\r\n        spaceFired,\r\n        rodAngle,\r\n        rodOffset,\r\n        confirmThrow,\r\n        isThrowing\r\n    ])\r\n\r\n    // Add mousemove event\r\n    useEffect(() => {\r\n        function handleMouseMove (e: MouseEvent): void {\r\n            // Follow mouse\r\n            const { offsetX, pageY } = e\r\n            const centerX: number = playerCoordinates.x + playerCoordinates.width/2\r\n            const centerY: number = playerCoordinates.y * 3/2\r\n            const adjacent: number = getVectorLength({ from: { x: centerX, y: centerY }, to: { x: centerX, y: pageY } })\r\n            const opposite: number = offsetX - centerX\r\n            // tan(rodAngle) = opposite/adjacent\r\n            const angleRadians: number = Math.atan(opposite/adjacent)\r\n            const angleDegrees: number = angleRadians*180/Math.PI\r\n            if (!Number.isNaN(angleDegrees) && angleDegrees >= minAngle && angleDegrees <= maxAngle) {\r\n                // Move rod as angle changes\r\n                changeRodDirection(-angleDegrees)\r\n            }\r\n        }\r\n        const handleMouseMoveThrottle = throttle(handleMouseMove, 50)\r\n\r\n        // Disable mousemove event once bait has been thrown\r\n        if (isThrowing) {\r\n            window.removeEventListener('mousemove', handleMouseMoveThrottle, false)\r\n        } else {\r\n            window.addEventListener('mousemove', handleMouseMoveThrottle, false)\r\n        }\r\n        \r\n        return () => window.removeEventListener('mousemove', handleMouseMoveThrottle, false)\r\n    }, [playerCoordinates, changeRodDirection, isThrowing])\r\n\r\n    // Prepare throw\r\n    useEffect(() => {\r\n        function prepare (timestamp: number): void {\r\n            if (isPreparingThrow) {\r\n                if (gaugeValueRef.current < 100) {\r\n                    let nextValue = gaugeValueRef.current + gaugeValueRef.current/20 + .5\r\n                    if (nextValue > 100) nextValue = 100\r\n                    gaugeValueRef.current = nextValue //= Math.min(timestamp, gaugeValueRef.current + 1)\r\n                    setGaugeValue(gaugeValueRef.current)\r\n                    requestRef.current = requestAnimationFrame(prepare)\r\n                } else {\r\n                    // Value has reached max: set down to zero and cancel throw\r\n                    gaugeValueRef.current = 0\r\n                    setGaugeValue(0)  \r\n                    setIsPreparingThrow(false)\r\n                }\r\n            }\r\n        }\r\n        if (isPreparingThrow) {\r\n            // Prepare throw\r\n            requestRef.current = requestAnimationFrame(prepare)\r\n        } else {\r\n            if (requestRef.current) {\r\n                cancelAnimationFrame(requestRef.current)\r\n                requestRef.current = null\r\n            }\r\n        }\r\n\r\n        return () => cancelAnimationFrame(requestRef.current)\r\n    }, [isPreparingThrow, confirmThrow])\r\n\r\n    const gaugeMessage = useMemo((): ReactNode => {\r\n        if (!gaugeValueRef) return null\r\n        if (gaugeValueRef.current === null || gaugeValueRef.current < 5) return <span className={`${styles.gaugeMSG} ${styles.pushHere}`}>Push</span>\r\n        if (gaugeValueRef.current >= 5 && gaugeValueRef.current < 50) return <span className={styles.gaugeMSG}>Hold</span>\r\n        if (gaugeValueRef.current >= 50 && gaugeValueRef.current < 80) return <span className={`${styles.gaugeMSG} ${styles.high}`}>Release</span>\r\n        if (gaugeValueRef.current >= 80) return <span className={`${styles.gaugeMSG} ${styles.optimal}`}>Now</span>\r\n    }, [gaugeValueRef.current])\r\n\r\n    // Hide menu when player is throwing fishing line\r\n    if (isThrowing) return null\r\n\r\n    return <nav className={`${styles.navigation} menu`}>\r\n        <button\r\n            className={`btn btn-cancel ${styles.cancelBTN}`}\r\n            onClick={goBack}\r\n        >\r\n            Cancel\r\n        </button>\r\n        <div className={`${styles.gauge} ${isPushing && isPreparingThrow ? styles.userPush : ''}`} ref={gaugeRef}>\r\n            <ProgressCircle\r\n                value={gaugeValue}\r\n                trackClass={styles.track}\r\n                centerClass={styles.center}\r\n            >\r\n                {gaugeMessage}\r\n            </ProgressCircle>\r\n        </div>\r\n    </nav>\r\n}) as React.FC<Props>","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\WaitFish\\index.tsx",["288","289","290","291"],"import React, { FC, useState, useEffect, useMemo, useCallback, Dispatch, SetStateAction } from 'react'\r\nimport gameProcesses from '../index.json'\r\nimport { Coordinates } from '../../../../interfaces/position'\r\nimport throttle from '../../../../utils/throttle'\r\nimport { BsArrowRepeat } from 'react-icons/bs'\r\nimport styles from './index.module.sass'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { makeBaitAvailableAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    baitOffset: Coordinates,\r\n    setBaitOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitDistance: number,\r\n    lineLength: number,\r\n    setBaitType: Dispatch<SetStateAction<string>>,\r\n    setProcess: Dispatch<SetStateAction<string>>,\r\n    setRodAngle: Dispatch<SetStateAction<number>>,\r\n    scrollToPlayer: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    scrollToBait: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    setIsBarometerVisible: Dispatch<SetStateAction<boolean>>,\r\n    isBarometerVisible: boolean\r\n}\r\n\r\nconst WaitFish: FC<Props> = ({\r\n    baitOffset,\r\n    setBaitOffset,\r\n    baitDistance,\r\n    lineLength,\r\n    setBaitType,\r\n    setProcess,\r\n    setRodAngle,\r\n    scrollToPlayer,\r\n    scrollToBait,\r\n    isBarometerVisible,\r\n    setIsBarometerVisible\r\n}) => {\r\n    // Audio\r\n    const reelingSE = useMemo((): HTMLAudioElement => {\r\n        const se = new Audio(require('../../../../assets/audio/se/reeling.mp3').default)\r\n        se.loop = true\r\n        return se\r\n    }, [])\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const makeBaitAvailable = useCallback(\r\n        (bool: boolean) => dispatch(makeBaitAvailableAction(bool)), [dispatch]\r\n    )\r\n    // Fishes can only detect/interact with the bait during this process\r\n    useEffect(() => {\r\n        console.log('huigut')\r\n        makeBaitAvailable(true)\r\n        return () => makeBaitAvailable(false)\r\n    }, [])\r\n\r\n    // State\r\n    const [isReeling, setIsReeling] = useState<boolean>(false)\r\n    const [isMouseDown, setIsMouseDown] = useState<boolean | null>(null)\r\n\r\n    // Go back to previous process (retry throwing line)\r\n    const goBack = useCallback(\r\n        (): void => {\r\n            setBaitType('default')\r\n            scrollToPlayer('smooth')\r\n            setProcess(gameProcesses.THROW_LINE)\r\n        }, [scrollToPlayer, setProcess, setBaitType]\r\n    )\r\n\r\n    const reelIn = useCallback(\r\n        ():void => {\r\n            if (baitDistance > 0) {\r\n                // REEL IN\r\n                !isReeling && setIsReeling(true)\r\n                // Line length that we need to reel in during this execution\r\n                const step: number = 4\r\n                // Find out angle\r\n                const angleRadians: number = Math.atan(baitOffset.x/baitOffset.y)\r\n                const angleDegrees: number = angleRadians*180/Math.PI\r\n                // Find out next offset coords from angle and hypotenuse\r\n                const hypotenuse: number = lineLength - step\r\n                const opposite: number = Math.sin(angleRadians) * hypotenuse\r\n                const adjacent: number = Math.cos(angleRadians) * hypotenuse\r\n                // Apply translation and lean fishrod towards target\r\n                setBaitOffset({ x: opposite, y: adjacent })\r\n                setRodAngle(-angleDegrees)\r\n                // Scroll to new position\r\n                scrollToBait()\r\n            } else {\r\n                // PLAYER HAS REELED ALL THE LINE IN\r\n                setIsReeling(false)\r\n                goBack()\r\n            }\r\n        }, [lineLength, isReeling, baitDistance, goBack]\r\n    )\r\n\r\n    // Show barometer if it's not visible\r\n    useEffect(() => {\r\n        if (!isBarometerVisible) {\r\n            setIsBarometerVisible(true)\r\n        }\r\n    }, [])\r\n\r\n    // Reeling effects\r\n    useEffect(() => {\r\n        if (isReeling) {\r\n            // Play sound effect\r\n            const reelingSEPromise = reelingSE.play()\r\n            if (typeof reelingSEPromise !== 'undefined') {\r\n                reelingSEPromise\r\n                .then(() => null)\r\n                .catch(() => console.log('Failed to play reeling SE'))\r\n            }\r\n        } else {\r\n            // Stop sound effect if it's playing\r\n            if (!reelingSE.paused) {\r\n                reelingSE.pause()\r\n                reelingSE.currentTime = 0\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if (!reelingSE.paused) reelingSE.pause()\r\n        }\r\n    }, [isReeling])\r\n\r\n    // Attach event listeners\r\n    // Cancel event\r\n    useEffect(() => {\r\n        function handleBackSpace (e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 8: // Backspace\r\n                case 46: // Delete\r\n                case 48: // 0\r\n                    e.preventDefault()\r\n                    goBack()\r\n                    break\r\n            }\r\n        }\r\n        document.addEventListener('keydown', handleBackSpace, true)\r\n        return () => document.removeEventListener('keydown', handleBackSpace, true)\r\n    }, [goBack])\r\n    // Space/Enter keys\r\n    useEffect(() => {\r\n        function handleSpace (e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    e.preventDefault()\r\n                    reelIn()\r\n                    break\r\n            }\r\n        }\r\n        const handleSpaceThrottle = throttle(handleSpace, 1000)\r\n        function handleSpaceUp (e: KeyboardEvent): void {\r\n            switch (e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    // Stop reeling\r\n                    setIsReeling(false)\r\n                    break\r\n            }\r\n        } \r\n        \r\n        document.addEventListener('keydown', handleSpaceThrottle, true)\r\n        document.addEventListener('keyup', handleSpaceUp, false)\r\n        return () => {\r\n            document.removeEventListener('keydown', handleSpaceThrottle, true)\r\n            document.removeEventListener('keyup', handleSpaceUp, false)\r\n        }\r\n    }, [reelIn])\r\n    // Mousedown/up\r\n    useEffect(() => {\r\n        function handleMouseDown (e: MouseEvent): void {\r\n            setIsMouseDown(true)\r\n        }\r\n        function handleMouseUp (e: MouseEvent) : void {\r\n            setIsMouseDown(false)\r\n        }\r\n        document.body.addEventListener('mousedown', handleMouseDown, false)\r\n        document.body.addEventListener('mouseup', handleMouseUp, false)\r\n        document.body.addEventListener('touchstart', handleMouseDown, false)\r\n        document.body.addEventListener('touchend', handleMouseUp, false)\r\n\r\n        return () => {\r\n            document.body.removeEventListener('mousedown', handleMouseDown, false)\r\n            document.body.removeEventListener('mouseup', handleMouseUp, false)\r\n            document.body.removeEventListener('touchstart', handleMouseDown, false)\r\n            document.body.removeEventListener('touchend', handleMouseUp, false)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        if (isMouseDown) {\r\n            // Mouse down\r\n            throttle(reelIn, 1000)()\r\n        } else if (isMouseDown === false) {\r\n            // Mouse up\r\n            setIsReeling(false)\r\n            // Reinitialize isMouseDown state\r\n            setIsMouseDown(null)\r\n        }\r\n    }, [isMouseDown, reelIn])\r\n\r\n    // Disable other keys\r\n    useEffect(() => {\r\n        function disableKeys (e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 37: // Left\r\n                case 38: // Top\r\n                case 39: // Right\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n            }\r\n        }\r\n        document.addEventListener('keydown', disableKeys, false)\r\n        return () => document.removeEventListener('keydown', disableKeys, false)\r\n    }, [])\r\n\r\n    return <nav className={styles.navigation}>\r\n        <button\r\n            className={`btn btn-cancel ${styles.repeatBTN}`}\r\n            onClick={goBack}\r\n        >\r\n            <BsArrowRepeat />\r\n        </button>\r\n    </nav>\r\n}\r\n\r\nexport default WaitFish","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\game.ts",["292","293","294","295","296","297","298","299","300"],"import {\r\n    SET_GAME_PROCESS,\r\n    SPEND_ONE_MINUTE,\r\n    ENABLE_BGM,\r\n    OPEN_MAIN_MENU,\r\n    SET_IS_MAIN_MENU_CLOSING,\r\n    SET_FISHROD_LEVEL,\r\n    EARN_MONEY,\r\n    SPEND_MONEY,\r\n    GAME_NOTIFICATION\r\n} from '../actions/types'\r\nimport gameProcesses from '../../components/Game/processes/index.json'\r\nimport { GameStats } from '../../interfaces/evolution'\r\nimport { GameNotif } from '../../interfaces/game'\r\nimport { rodLevels } from '../../components/Game/evolution'\r\n\r\nexport interface State {\r\n    process: string,\r\n    isMainMenuOpen: boolean,\r\n    isMainMenuClosing: boolean,\r\n    isBGMEnabled: boolean,\r\n    gameStats: GameStats,\r\n    gameNotification: GameNotif|null\r\n}\r\n\r\nconst initialGameStats: GameStats = {\r\n    gameTimeSpent: 0,\r\n    doubloons: 50,\r\n    fishrodLevel: rodLevels.find(lvl => lvl._id === 'Starter')\r\n}\r\n\r\nconst initialState: State = {\r\n    process: gameProcesses.INITIAL,\r\n    isMainMenuOpen: false,\r\n    isMainMenuClosing: false,\r\n    isBGMEnabled: typeof localStorage['bgm_enabled'] !== 'undefined' ? JSON.parse(localStorage['bgm_enabled']) : true,\r\n    gameStats: localStorage['gameStats'] ? JSON.parse(localStorage['gameStats']) : initialGameStats,\r\n    gameNotification: null\r\n}\r\n\r\nexport default function (state: State = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_GAME_PROCESS:\r\n            return { ...state, process: action.payload }\r\n            break\r\n        case SPEND_ONE_MINUTE: {\r\n            const newTime = state.gameStats.gameTimeSpent + 1\r\n            const newStats = { ...state.gameStats, gameTimeSpent: newTime }\r\n            \r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        } case OPEN_MAIN_MENU:\r\n            return { ...state, isMainMenuOpen: action.payload }\r\n            break\r\n        case SET_IS_MAIN_MENU_CLOSING:\r\n            return { ...state, isMainMenuClosing: action.payload }\r\n            break\r\n        case SET_FISHROD_LEVEL: {\r\n            const newGameStats = {\r\n                ...state.gameStats,\r\n                fishrodLevel: rodLevels.find(lvl => lvl._id === action.payload)\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newGameStats)\r\n            return {\r\n                ...state,\r\n                gameStats: newGameStats\r\n            }\r\n        }\r\n        case EARN_MONEY: {\r\n            const maxDoubloons = 999999\r\n            const myDoubloons = state.gameStats.doubloons\r\n            const canEarnMore = myDoubloons + action.payload < maxDoubloons\r\n            let nextDoubloons = myDoubloons\r\n            if (!canEarnMore) nextDoubloons = maxDoubloons\r\n            else nextDoubloons = myDoubloons + action.payload\r\n\r\n            // Save game stats\r\n            const newStats = {\r\n                ...state.gameStats,\r\n                doubloons: nextDoubloons\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        }\r\n        case SPEND_MONEY: {\r\n            const minDoubloons = 0\r\n            const myDoubloons = state.gameStats.doubloons\r\n            const canSpendMore = myDoubloons - action.payload > minDoubloons\r\n            let nextDoubloons = myDoubloons\r\n            if (!canSpendMore) nextDoubloons = minDoubloons\r\n            else nextDoubloons = myDoubloons - action.payload\r\n\r\n            // Save game stats\r\n            const newStats = {\r\n                ...state.gameStats,\r\n                doubloons: nextDoubloons\r\n            }\r\n            localStorage['gameStats'] = JSON.stringify(newStats)\r\n\r\n            return { ...state, gameStats: newStats }\r\n            break\r\n        }\r\n        case ENABLE_BGM:\r\n            localStorage['bgm_enabled'] = JSON.stringify(action.payload)\r\n            return {\r\n                ...state,\r\n                isBGMEnabled: action.payload\r\n            }\r\n            break\r\n        case GAME_NOTIFICATION:\r\n            return { ...state, gameNotification: action.payload }\r\n            break\r\n        default: return state\r\n    }\r\n}","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\inventory.ts",["301","302","303","304","305"],"import {\r\n    ADD_INVENTORY_ENTRY,\r\n    REMOVE_INVENTORY_ENTRY\r\n} from '../actions/types'\r\nimport { Item, InventoryEntry } from '../../interfaces/items'\r\nimport allItems from '../../components/items/items.json'\r\n\r\ninterface State {\r\n    entries: InventoryEntry[],\r\n    maxEntries: number\r\n}\r\n\r\nconst initialEntries: InventoryEntry[] = [\r\n    {\r\n        item: allItems['Starter'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Beginner'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Intermediate'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Advanced'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Expert'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Abyssal'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Legendary'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Mushroom'],\r\n        amount: 3\r\n    },\r\n    {\r\n        item: allItems['Fly'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Angelfish'],\r\n        amount: 1\r\n    }\r\n]\r\n\r\nconst initialState = localStorage['inventory'] ?\r\n    JSON.parse(localStorage['inventory']) \r\n    : ({\r\n        entries: initialEntries,\r\n        maxEntries: 20\r\n    })\r\n\r\nexport default function (state: State = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_INVENTORY_ENTRY: {\r\n            let newState = state\r\n            // Check if item is already in inventory\r\n            const itemInInventory = state.entries.find(entry => entry.item._id === action.payload.itemID)\r\n\r\n            if (itemInInventory) {\r\n                // Add amount only\r\n                let newAmount = itemInInventory.amount + action.payload.amount\r\n                if (newAmount > 99) newAmount = 99 // Limit max amount to 99\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.map(entry => {\r\n                        if (entry.item._id === action.payload.itemID) {\r\n                            return { ... entry, amount: newAmount }\r\n                        }\r\n                        return entry\r\n                    })\r\n                }\r\n            } else {\r\n                // Add new entry to inventory\r\n                if (state.entries.length < state.maxEntries) {\r\n                    // Find item data\r\n                    const item = allItems[action.payload.itemID]\r\n                    if (!item) {\r\n                        // This item does not exist !\r\n                        return state\r\n                    } else {\r\n                        newState = {\r\n                            ...state,\r\n                            entries: [...state.entries, { item, amount: action.payload.amount }]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Error: your inventory is full\r\n                    return state\r\n                }\r\n            }\r\n\r\n            localStorage['inventory'] = JSON.stringify(newState)\r\n            return newState\r\n            break\r\n        }\r\n        case REMOVE_INVENTORY_ENTRY: {\r\n            let newState = state\r\n            // Check if item is already in inventory\r\n            const itemInInventory = state.entries.find(entry => entry.item._id === action.payload.itemID)\r\n            if (!itemInInventory) return state\r\n\r\n            // Check if new amount is a positive integer\r\n            let newAmount = itemInInventory.amount - action.payload.amount\r\n\r\n            if (newAmount <= 0) {\r\n                // Remove entry from inventory\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.filter(entry => entry.item._id !== action.payload.itemID)\r\n                }\r\n            } else {\r\n                // Keep entry and replace amount\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.map(entry => {\r\n                        if (entry.item._id === action.payload.itemID) {\r\n                            return { ...entry, amount: newAmount }\r\n                        }\r\n                        return entry\r\n                    })\r\n                }\r\n            }\r\n\r\n            localStorage['inventory'] = JSON.stringify(newState)\r\n            return newState\r\n            break\r\n        }\r\n        default: return state\r\n    }\r\n}","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\position.ts",["306","307"],"C:\\www\\personal\\fishing-game\\src\\store\\reducers\\fishing.ts",["308","309","310","311","312","313","314","315"],"import {\r\n    MAKE_BAIT_AVAILABLE,\r\n    PUT_ON_BAIT_ITEM,\r\n    BAIT_FALL_IN_WATER,\r\n    SET_HOOKED_FISH,\r\n    SET_LINE_TENSION,\r\n    INCREMENT_LINE_TENSION,\r\n    DECREMENT_LINE_TENSION,\r\n    SET_IS_PULLING\r\n} from '../actions/types'\r\nimport { FishData } from '../../interfaces/fishes'\r\nimport { Item } from '../../interfaces/items'\r\nimport allItems from '../../components/items/items.json'\r\n\r\nexport interface State {\r\n    isBaitAvailable: boolean,\r\n    baitFood: Item,\r\n    hasBaitJustFallen: boolean, // Use this as an event for fishes to detect when and bait falls, go away and set back to false if it falls at their position\r\n    hookedFish: FishData, // uuid of the fish that has taken the bait\r\n    lineTension: number, // Min: -100; max: 100,\r\n    isPulling: boolean // Whether fish is pulling on the line\r\n}\r\n\r\nconst initialState: State = {\r\n    isBaitAvailable: false,\r\n    baitFood: localStorage['baitFood'] ? JSON.parse(localStorage['baitFood']) : allItems['Mushroom'],\r\n    hasBaitJustFallen: false,\r\n    hookedFish: null,\r\n    lineTension: 0,\r\n    isPulling: false\r\n}\r\n\r\nexport default function(state: State = initialState, action): State {\r\n    switch(action.type) {\r\n        case MAKE_BAIT_AVAILABLE:\r\n            return { ...state, isBaitAvailable: action.payload }\r\n            break\r\n        case PUT_ON_BAIT_ITEM:\r\n            localStorage['baitFood'] = JSON.stringify(action.payload)\r\n            return { ...state, baitFood: action.payload }\r\n            break\r\n        case BAIT_FALL_IN_WATER:\r\n            return { ...state, hasBaitJustFallen: action.payload }\r\n            break\r\n        case SET_HOOKED_FISH:\r\n            return { ...state, hookedFish: action.payload }\r\n            break\r\n        case SET_LINE_TENSION:\r\n            return { ...state, lineTension: action.payload }\r\n            break\r\n        case INCREMENT_LINE_TENSION:\r\n            return { ...state, lineTension: state.lineTension + action.payload }\r\n            break\r\n        case DECREMENT_LINE_TENSION:\r\n            return { ...state, lineTension: state.lineTension - action.payload }\r\n        case SET_IS_PULLING:\r\n            return { ...state, isPulling: action.payload }\r\n            break\r\n        default: return state\r\n    }\r\n}","C:\\www\\personal\\fishing-game\\src\\utils\\throttle.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\fishing.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\animations\\index.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Inventory\\index.tsx",["316","317","318","319","320","321","322","323","324","325","326","327","328"],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\FishArea\\index.tsx",["329"],"import React, { FC, useRef } from 'react'\r\nimport FishGroup from '../FishGroup'\r\nimport { randomIntFromInterval } from '../../../../utils/math'\r\nimport { Fish } from '../../../../interfaces/fishes'\r\nimport { Path } from '../../../../interfaces/position'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\ninterface FishEntryProps {\r\n    size: number[],\r\n    strength: number[],\r\n    [key: string]: any\r\n}\r\n\r\ninterface FishEntry {\r\n    amount: number,\r\n    component: any,\r\n    fish: Fish,\r\n    props: any\r\n}\r\n\r\ninterface Props {\r\n    path: Path,\r\n    fishes: FishEntry[],\r\n}\r\n\r\nconst FishArea: FC<Props> = ({ path, fishes }) => {\r\n    const fishGroupID = useRef<string>(uuid())\r\n\r\n    return <FishGroup groupID={fishGroupID.current} path={path} render={groupProps => {\r\n        return (\r\n         /* Pass props to each fish */\r\n        fishes\r\n        .map((fishEntry: FishEntry) => {\r\n            const { amount, fish, props } = fishEntry\r\n            const Fish: any = fishEntry.component\r\n            // Render \"amount\" times the provided component\r\n            let result = []\r\n            for (let i = 0; i < amount; i++) {\r\n                const fishID = uuid()\r\n\r\n                result.push(\r\n                    <Fish\r\n                        key={fishID}\r\n                        fishID={fishID}\r\n                        fish={fish}\r\n                        groupID={fishGroupID.current}\r\n                        {...props}\r\n                        {...groupProps}\r\n                        area={groupProps.path}\r\n                        // Generate random props for a unique fish\r\n                        size={randomIntFromInterval(props.size[0], props.size[1])}\r\n                        strength={randomIntFromInterval(props.strength[0], props.strength[1])}\r\n                     />\r\n                )\r\n            }\r\n            return result\r\n        })\r\n        .flat()\r\n    )}} />\r\n}\r\n\r\nexport default React.memo(FishArea)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\index.tsx",["330","331","332","333","334"],"import React, { ReactNode, useState, useMemo, useEffect, useRef } from 'react'\r\nimport Buy from './Buy'\r\nimport Sell from './Sell'\r\nimport { randomIntFromInterval } from '../../../../utils/math'\r\nimport { GiPirateCaptain } from 'react-icons/all'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { useSelector } from 'react-redux'\r\nimport { inventoryLengthSelector } from '../../../../store/selectors/inventory'\r\n\r\nexport enum ContentID {\r\n    ROOT = 'ROOT',\r\n    BUY = 'BUY',\r\n    SELL = 'SELL'\r\n}\r\n\r\n// Seller comments\r\nexport const greetings: string[] = [\r\n    'Ahoy, Matey ! What brings you here ?',\r\n    'The better your fish rod, the bigger fishes you\\'ll catch ! How convenient that I\\'m selling some',\r\n    'Do you have some fish for me ?'\r\n]\r\nexport const thanks: string[] = [\r\n    'Thank ya !',\r\n    'It\\'s a pleasure doing business with ye',\r\n    'Don\\'t ya lose it, mate !'\r\n]\r\nexport const randomGreeting = (): string => greetings[randomIntFromInterval(0, greetings.length - 1)]\r\nexport const randomThanks = (): string => thanks[randomIntFromInterval(0, thanks.length - 1)]\r\n\r\n\r\nconst Shop: React.FC = () => {\r\n    // REDUX\r\n    const inventoryLength = useSelector(inventoryLengthSelector)\r\n\r\n    // STATE\r\n    const [currentContentID, setCurrentContentID] = useState<ContentID>(ContentID.ROOT)\r\n\r\n    // Seller comments\r\n    const [sellerPhrase, setSellerPhrase] = useState<string>(randomGreeting())\r\n    const [sellerPhraseSpelled, setSellerPhraseSpelled] = useState<string>('')\r\n    const sellerPhraseSpelledJSX = useMemo((): ReactNode[] => {\r\n        return sellerPhraseSpelled.split('').map((letter: string, index: number) => (\r\n            <span\r\n                key={index}\r\n                className={styles.letter}\r\n                style={{ filter: index >= sellerPhraseSpelled.length - 5 ? `hue-rotate(${index*360/sellerPhrase.length}deg)` : 'hue-rotate(0)' }}\r\n            >{letter}</span>\r\n        ))\r\n    }, [sellerPhraseSpelled])\r\n    // Spell seller's text letter by letter\r\n    const spellingIntervalID = useRef<number>(null)\r\n    const lastSellerPhraseRef = useRef<string>(null)\r\n    useEffect(() => {\r\n        // Restart process if seller's dialog changes\r\n        if (\r\n            lastSellerPhraseRef && lastSellerPhraseRef.current &&\r\n            spellingIntervalID && spellingIntervalID.current &&\r\n            sellerPhrase != lastSellerPhraseRef.current\r\n        ) {\r\n            setSellerPhraseSpelled('')\r\n            window.clearInterval(spellingIntervalID.current)\r\n        }\r\n\r\n        spellingIntervalID.current = window.setInterval(() => {            \r\n            if (sellerPhraseSpelled.length < sellerPhrase.length) {\r\n                setSellerPhraseSpelled(sellerPhraseSpelled + sellerPhrase[sellerPhraseSpelled.length])\r\n            } else {\r\n                window.clearInterval(spellingIntervalID.current)\r\n            }\r\n        }, 20)\r\n        lastSellerPhraseRef.current = sellerPhrase\r\n        \r\n        return () => {\r\n            window.clearInterval(spellingIntervalID.current)\r\n        }\r\n    }, [sellerPhrase, sellerPhraseSpelled])\r\n\r\n    const currentContentJSX = useMemo((): ReactNode => {\r\n        switch(currentContentID) {\r\n            case ContentID.ROOT:\r\n                return <div className={styles.root}>\r\n                    <ul>\r\n                        <li>\r\n                            <button onClick={() => setCurrentContentID(ContentID.BUY)} className={`btn btn-primary`}>\r\n                                I want to buy\r\n                            </button>\r\n                        </li>\r\n                        {inventoryLength > 0 && (\r\n                            <li>\r\n                                <button onClick={() => setCurrentContentID(ContentID.SELL)} className={`btn btn-primary`}>\r\n                                    I have stuff for you\r\n                                </button>\r\n                            </li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n                break\r\n            case ContentID.BUY:\r\n                return <Buy\r\n                    setSellerPhrase={setSellerPhrase}\r\n                    setCurrentContentID={setCurrentContentID}\r\n                 />\r\n                break\r\n            case ContentID.SELL:\r\n                return <Sell\r\n                    setSellerPhrase={setSellerPhrase}\r\n                    setCurrentContentID={setCurrentContentID}\r\n                 />\r\n                break\r\n            default: return null\r\n        }\r\n    }, [currentContentID, inventoryLength])\r\n \r\n    return <div className={styles.shop}>\r\n        <main className={styles.mainContent}>\r\n            {currentContentJSX}\r\n        </main>\r\n        <section className={styles.seller}>\r\n            <figure className={styles.sellerFigure}>\r\n                <GiPirateCaptain />\r\n                <figcaption>Captain Joe</figcaption>\r\n            </figure>\r\n            <p className={styles.sellerPhrase}>{sellerPhraseSpelledJSX}</p>\r\n        </section>\r\n    </div>\r\n}\r\n\r\nexport default Shop","C:\\www\\personal\\fishing-game\\src\\components\\ProgressCircle\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\fishes\\Default\\index.tsx",["335","336","337","338","339","340","341","342","343","344"],"import React, { useCallback, ReactNode, useState, useMemo, useEffect, useLayoutEffect, useRef } from 'react'\r\nimport { GameNotif, GameNotifType } from '../../../interfaces/game'\r\nimport { Coordinates, Path, Map } from '../../../interfaces/position'\r\nimport { Item } from '../../../interfaces/items'\r\nimport { Fish, FishData } from '../../../interfaces/fishes'\r\nimport { randomIntFromInterval, probability, toDeg } from '../../../utils/math'\r\nimport { getNextCoordinatesOfPath, areCoordinatesInPath, getAngleFromVerticalAxis } from '../../../utils/position'\r\nimport { takeBaitAnim } from '../../Game/animations'\r\nimport { FaHeart, FaTimes } from 'react-icons/fa'\r\nimport styles from './index.module.sass'\r\nimport gameProcesses from '../../Game/processes/index.json'\r\nimport allCategories from '../../items/categories.json'\r\n\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { mapSelector, baitLakeCoordsSelector } from '../../../store/selectors/position'\r\nimport {\r\n    isBaitAvailableSelector,\r\n    baitFoodSelector,\r\n    hookedFishSelector,\r\n    hasBaitJustFallenSelector\r\n} from'../../../store/selectors/fishing'\r\nimport { setGameNotificationAction } from '../../../store/actions/game'\r\nimport { makeBaitAvailableAction, setHookedFishAction, loseBaitAction } from '../../../store/actions/fishing'\r\nimport { setGameProcessAction } from '../../../store/actions/game'\r\n\r\n// Notif text when player hooks too soon\r\nconst fleePhrases: string[] = [\r\n    'Fish goes away',\r\n    'Fish is afraid',\r\n    'You gotta hook the fish when it\\'s green'\r\n]\r\nconst getRandomFleePhrase = (): string => fleePhrases[randomIntFromInterval(0, fleePhrases.length - 1)]\r\n\r\ninterface Props {\r\n    fish?: Fish, // fish stats template from json file\r\n    groupID: string, // fish group uuid\r\n    fishID: string, // fish uuid\r\n    _id: string, // fish name\r\n    size: number, // Size of the fish in px; width = 1em\r\n    strength: number,\r\n    area?: Path, // Path of the area the fish belongs to\r\n    detectionScope?: number, // Number of pixels around fish where it can detect the bait,\r\n    roamingInterval?: number, // Interval in milliseconds between fish moves when it's roaming\r\n    roamingDistance?: number, // Distance in px that fish travels when it's roaming\r\n    edibleFoods?: string[], // What foods the fish likes\r\n    biteChance?: number, // Probability that the fish will take the bait if it's attracted to it (min: 0; max: 1)\r\n    pullChance?: number, // Probability that the fish will pull on the line at each time interval during battle process (min: 0; max: 1)\r\n    catchTimeLapse?: number[] // Interval of time in which player is able to hook the fish after it took the bait; first n is the delay after the bait was taken, second is the duration\r\n    isBoss?: boolean,\r\n    className?: string,\r\n    children?: ReactNode,\r\n    // Redux\r\n    map?: Map,\r\n    baitLakeCoords?: Coordinates\r\n}\r\n\r\n// Lake is the referential of fish coords\r\nconst DefaultFish: React.FC<Props> = ({\r\n    fish = null,\r\n    fishID,\r\n    groupID,\r\n    _id,\r\n    size = 20,\r\n    strength = 10,\r\n    area,\r\n    detectionScope = 75,\r\n    roamingInterval,\r\n    roamingDistance,\r\n    edibleFoods = ['Mushroom'],\r\n    biteChance = .75,\r\n    pullChance = .5,\r\n    catchTimeLapse =  [0, 2000],\r\n    isBoss = false,\r\n    className = '',\r\n    children,\r\n}) => {\r\n    // REDUX\r\n    const hookedFish = useSelector(hookedFishSelector)\r\n    const baitLakeCoords: Coordinates = useSelector(baitLakeCoordsSelector)\r\n    const map: Map = useSelector(mapSelector)\r\n    const isBaitAvailable: boolean = useSelector(isBaitAvailableSelector)\r\n    const baitFood: Item = useSelector(baitFoodSelector)\r\n    const hasBaitJustFallen = useSelector(hasBaitJustFallenSelector)\r\n    const dispatch = useDispatch()\r\n    const makeBaitAvailable = useCallback((bool: boolean): void => dispatch(makeBaitAvailableAction(bool)), [])\r\n    const setHookedFish = useCallback((fish: FishData): void => dispatch(setHookedFishAction(fish)), [])\r\n    const loseBait = useCallback((): void => dispatch(loseBaitAction()), [])\r\n    const setGameProcess = useCallback((newProcess: string): void => dispatch(setGameProcessAction(newProcess)), [])\r\n    const setGameNotification = useCallback((notif: GameNotif): void => dispatch(setGameNotificationAction(notif)), [])\r\n    \r\n    // REFS\r\n    const fishPathRef = useRef<HTMLDivElement>(null)\r\n\r\n    // STATE\r\n    const [fishDirection, setFishDirection] = useState<number>(() => randomIntFromInterval(-180, 180))\r\n    const [isRoaming, setIsRoaming] = useState<boolean>(true)\r\n    const [moveTransition, setMoveTransition] = useState<string>('none')\r\n    const [opacity, setOpacity] = useState(1)\r\n    const [wouldHookSuccessfully, setWouldHookSuccessfully] = useState<boolean>(false)\r\n    const [canTryToCatch, setCanTryToCatch] = useState<boolean>(false)\r\n\r\n    // Initialize fish position somewhere inside the area/group it belongs to\r\n    const [fishCoords, setFishCoords] = useState<Coordinates>({\r\n        x: area.from.x,\r\n        y: area.from.y\r\n    })\r\n    const fishWidth = useMemo((): number => size, [size])\r\n    const fishHeight = useMemo((): number => size*3/8, [size])\r\n    const isFishHorizontal = useMemo((): boolean => (fishDirection <= 135 && fishDirection >= 45) || (fishDirection >= -135 && fishDirection <= -45), [fishDirection])\r\n    const rectWidth = useMemo((): number => isFishHorizontal ? fishWidth : fishHeight, [isFishHorizontal, fishWidth, fishHeight])\r\n    const rectHeight = useMemo((): number => isFishHorizontal ? fishHeight : fishWidth, [isFishHorizontal, fishWidth, fishHeight])\r\n\r\n    const fishPath = useMemo((): Path => {\r\n        const halfWidth: number = rectWidth/2\r\n        const halfHeight: number = rectHeight/2\r\n        return ({\r\n            from: {\r\n                x: fishCoords.x - halfWidth,\r\n                y: fishCoords.y - halfHeight\r\n            },\r\n            to: {\r\n                x: fishCoords.x + halfWidth,\r\n                y: fishCoords.y + halfHeight\r\n            }\r\n        })\r\n    }, [fishCoords, rectWidth, rectHeight])\r\n\r\n    const detectionPath = useMemo((): Path => {\r\n        return ({\r\n            from: {\r\n                x: fishPath.from.x - detectionScope,\r\n                y: fishPath.from.y - detectionScope\r\n            },\r\n            to: {\r\n                x: fishPath.to.x + detectionScope,\r\n                y: fishPath.to.y + detectionScope\r\n            }\r\n        })\r\n    }, [fishPath, detectionScope])\r\n\r\n    // Check when bait gets within fish's detection scope\r\n    const isInScope = useMemo((): boolean => {\r\n        return isBaitAvailable && areCoordinatesInPath(baitLakeCoords, detectionPath)\r\n    }, [baitLakeCoords, detectionPath, isBaitAvailable])\r\n\r\n    // Check whether fish likes the food on the fishing hook\r\n    const likesBait = useMemo(() => {\r\n        if (!baitFood) return false\r\n        return edibleFoods.includes(baitFood._id)\r\n    }, [edibleFoods, baitFood])\r\n\r\n    // FUNCTIONS\r\n    const goAway = useCallback(\r\n        (): void => {\r\n            setFishCoords({\r\n                x: randomIntFromInterval(area.from.x, area.to.x),\r\n                y: randomIntFromInterval(area.from.y, area.to.y)\r\n            })\r\n            setFishDirection(randomIntFromInterval(-180, 180))\r\n            setOpacity(0)\r\n            window.setTimeout(() => {\r\n                if (setOpacity) {\r\n                    setOpacity(1)\r\n                }\r\n            }, 2000)\r\n        }, [setFishCoords, area, opacity]\r\n    )\r\n\r\n    const giveUpBait = useCallback(\r\n        (): void => {\r\n            window.clearTimeout(hookStartTimerIDRef.current)\r\n            window.clearTimeout(hookFailTimerIDRef.current)\r\n            window.clearTimeout(hookSucceedTimerIDRef.current)\r\n            setCanTryToCatch(false)\r\n            setWouldHookSuccessfully(false)\r\n            return setIsRoaming(true)\r\n        }, []\r\n    )\r\n\r\n    // This function gets called when a fish takes the bait and the player reacted too late\r\n    const handleHookFail = useCallback(\r\n        (): void => {\r\n            if (!inScopeRef.current || !!hookedFish) return giveUpBait()\r\n            else {\r\n                // Reinitialize fish behaviour\r\n                giveUpBait()\r\n                setWouldHookSuccessfully(false)\r\n                setCanTryToCatch(false)\r\n                setIsRoaming(true)\r\n\r\n                // Display notification\r\n                const baitColor = allCategories[baitFood.category]['colors'][1]\r\n                setGameNotification({\r\n                    type: GameNotifType.FAIL,\r\n                    html: {\r\n                        header: `<h3>Too late !</h3>`,\r\n                        body: `\r\n                            <p>A fish went away with your bait ...</p>\r\n                            <p>\r\n                                You lost \r\n                                <strong style=\"color: ${baitColor}\">\r\n                                    1 ${baitFood._id}\r\n                                </strong>\r\n                            </p>\r\n                        `\r\n                    },\r\n                    duration: 10\r\n                })\r\n\r\n                // Lose bait\r\n                loseBait()\r\n\r\n                // Go back to the shore automatically\r\n                setGameProcess(gameProcesses.INITIAL)\r\n            }\r\n        }, [isInScope, giveUpBait, hookedFish]\r\n    )\r\n\r\n    const randomMove = useCallback(\r\n        (): void => {\r\n            if (typeof document.hidden === \"undefined\" || document.hidden === false) {\r\n                const newAngle: number = randomIntFromInterval(-180, 180)\r\n                const distance: number = roamingDistance || fishWidth\r\n                const offsetCoords: Coordinates = getNextCoordinatesOfPath(newAngle, distance)\r\n                const newCoords: Coordinates = {\r\n                    x: fishCoords.x + offsetCoords.x,\r\n                    y: fishCoords.y + offsetCoords.y\r\n                }\r\n        \r\n                // Only move if newCoords are inside fish area\r\n                if (areCoordinatesInPath(newCoords, area)) {\r\n                    setFishDirection(-newAngle)\r\n                    setFishCoords(newCoords)\r\n                }\r\n            }\r\n        }, [fishCoords, fishDirection, roamingDistance, fishWidth, area, isInScope, likesBait]\r\n    )\r\n\r\n    const approachBait = useCallback(\r\n        (): void => {\r\n            // Lean towards bait from current position\r\n            const angle: number = toDeg(getAngleFromVerticalAxis({ from: baitLakeCoords, to: fishCoords }))\r\n            setMoveTransition('2s transform ease-in-out, 0s background ease, 0s border-color ease, .5s opacity ease')\r\n            setFishDirection(angle)\r\n            // Handle offset\r\n            let offsetX: number = 0\r\n            let offsetY: number = 0\r\n\r\n            offsetX = (angle > 0 && angle < 45) || (angle > 135 && angle <= 180) ? rectWidth/2 : offsetX\r\n            offsetX = angle < 0 ? -rectWidth : offsetX\r\n            offsetX = (angle < 45 && angle > -45) || angle > 135 ?  -rectHeight/2 : offsetX\r\n            offsetY = Math.abs(angle) > 90 ? rectHeight/2 : -rectHeight/2\r\n\r\n            setFishCoords({\r\n                x: baitLakeCoords.x + offsetX,\r\n                y: baitLakeCoords.y + offsetY\r\n            })\r\n        }, [baitLakeCoords, fishCoords, rectHeight, rectWidth]\r\n    )\r\n\r\n    // Handle take bait\r\n    // Timer IDs\r\n    const hookStartTimerIDRef = useRef<number>(null)\r\n    const hookSucceedTimerIDRef = useRef<number>(null)\r\n    const hookFailTimerIDRef = useRef<number>(null)\r\n    // We need to access current values of these refs during setTimeout\r\n    const inScopeRef = useRef<boolean>(null)\r\n    // Map dependencies to refs\r\n    useEffect(() => {\r\n        inScopeRef.current = isInScope\r\n    }, [isInScope])\r\n    const takeBait = useCallback(\r\n        (): void => {\r\n             // Stop roaming and approach bait\r\n            setIsRoaming(false)\r\n            const [delay, duration] = catchTimeLapse\r\n            const approachDuration = 4000\r\n            approachBait()\r\n            //console.log('approaching bait')\r\n            \r\n            hookFailTimerIDRef.current = window.setTimeout(\r\n                handleHookFail, approachDuration + delay + duration\r\n            )\r\n\r\n            hookSucceedTimerIDRef.current = window.setTimeout(() => {\r\n                if (!inScopeRef.current) return giveUpBait()\r\n                setWouldHookSuccessfully(true)\r\n                // Player would hook the fish successfully during this interval\r\n            }, approachDuration + delay)\r\n\r\n            // Fish will approach bait during x seconds before taking it\r\n            hookStartTimerIDRef.current = window.setTimeout(() => {\r\n                // If bait went out of scope or is unavailable, stop\r\n                if (!inScopeRef.current) {\r\n                    return giveUpBait()\r\n                }\r\n                \r\n                setCanTryToCatch(true)\r\n                takeBaitAnim(fishPathRef.current)\r\n                // \"takes bait\"; if tries to hook now, too soon\r\n            }, approachDuration)\r\n        }, [\r\n            catchTimeLapse,\r\n            approachBait,\r\n            handleHookFail,\r\n            giveUpBait\r\n        ]\r\n    )\r\n    // Allow player to hook the fish during the right timelapse\r\n    useEffect(() => {\r\n        function handleHook (): void {\r\n            if (isBaitAvailable) {\r\n                if (wouldHookSuccessfully) {\r\n                    // Hooked successfully\r\n                    setHookedFish({\r\n                        fishID,\r\n                        groupID,\r\n                        fish: {\r\n                            ...fish,\r\n                            strength,\r\n                            size,\r\n                            pullChance, // Use DefaultFish's default value if not set in json\r\n                            isBoss\r\n                        }\r\n                    })\r\n                    setGameProcess(gameProcesses.BATTLE)\r\n\r\n                    // Cancel failure and reinitialize state\r\n                    window.clearTimeout(hookFailTimerIDRef.current)                    \r\n                    setWouldHookSuccessfully(false)\r\n                    setCanTryToCatch(false)\r\n                    setMoveTransition('none')\r\n\r\n                    // Prevent more than one fish at a time to get hooked\r\n                    makeBaitAvailable(false)\r\n                } else {\r\n                    // Too soon\r\n                    // Fish flees\r\n                    makeBaitAvailable(true)\r\n                    goAway()\r\n                    // Notify\r\n                    setGameNotification({\r\n                    type: GameNotifType.FAIL,\r\n                    html: {\r\n                        header: `<h3>Too soon !</h3>`,\r\n                        body: `<p>${getRandomFleePhrase()}</p>`\r\n                    },\r\n                    duration: 5\r\n                })\r\n                }\r\n            } else console.log('Tried to hook but bait is not available ...')\r\n        }\r\n        function handleKeyPress (e: KeyboardEvent): void {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            switch(e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    handleHook()\r\n                    break\r\n            }\r\n        }\r\n        function handleClick (e: MouseEvent): void {\r\n            console.log('mouse downn')\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            handleHook()\r\n        }\r\n        function handleTouch (e: TouchEvent): void {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            handleHook()\r\n        }\r\n\r\n        if (canTryToCatch) {\r\n            document.addEventListener('keypress', handleKeyPress, true)\r\n            document.body.addEventListener('mousedown', handleClick, true)\r\n            document.body.addEventListener('touchstart', handleTouch, true)\r\n        } else {\r\n            document.removeEventListener('keypress', handleKeyPress, true)\r\n            document.body.removeEventListener('mousedown', handleClick, true)\r\n            document.body.removeEventListener('touchstart', handleTouch, true)\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('keypress', handleKeyPress, true)\r\n            document.body.removeEventListener('mousedown', handleClick, true)\r\n            document.body.removeEventListener('touchstart', handleTouch, true)\r\n        }\r\n    }, [wouldHookSuccessfully, canTryToCatch, isBaitAvailable, fishID, groupID, strength, size, goAway])\r\n\r\n    // Default fish behaviour when it's roaming\r\n    useEffect(() => {\r\n        let intervalID = null\r\n        const handleRoaming = (): void => {\r\n            if (!isInScope || !likesBait) randomMove()\r\n            else {\r\n                // Decide whether to take the bait\r\n                if (probability(biteChance)) {\r\n                    takeBait()\r\n                } else randomMove()\r\n            }\r\n        }\r\n\r\n        if (isRoaming && !hookedFish) {\r\n            intervalID = window.setInterval(handleRoaming, roamingInterval || randomIntFromInterval(3000, 6000))\r\n            setMoveTransition('1s all ease')\r\n        } else {\r\n            window.clearInterval(intervalID)\r\n        }\r\n\r\n        return () => {\r\n            window.clearInterval(intervalID)\r\n        }\r\n    }, [\r\n        isRoaming,\r\n        randomMove,\r\n        roamingInterval,\r\n        likesBait,\r\n        isInScope,\r\n        biteChance,\r\n        takeBait,\r\n        hookedFish\r\n    ])\r\n\r\n    // Flee if bait falls on fish\r\n    useEffect(() => {\r\n        if (hasBaitJustFallen) {\r\n            if (areCoordinatesInPath(baitLakeCoords, fishPath)) {\r\n                goAway()\r\n            }\r\n        }\r\n    }, [hasBaitJustFallen, baitLakeCoords, fishPath, goAway])\r\n\r\n    // Make fish follow bait when it is hooked\r\n    useEffect(() => {\r\n        if (hookedFish && hookedFish.fishID === fishID) {\r\n            setFishCoords(baitLakeCoords)\r\n        }\r\n    }, [hookedFish, fishID, baitLakeCoords])\r\n\r\n    // Fish struggles when it gets hooked\r\n    const isStruggling = useMemo((): boolean => hookedFish && hookedFish.fishID === fishID, [hookedFish, fishID])\r\n\r\n    useLayoutEffect(() => {\r\n        // Stop roaming when fish starts struggling\r\n        if (isStruggling) setIsRoaming(false)\r\n        else {\r\n            // After fish was mounted or released from hook,\r\n            // start roaming at random position within area\r\n            setIsRoaming(true)\r\n            setFishCoords({\r\n                x: randomIntFromInterval(area.from.x, area.to.x),\r\n                y: randomIntFromInterval(area.from.y, area.to.y)\r\n            })\r\n        }\r\n    }, [isStruggling, area])\r\n\r\n    // All other fishes disappear when fish gets hooked\r\n    if (hookedFish && hookedFish.fishID !== fishID) return null\r\n\r\n    return <><div\r\n        className={`\r\n            ${className} \r\n            ${styles.defaultFish} \r\n            ${isStruggling ? styles.struggling : ''} \r\n            ${canTryToCatch ? styles.canTryToCatch : ''} \r\n            ${wouldHookSuccessfully ? styles.wouldHookSuccessfully : ''}\r\n        `}\r\n        style={{\r\n            fontSize: `${size}px`,\r\n            animationDelay: `${Math.random()}s`,\r\n            transform: `\r\n                translate(\r\n                    ${fishPath.from.x - (isFishHorizontal ? 0 : fishHeight/2)}px,\r\n                     ${fishPath.from.y + (isFishHorizontal ? 0 : fishHeight)}px\r\n                )\r\n                 rotate(${fishDirection + 90}deg)\r\n            `,\r\n            left: 0,\r\n            top: 0,\r\n            transition: moveTransition,\r\n            opacity\r\n        }}\r\n    >\r\n        {children}\r\n    </div>\r\n    <div\r\n        className={styles.fishPath}\r\n        ref={fishPathRef}\r\n        style={{\r\n            left: fishPath.from.x,\r\n            top: fishPath.from.y,\r\n            width: fishPath.to.x - fishPath.from.x,\r\n            height: fishPath.to.y - fishPath.from.y,\r\n            transition: moveTransition,\r\n            opacity\r\n        }}\r\n    >\r\n        {isInScope && isRoaming && (\r\n            /* Emoji indicating whether the fish is attracted by the bait */\r\n            <div className={styles.likeStatus} style={{ opacity }}>\r\n                {likesBait ? <FaHeart className={styles.heart} />\r\n                : <FaTimes className={styles.times} />}\r\n            </div>\r\n        )}\r\n    </div>\r\n    <div\r\n        className={`\r\n            ${styles.detectionPath}\r\n            ${isStruggling ? styles.struggling : ''} \r\n        `}\r\n        style={{\r\n            left: detectionPath.from.x,\r\n            top: detectionPath.from.y,\r\n            width: detectionPath.to.x - detectionPath.from.x,\r\n            height: detectionPath.to.y - detectionPath.from.y,\r\n            opacity\r\n        }}\r\n    ></div>\r\n    {hookedFish && <div className={styles.focusBG}></div>}\r\n    </>\r\n}\r\n\r\nexport default React.memo(DefaultFish)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\evolution\\index.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\inventory.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\selectors\\inventory.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\selectors\\position.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\selectors\\fishing.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\FishGroup\\index.tsx",["345"],"import React, { ReactNode, Fragment, useEffect, useState, useRef, useMemo } from 'react'\r\nimport { Path } from '../../../../interfaces/position'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { useSelector } from 'react-redux'\r\nimport { hookedFishSelector } from '../../../../store/selectors/fishing'\r\n\r\ninterface Props {\r\n    groupID: string,\r\n    path: Path,\r\n    render?: (Path) => ReactNode\r\n}\r\n\r\nconst FishGroup = ({ groupID, path, render }) => {\r\n    const [isGroupVisible, setIsGroupVisible] = useState<boolean>(false)\r\n    const groupRef = useRef<HTMLDivElement>(null)\r\n\r\n    // Redux\r\n    const hookedFish = useSelector(hookedFishSelector)\r\n\r\n    // Use intersection observer API to render fishes only if their area is in viewport\r\n    useEffect(() => {\r\n        const options: any = {\r\n            root: null,\r\n            rootMargin: '0px',\r\n            threshold: 0.1\r\n        }\r\n        const observer: IntersectionObserver = new IntersectionObserver((entries, observer) => {\r\n            const group = entries[0]\r\n            group.isIntersecting ? setIsGroupVisible(true) : setIsGroupVisible(false)\r\n        }, options)\r\n\r\n        if (groupRef.current) observer.observe(groupRef.current)\r\n\r\n        return () => observer.disconnect()\r\n    }, [])\r\n\r\n    // Decide whether to render fishes\r\n    const mustRender = useMemo((): boolean => {\r\n        if (!hookedFish) return isGroupVisible\r\n\r\n        // If fish gets hooked, render it no matter if its area is outside of viewport\r\n        return hookedFish.groupID === groupID\r\n    }, [isGroupVisible, hookedFish, groupID])\r\n\r\n    // Use a ref to prevent rerendering of fishes, generating a new uuid for hooked fish\r\n    const renderRef = useRef<any>(render({ path }))\r\n\r\n    return <>\r\n        <div\r\n            ref={groupRef}\r\n            className={styles.fishGroup}\r\n            style={{\r\n                left: path.from.x,\r\n                top: path.from.y,\r\n                width: path.to.x - path.from.x,\r\n                height: path.to.y - path.from.y\r\n            }}\r\n        ></div>\r\n    {mustRender && renderRef.current}\r\n    </>\r\n}\r\n\r\nexport default React.memo(FishGroup)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Sell\\index.tsx",["346","347","348","349","350","351","352"],"import React, { ReactNode, Fragment, useState, useMemo, useCallback, useEffect } from 'react'\r\nimport styles from './index.module.sass'\r\nimport allCategories from '../../../../items/categories.json'\r\nimport { ContentID, randomGreeting, randomThanks } from \"../index\"\r\nimport { ItemCategory, InventoryEntry } from '../../../../../interfaces/items'\r\nimport { randomIntFromInterval } from '../../../../../utils/math'\r\nimport { BiCoin, GiMagnifyingGlass } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { doubloonsSelector } from '../../../../../store/selectors/game'\r\nimport { sellableEntriesSelector } from '../../../../../store/selectors/inventory'\r\nimport { sellItemAction } from '../../../../../store/actions/inventory'\r\n\r\n// Seller dialogs\r\nexport const saleIntroPhrases: string[] = [\r\n    'What do you need to get rid of ?',\r\n    'How can I help you ?',\r\n    'Alright, what do ye have for me ?'\r\n]\r\nexport const randomSaleIntroPhrase = (): string => saleIntroPhrases[randomIntFromInterval(0, saleIntroPhrases.length - 1)]\r\n\r\n\r\ninterface Props {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setCurrentContentID?: React.Dispatch<React.SetStateAction<ContentID>>,\r\n    myDoubloons?: number,\r\n    sellItem: any,\r\n    sellableEntries?: InventoryEntry[]\r\n}\r\n\r\nexport const Sell: React.FC<Props> = ({ setSellerPhrase, setCurrentContentID, myDoubloons, sellItem, sellableEntries }) => {\r\n    const saleSE = useMemo((): HTMLAudioElement => {\r\n        const src = require('../../../../../assets/audio/se/sale.mp3').default\r\n        const audio = new Audio\r\n        audio.src = src\r\n        return audio\r\n    }, [])\r\n    \r\n    const [focusedItem, setFocusedItem] = useState<string>(null)\r\n    const [searchFilter, setSearchFilter] = useState<string>('')\r\n\r\n    const forSaleItems = useMemo(() => {\r\n        // Figure out which entries to render\r\n        let entries = sellableEntries\r\n        if (searchFilter) {\r\n            entries = sellableEntries.filter((entry: InventoryEntry) => new RegExp(searchFilter, 'i').test(entry.item._id))\r\n        }\r\n\r\n        return entries.map((entry: InventoryEntry) => {\r\n            const { item } = entry\r\n            const isFocused = focusedItem === item._id\r\n            return <ForSaleItem\r\n                key={item._id}\r\n                isFocused={isFocused}\r\n                setFocusedItem={setFocusedItem}\r\n                entry={entry}\r\n                myDoubloons={myDoubloons}\r\n            />\r\n        })\r\n    }, [focusedItem, myDoubloons, sellableEntries, searchFilter])\r\n\r\n    useEffect(() => {\r\n        // Change seller's dialog\r\n        if (!focusedItem) setSellerPhrase(randomSaleIntroPhrase())\r\n    }, [focusedItem])\r\n\r\n    const detailsJSX = useMemo((): ReactNode => {\r\n        const fallback = <aside className={styles.details}>\r\n            <p className={styles.description}>Select an item from your inventory</p>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n        </aside>\r\n\r\n        const entry: InventoryEntry = sellableEntries.find((entry: InventoryEntry) => entry.item._id === focusedItem)\r\n        if (!focusedItem || !entry) return fallback\r\n\r\n        return <SaleDetails\r\n            key={entry.item._id}\r\n            setSellerPhrase={setSellerPhrase}\r\n            entry={entry}\r\n            myDoubloons={myDoubloons}\r\n            sellItem={sellItem}\r\n            saleSE={saleSE}\r\n            setFocusedItem={setFocusedItem}\r\n         />\r\n    }, [focusedItem, sellableEntries, sellItem, myDoubloons])\r\n\r\n    return <div className={styles.sell}>\r\n        <main className={styles.forSaleItems}>\r\n            <ul className={styles.forSaleItemsList}>\r\n                <li className={`${styles.search} ${searchFilter ? styles.active : ''}`}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={searchFilter}\r\n                        onChange={e => setSearchFilter(e.target.value)}\r\n                     />\r\n                    <GiMagnifyingGlass />\r\n                </li>\r\n                {forSaleItems}\r\n            </ul>\r\n            {detailsJSX}\r\n        </main>\r\n        <aside className={styles.footer}>\r\n            <nav className={styles.navigation}>\r\n                <button onClick={() => {\r\n                    setSellerPhrase(randomGreeting())\r\n                    setCurrentContentID(ContentID.ROOT)\r\n                }} className={`btn btn-cancel ${styles.previous}`}>\r\n                    &lt;\r\n                </button>\r\n            </nav>\r\n        </aside>\r\n    </div>\r\n}\r\n\r\ninterface DetailsProps {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    entry: InventoryEntry, \r\n    myDoubloons?: number,\r\n    sellItem?: any,\r\n    saleSE?: HTMLAudioElement\r\n}\r\n\r\nconst SaleDetails: React.FC<DetailsProps> = ({ setSellerPhrase, setFocusedItem, entry, myDoubloons, sellItem, saleSE }) => {\r\n    const { item, amount } = entry\r\n    const { _id, plural, description, salePrice, isSellable } = item\r\n    const [saleAmount, setSaleAmount] = useState<number>(1)\r\n    const [isConfirmingSale, setIsConfirmingSale] = useState<boolean>(false)\r\n    \r\n    const totalPrice = useMemo((): number => salePrice*saleAmount, [salePrice, saleAmount])\r\n\r\n    const canSell = useMemo((): boolean => {\r\n        return isSellable && amount > 0 && saleAmount > 0\r\n    }, [isSellable, amount, saleAmount])\r\n\r\n    const saleBTN = useMemo((): ReactNode => {\r\n        if (!canSell) {\r\n            return <button className={`${styles.disabled} btn btn-cancel ${styles.saleBTN}`}>\r\n                Cannot sell this\r\n            </button>\r\n        }\r\n        if (isConfirmingSale) {\r\n            return <>\r\n                <span\r\n                    className={`btn btn-cancel ${styles.cancelBTN}`}\r\n                    onClick={() => {\r\n                        setIsConfirmingSale(false)\r\n                        setSellerPhrase(randomSaleIntroPhrase())\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </span>\r\n                <button className={`btn btn-primary ${styles.saleBTN}`}>\r\n                    Confirm\r\n                </button>\r\n            </>\r\n        }\r\n\r\n        return <button className={`btn btn-primary ${styles.saleBTN}`}>\r\n            Sell {saleAmount} {saleAmount <= 1 ? _id : plural}\r\n        </button>\r\n    }, [canSell, isConfirmingSale, saleAmount, _id, plural])\r\n\r\n    const confirmSale = useCallback(\r\n        (e: any): void => {\r\n            e.preventDefault()\r\n            if (canSell) {\r\n                if (!isConfirmingSale) {\r\n                    setIsConfirmingSale(true)\r\n                    setSellerPhrase(`Want to sell me ${saleAmount} ${saleAmount > 1 ? plural.toLowerCase() : _id.toLowerCase()} ?`)\r\n                } else {\r\n                    sellItem(_id, saleAmount, totalPrice)\r\n                    saleSE.play()\r\n                    setSellerPhrase(randomThanks())\r\n                    setIsConfirmingSale(false)\r\n\r\n                    // Remove focus if entry is removed from inventory (amount gets null)\r\n                    const isNextAmountNull = saleAmount >= amount\r\n                    if (isNextAmountNull) setFocusedItem(null)\r\n                }\r\n            } else {\r\n                setSellerPhrase('I\\'m not interested ...')\r\n            }\r\n        }, [\r\n            canSell,\r\n            isConfirmingSale,\r\n            _id,\r\n            plural,\r\n            amount,\r\n            saleAmount,\r\n            totalPrice,\r\n            sellItem,\r\n            saleSE\r\n        ]\r\n    )\r\n\r\n    // Component will unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            setSellerPhrase(randomSaleIntroPhrase)\r\n        }\r\n    }, [])\r\n    \r\n    return <aside className={styles.details}>\r\n        <article className={styles.description}>{description}</article>\r\n        <form className={styles.saleActions} onSubmit={confirmSale}>\r\n            <fieldset className={styles.amount}>\r\n                <label htmlFor={`${_id}_amount`}>\r\n                    Amount:&nbsp;\r\n                </label>\r\n                <input\r\n                    type=\"number\"\r\n                    readOnly={isConfirmingSale}\r\n                    id={`${_id}_amount`}\r\n                    value={saleAmount}\r\n                    max={amount}\r\n                    min={1}\r\n                    step={1}\r\n                    onChange={e => {\r\n                        const newAmount = parseInt(e.target.value)\r\n                        if (newAmount <= 0) setSaleAmount(1)\r\n                        else if (newAmount > amount) setSaleAmount(amount)\r\n                        else setSaleAmount(newAmount)\r\n                    }}\r\n                />\r\n                <p className={styles.totalPrice}>\r\n                    <span className={styles.label}>Total: </span>\r\n                    {totalPrice} <BiCoin />\r\n                </p>\r\n            </fieldset>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n            <fieldset className={styles.submit}>{saleBTN}</fieldset>\r\n        </form>\r\n    </aside>\r\n}\r\n\r\ninterface ForSaleItemProps {\r\n    entry: InventoryEntry,\r\n    isFocused: boolean,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    myDoubloons?: number\r\n}\r\n\r\nfunction ForSaleItem ({ entry, setFocusedItem, isFocused, myDoubloons }) {\r\n    const { item, amount } = entry\r\n    const { _id, salePrice, image, category } = item\r\n    const itemCategory: ItemCategory = allCategories[category]\r\n    const textStyle = useMemo(() => ({ background: `linear-gradient(${itemCategory.colors.join(', ')}` }), [itemCategory])\r\n\r\n    return <li\r\n        className={`${styles.forSaleItem} ${isFocused ? styles.focused : ''}`}\r\n        onClick={() => isFocused ? setFocusedItem(null) : setFocusedItem(_id)}\r\n    >\r\n        <figure className={styles.itemImage} style={{ color: itemCategory.colors[1] }} dangerouslySetInnerHTML={{ __html: image }}></figure>\r\n        <span\r\n            className={styles.id}\r\n            style={textStyle}\r\n        >{_id}</span>\r\n        <span className={styles.amount}>&times;{amount}</span>\r\n        <span className={styles.price}><strong>{salePrice}</strong> <BiCoin /></span>\r\n    </li>\r\n}\r\n\r\n// Connect \"Sell\" component to Redux\r\nconst mapStateToProps = state => ({\r\n    myDoubloons: doubloonsSelector(state),\r\n    sellableEntries: sellableEntriesSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    sellItem: (itemID: string, amount: number, price: number) => dispatch(sellItemAction(itemID, amount, price))\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sell)","C:\\www\\personal\\fishing-game\\src\\components\\misc\\Modal\\index.tsx",["353"],"import React, { ReactNode, useState, useCallback, useImperativeHandle, useRef, useEffect } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport styles from './index.module.sass'\r\n\r\ninterface Props {\r\n    onClose: any,\r\n    className?: string,\r\n    style?: any,\r\n    transition?: number,\r\n    children?: ReactNode\r\n}\r\n\r\nconst Modal = React.forwardRef<any, Props>(({\r\n    onClose,\r\n    transition = .3,\r\n    className = '',\r\n    style = {},\r\n    children\r\n}, ref) => {\r\n    const [isClosing, setIsClosing] = useState<boolean>(false)\r\n    const closeModal = useCallback(\r\n        (): void => {\r\n            setIsClosing(true)\r\n            timerID.current = window.setTimeout(() => {\r\n                onClose()\r\n            }, transition*1000)\r\n        }, [onClose]\r\n    )\r\n    const timerID = useRef<number>(null)\r\n    useEffect(() => () => window.clearTimeout(timerID.current), [])\r\n    useImperativeHandle(ref, () => ({ closeModal }), [closeModal])\r\n\r\n    return ReactDOM.createPortal(\r\n        (\r\n            <div\r\n                className={`${styles.modalWrapper} ${isClosing ? styles.closing : ''}`}\r\n                onClick={closeModal}\r\n                style={{ transition: `all ease ${transition}s`, animationDuration: `${transition}s` }}\r\n            >\r\n                <div className={`${styles.modalWindow} ${className}`} style={style} onClick={e => e.stopPropagation()}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        ), document.getElementById('portal')\r\n    )\r\n})\r\n\r\nModal.defaultProps = {\r\n    children: null,\r\n    style: null,\r\n    className: '',\r\n    onClose: () => false\r\n}\r\n\r\nexport default Modal","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Buy\\index.tsx",["354","355","356","357","358","359","360","361","362","363"],"import React, { ReactNode, Fragment, useState, useMemo, useCallback, useEffect } from 'react'\r\nimport styles from './index.module.sass'\r\nimport allItems from '../../../../items/items.json'\r\nimport { rodLevels } from '../../../evolution'\r\nimport allCategories from '../../../../items/categories.json'\r\nimport { ContentID, randomGreeting, randomThanks } from \"../index\"\r\nimport { Item, ItemCategory, InventoryEntry } from '../../../../../interfaces/items'\r\nimport { randomIntFromInterval } from '../../../../../utils/math'\r\nimport { pxToM } from '../../../../../utils/position'\r\nimport { BiCoin } from 'react-icons/all'\r\n\r\n// Redux\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { doubloonsSelector } from '../../../../../store/selectors/game'\r\nimport { inventoryEntriesSelector } from '../../../../../store/selectors/inventory'\r\nimport { purchaseItemAction } from '../../../../../store/actions/inventory'\r\n\r\n// Seller dialogs\r\nexport const purchaseIntroPhrases: string[] = [\r\n    'Which item will you buy ?',\r\n    'How can I help you ?',\r\n    'Alright, what can I do for ye ?'\r\n]\r\nexport const randomPurchaseIntroPhrase = (): string => purchaseIntroPhrases[randomIntFromInterval(0, purchaseIntroPhrases.length - 1)]\r\n\r\nexport const tooExpensivePhrases: string[] = [\r\n    'Hey ! I want more doubloons for that !!',\r\n    'Come back with more cash, buddy !',\r\n    'Well tried, but that is worth WAY more doubloons !'\r\n]\r\nexport const randomTooExpensivePhrase = (): string => tooExpensivePhrases[randomIntFromInterval(0, tooExpensivePhrases.length - 1)]\r\n\r\ninterface Props {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    setCurrentContentID?: React.Dispatch<React.SetStateAction<ContentID>>,\r\n    myDoubloons?: number,\r\n    purchaseItem: any\r\n}\r\n\r\nexport const Buy: React.FC<Props> = ({ setSellerPhrase, setCurrentContentID, myDoubloons, purchaseItem }) => {\r\n    // Redux\r\n    const inventoryEntries: InventoryEntry[] = useSelector(inventoryEntriesSelector)\r\n\r\n    const purchaseSE = useMemo((): HTMLAudioElement => {\r\n        const src = require('../../../../../assets/audio/se/purchase.mp3').default\r\n        const audio = new Audio\r\n        audio.src = src\r\n        return audio\r\n    }, [])\r\n    const thankYouSE = useMemo((): HTMLAudioElement => {\r\n        const src = require('../../../../../assets/audio/se/thank-you-for-the-doubloons.mp3').default\r\n        const audio = new Audio\r\n        audio.src = src\r\n        return audio\r\n    }, [])\r\n    const [focusedItem, setFocusedItem] = useState<string>(null)\r\n    const forSaleItems = useMemo(() => {\r\n        const ids: string[] = [\r\n            'Mushroom',\r\n            'Fly',\r\n            'Butterfly',\r\n            'Dragonfly'\r\n        ]\r\n        // Add fishing poles that are not already in player's possession\r\n        const fishrodIDs: Array<string> = rodLevels.map(lvl => {\r\n            const fishrodID = lvl._id\r\n            // Keep if this id is not inventory yet\r\n            if (!inventoryEntries.find(entry => entry.item._id === fishrodID)) {\r\n                return fishrodID\r\n            }\r\n        })\r\n\r\n        return [...ids, ...fishrodIDs].map(id => {\r\n            const item: Item = allItems[id]\r\n            const isFocused = focusedItem === id\r\n            return <ForSaleItem\r\n                key={id}\r\n                isFocused={isFocused}\r\n                setFocusedItem={setFocusedItem}\r\n                item={item}\r\n                myDoubloons={myDoubloons}\r\n             />\r\n        })\r\n    }, [focusedItem, myDoubloons, inventoryEntries])\r\n\r\n    useEffect(() => {\r\n        // Change seller's dialog\r\n        if (!focusedItem) setSellerPhrase(randomPurchaseIntroPhrase())\r\n    }, [focusedItem])\r\n\r\n    const detailsJSX = useMemo((): ReactNode => {\r\n        if (!focusedItem) {\r\n            return <aside className={styles.details}>\r\n                <p className={styles.description}>Select an item to check its details</p>\r\n                <p className={styles.myDoubloons}>\r\n                    <span className={styles.label}>Wallet:&nbsp;&nbsp;</span>\r\n                    {myDoubloons} <BiCoin />\r\n                </p>\r\n            </aside>\r\n        }\r\n\r\n        const item: Item = allItems[focusedItem]\r\n        return <PurchaseDetails\r\n            key={item._id}\r\n            setSellerPhrase={setSellerPhrase}\r\n            item={item}\r\n            myDoubloons={myDoubloons}\r\n            purchaseItem={purchaseItem}\r\n            purchaseSE={purchaseSE}\r\n            thankYouSE={thankYouSE}\r\n            inventoryEntries={inventoryEntries}\r\n         />\r\n    }, [focusedItem, purchaseItem, myDoubloons])\r\n\r\n    return <div className={styles.buy}>\r\n        <main className={styles.forSaleItems}>\r\n            <ul className={styles.forSaleItemsList}>\r\n                {forSaleItems}\r\n            </ul>\r\n            {detailsJSX}\r\n        </main>\r\n        <aside className={styles.footer}>\r\n            <nav className={styles.navigation}>\r\n                <button onClick={() => {\r\n                    setSellerPhrase(randomGreeting())\r\n                    setCurrentContentID(ContentID.ROOT)\r\n                }} className={`btn btn-cancel ${styles.previous}`}>\r\n                    &lt;\r\n                </button>\r\n            </nav>\r\n        </aside>\r\n    </div>\r\n}\r\n\r\ninterface DetailsProps {\r\n    setSellerPhrase: React.Dispatch<React.SetStateAction<string>>,\r\n    item: Item \r\n    myDoubloons?: number,\r\n    purchaseItem?: any,\r\n    purchaseSE?: HTMLAudioElement,\r\n    thankYouSE?: HTMLAudioElement,\r\n    inventoryEntries: InventoryEntry[]\r\n}\r\n\r\nconst PurchaseDetails: React.FC<DetailsProps> = ({ setSellerPhrase, item, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries }) => {\r\n    // State\r\n    const { _id, plural, description, purchasePrice, category } = item\r\n    const [amount, setAmount] = useState<number>(1)\r\n    const [isConfirmingPurchase, setIsConfirmingPurchase] = useState<boolean>(false)\r\n    \r\n    const totalPrice = useMemo((): number => purchasePrice*amount, [purchasePrice, amount])\r\n\r\n    const canBuy = useMemo((): boolean => {\r\n        const hasPlayerEnoughMoney = myDoubloons >= totalPrice\r\n        return hasPlayerEnoughMoney && amount > 0\r\n    }, [myDoubloons, totalPrice, amount])\r\n\r\n    const amountInInventory = useMemo((): number => {\r\n        const inventoryEntry = inventoryEntries.find((entry: InventoryEntry) => entry.item._id === _id)\r\n        // Item is not in player's inventory\r\n        if (!inventoryEntry) return 0\r\n        // Item is already in inventory\r\n        else return inventoryEntry.amount\r\n    }, [inventoryEntries, _id])\r\n\r\n    const purchaseBTN = useMemo((): ReactNode => {\r\n        if (!canBuy) {\r\n            return <button className={`${styles.disabled} btn btn-cancel ${styles.purchaseBTN}`}>\r\n                Too expensive\r\n            </button>\r\n        }\r\n        if (isConfirmingPurchase) {\r\n            return <>\r\n                <span\r\n                    className={`btn btn-cancel ${styles.cancelBTN}`}\r\n                    onClick={() => {\r\n                        setIsConfirmingPurchase(false)\r\n                        setSellerPhrase(randomPurchaseIntroPhrase())\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </span>\r\n                <button className={`btn btn-primary ${styles.purchaseBTN}`}>\r\n                    Confirm\r\n                </button>\r\n            </>\r\n        }\r\n\r\n        return <button className={`btn btn-primary ${styles.purchaseBTN}`}>\r\n            Buy {amount} {amount <= 1 ? _id : plural}\r\n        </button>\r\n    }, [canBuy, isConfirmingPurchase, amount, _id, plural])\r\n\r\n    const confirmPurchase = useCallback(\r\n        (e: any): void => {\r\n            e.preventDefault()\r\n            if (canBuy) {\r\n                if (!isConfirmingPurchase) {\r\n                    setIsConfirmingPurchase(true)\r\n                    setSellerPhrase(`Want to buy ${amount} ${amount > 1 ? plural.toLowerCase() : _id.toLowerCase()} ?`)\r\n                } else {\r\n                    purchaseItem(_id, amount, totalPrice)\r\n                    purchaseSE.play()\r\n                    setSellerPhrase(randomThanks())\r\n                    setIsConfirmingPurchase(false)\r\n                    setAmount(1)\r\n                    // \"Thank you !\"\r\n                    window.setTimeout(() => {\r\n                        if (thankYouSE) thankYouSE.play()\r\n                    }, 1500)\r\n                }\r\n            } else {\r\n                setSellerPhrase(randomTooExpensivePhrase())\r\n            }\r\n        }, [\r\n            canBuy,\r\n            isConfirmingPurchase,\r\n            _id,\r\n            plural,\r\n            amount,\r\n            totalPrice,\r\n            purchaseItem,\r\n            purchaseSE\r\n        ]\r\n    )\r\n\r\n    // Component will unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            setSellerPhrase(randomPurchaseIntroPhrase)\r\n        }\r\n    }, [])\r\n\r\n    // Display fishing pole stats\r\n    const fishingPoleStats = useMemo((): ReactNode => {\r\n        if (category !== 'Fishing pole') return null\r\n        \r\n        const lvl = rodLevels.find(level => level._id === _id)\r\n        if (!lvl) return null\r\n\r\n        return <section className={styles.fishingPoleStats}>\r\n            <br />\r\n            <p>Line length: <strong>{pxToM(lvl['maxLength'])}m</strong></p>\r\n            <p>Resistance: <strong>{lvl['resistance']*100}</strong></p>\r\n            <p>Strength: <strong>{lvl['strength']*5}</strong></p>\r\n        </section>\r\n    }, [_id, rodLevels])\r\n    \r\n    return <aside className={styles.details}>\r\n        <article className={styles.description}>\r\n            {description}\r\n            {fishingPoleStats}\r\n        </article>\r\n        <form className={styles.purchaseActions} onSubmit={confirmPurchase}>\r\n            <fieldset className={styles.amount}>\r\n                <label htmlFor={`${_id}_amount`}>\r\n                    Amount:&nbsp;\r\n                </label>\r\n                <input\r\n                    type=\"number\"\r\n                    readOnly={isConfirmingPurchase}\r\n                    id={`${_id}_amount`}\r\n                    value={amount}\r\n                    max={99}\r\n                    min={1}\r\n                    step={1}\r\n                    onChange={e => {\r\n                        if (category === 'Fishing pole') return setAmount(1) // Can only buy 1 fishing pole\r\n                        \r\n                        const newAmount = parseInt(e.target.value)\r\n                        if (newAmount <= 0) setAmount(1)\r\n                        else if (newAmount > 99) setAmount(99)\r\n                        else setAmount(newAmount)\r\n                    }}\r\n                />\r\n                <p className={styles.totalPrice}>\r\n                    <span className={styles.label}>Total: </span>\r\n                    {totalPrice} <BiCoin />\r\n                </p>\r\n            </fieldset>\r\n            <p className={styles.myDoubloons}>\r\n                <span className={styles.label}>Inventory:&nbsp;&nbsp;</span>\r\n                {amountInInventory} \r\n                <span\r\n                    className={styles.label}\r\n                    style={{ marginLeft: '.5em' }}\r\n                >Wallet:&nbsp;&nbsp;</span>\r\n                {myDoubloons} <BiCoin />\r\n            </p>\r\n            <fieldset className={styles.submit}>{purchaseBTN}</fieldset>\r\n        </form>\r\n    </aside>\r\n}\r\n\r\ninterface ForSaleItemProps {\r\n    item: Item,\r\n    isFocused: boolean,\r\n    setFocusedItem: React.Dispatch<React.SetStateAction<string>>,\r\n    myDoubloons?: number\r\n}\r\n\r\nfunction ForSaleItem ({ item, setFocusedItem, isFocused, myDoubloons }) {\r\n    const { _id, purchasePrice, image, category } = item\r\n    const itemCategory: ItemCategory = allCategories[category]\r\n    const textStyle = useMemo(() => ({ background: `linear-gradient(${itemCategory.colors.join(', ')}` }), [itemCategory])\r\n\r\n    return <li\r\n        className={`\r\n            ${styles.forSaleItem}\r\n             ${isFocused ? styles.focused : ''}\r\n             ${purchasePrice > myDoubloons ? styles.tooExpensive : ''}\r\n        `}\r\n        onClick={() => isFocused ? setFocusedItem(null) : setFocusedItem(_id)}\r\n    >\r\n        <figure className={styles.itemImage} style={{ color: itemCategory.colors[1] }} dangerouslySetInnerHTML={{ __html: image }}></figure>\r\n        <span\r\n            className={styles.id}\r\n            style={textStyle}\r\n        >{_id}</span>\r\n        <span className={styles.price}><strong>{purchasePrice}</strong> <BiCoin /></span>\r\n    </li>\r\n}\r\n\r\n// Connect \"Buy\" component to Redux\r\nconst mapStateToProps = state => ({\r\n    myDoubloons: doubloonsSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    purchaseItem: (itemID: string, amount: number, price: number) => dispatch(purchaseItemAction(itemID, amount, price))\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Buy)","C:\\www\\personal\\fishing-game\\src\\interfaces\\position.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Credits\\index.tsx",["364","365","366"],"import React from 'react'\r\nimport styles from './index.module.sass'\r\n\r\nconst Credits = () => <div className={styles.credits}>\r\n    <main>\r\n        <h3>Credits</h3>\r\n        <div style={{ fontSize: '.75em', textAlign: 'center', margin: '2em', lineHeight: '200%' }}>\r\n            <em>\"Go fishing\"</em>,&nbsp;\r\n            fishing simulator game developed and maintained by&nbsp;\r\n            <address>\r\n                <a\r\n                    href=\"https://www.linkedin.com/in/b748b01b7/\"\r\n                    target=\"_blank\"\r\n                    title=\"See developer's profile on linkedin\"\r\n                    rel=\"author\"\r\n                >dev.js.theo@gmail.com</a>\r\n            </address>\r\n        </div>\r\n        <section className={styles.audioSection}>\r\n            <h4>Audio</h4>\r\n            <ul className={styles.creditList}>\r\n                <li>\r\n                    <h5>\r\n                        Music theme composed by &nbsp;\r\n                        <address>\r\n                            <a\r\n                                href=\"https://soundcloud.com/coma8\"\r\n                                target=\"_blank\"\r\n                                title=\"See profile on soundcloud\"\r\n                                rel=\"author\"\r\n                            >dev.js.theo@gmail.com</a>\r\n                        </address>\r\n                    </h5>\r\n                </li>\r\n                <li>\r\n                    <h5>\r\n                        \"Coins Purchase 01\"&nbsp;\r\n                        <address>\r\n                            by&nbsp;\r\n                            <a\r\n                                href=\"https://freesound.org/people/rhodesmas/sounds/321263/\"\r\n                                title=\"Rhodesmas' work\"\r\n                                target=\"_blank\"\r\n                                rel=\"author\"\r\n                            >rhodesmas</a>\r\n                        </address>\r\n                    </h5>\r\n                    <p>Modified from .wav to .mp3</p>\r\n                </li>\r\n            </ul>\r\n        </section>\r\n    </main>\r\n</div>\r\n\r\nexport default Credits","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Status\\index.tsx",["367","368","369","370","371"],"import React, { ReactElement, Dispatch, SetStateAction, useMemo, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { minsToHrsMins } from '../../../../utils/time'\r\nimport allCategories from '../../../items/categories.json'\r\nimport { SectionID } from '../index'\r\nimport { GameStats } from '../../../../interfaces/evolution'\r\nimport { Item, ItemCategory } from '../../../../interfaces/items'\r\nimport styles from './index.module.sass'\r\nimport { BiStats, BiCoin, GiFishingPole, GiFishing } from 'react-icons/all'\r\n// Redux\r\nimport { gameStatsSelector } from '../../../../store/selectors/game'\r\nimport { baitFoodSelector } from '../../../../store/selectors/fishing'\r\nimport { removeBaitItemAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    setCurrentSection: Dispatch<SetStateAction<SectionID>>,\r\n    // Redux\r\n    gameStats?: GameStats,\r\n    baitFood?: Item,\r\n    removeBait: any\r\n}\r\n\r\nenum StatusSectionID {\r\n    GENERAL = 'GENERAL',\r\n    GEAR = 'GEAR'\r\n}\r\n\r\nconst Status: React.FC<Props> = ({\r\n    setCurrentSection,\r\n    gameStats,\r\n    baitFood,\r\n    removeBait\r\n}) => {\r\n    const { gameTimeSpent, fishrodLevel, doubloons } = gameStats\r\n    const gameTimeSpentFormatted = useMemo((): string => minsToHrsMins(gameTimeSpent), [gameTimeSpent])\r\n    const [currentStatusSectionID, setCurrentStatusSectionID] = useState<StatusSectionID>(StatusSectionID.GENERAL)\r\n\r\n    // The category of item which current bait belongs to\r\n    const baitCategory = useMemo((): ItemCategory => {\r\n        if (baitFood) return allCategories[baitFood['category']]\r\n        else return null\r\n    }, [baitFood, allCategories])\r\n\r\n    // The color used on the bait icon which depends on its item category\r\n    const baitColor = useMemo((): string => {\r\n        if (!baitCategory) return ''\r\n\r\n        return baitCategory.colors[0]\r\n    }, [baitCategory])\r\n\r\n    const currentStatusSection = useMemo((): ReactElement => {\r\n        switch (currentStatusSectionID) {\r\n            case StatusSectionID.GENERAL:\r\n                return <section className={styles.general}>\r\n                    <h3>General</h3>\r\n                    <ul className={styles.gameStats}>\r\n                        <li>\r\n                            Doubloons:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong>{doubloons}</strong>&nbsp;\r\n                                <BiCoin color=\"var(--yellow)\" style={{ verticalAlign: 'middle' }} />\r\n                            </span>\r\n                        </li>\r\n                        <li>Game time:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong className={styles.time}>{gameTimeSpentFormatted}</strong>\r\n                            </span>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                break\r\n            case StatusSectionID.GEAR:\r\n                return <section className={styles.general}>\r\n                    <h3>Gear</h3>\r\n                    <ul className={styles.gear}>\r\n                        <li>Fishrod:&nbsp;\r\n                            <span className={styles.data}>\r\n                                <strong>{fishrodLevel._id}</strong>\r\n                            </span>\r\n                        </li>\r\n                        <li>Bait:&nbsp;\r\n                            {baitFood ? (\r\n                                <span className={styles.data}>\r\n                                    <span style={{ color: baitColor }} dangerouslySetInnerHTML={{ __html: baitFood.image }}></span>&nbsp;\r\n                                    <strong>{baitFood._id}</strong>&nbsp;\r\n                                    <button\r\n                                        className={`btn btn-cancel ${styles.btn}`}\r\n                                        onClick={removeBait}\r\n                                    >Remove</button>\r\n                                </span>\r\n                            ) : (\r\n                                <span className={styles.data}>\r\n                                    <strong>None</strong>&nbsp;\r\n                                    <button\r\n                                        className={`btn btn-primary ${styles.btn}`}\r\n                                        onClick={() => setCurrentSection(SectionID.INVENTORY)}\r\n                                    >\r\n                                        Add from inventory\r\n                                    </button>\r\n                                </span>\r\n                            )}\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                break\r\n        }\r\n    }, [\r\n        currentStatusSectionID,\r\n        fishrodLevel,\r\n        baitFood,\r\n        baitColor,\r\n        removeBait,\r\n        doubloons,\r\n        gameTimeSpentFormatted\r\n    ])\r\n\r\n    return <article className={styles.status}>\r\n        <nav className={styles.statusSectionNav}>\r\n            <ul>\r\n                <li\r\n                    className={currentStatusSectionID === StatusSectionID.GENERAL ? styles.active : ''}\r\n                    onClick={() => setCurrentStatusSectionID(StatusSectionID.GENERAL)}\r\n                >\r\n                    <BiStats />\r\n                </li>\r\n                <li\r\n                    className={currentStatusSectionID === StatusSectionID.GEAR ? styles.active : ''}\r\n                    onClick={() => setCurrentStatusSectionID(StatusSectionID.GEAR)}\r\n                >\r\n                    <GiFishingPole />\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n        {currentStatusSection}\r\n    </article>\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    gameStats: gameStatsSelector(state),\r\n    baitFood: baitFoodSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeBait: () => dispatch(removeBaitItemAction())\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Status)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\AudioPlayer\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\utils\\time.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\Battle\\index.tsx",["372","373","374","375","376","377","378"],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\Barometer\\TensionGauge\\index.tsx",["379"],"import React, { CSSProperties, useMemo, useState } from 'react'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { lineTensionSelector } from '../../../../store/selectors/fishing'\r\n\r\ninterface Props {\r\n    // Redux\r\n    lineTension: number\r\n}\r\n\r\nconst TensionGauge: React.FC<Props> = ({ lineTension }) => {\r\n\r\n    const lowTensionStyle = useMemo((): CSSProperties => {\r\n        if (lineTension >= 0) return { visibility: 'hidden' }\r\n        return {\r\n            clipPath: `polygon(${100 + lineTension}% 0, 100% 0, 100% 100%, ${100 + lineTension}% 100%)`\r\n        }\r\n    }, [lineTension])\r\n\r\n    const highTensionStyle = useMemo((): CSSProperties => {\r\n        if (lineTension <= 0) return { visibility: 'hidden' }\r\n        return {\r\n            clipPath: `polygon(0 0, ${lineTension}% 0, ${lineTension}% 100%, 0 100%)`\r\n        }\r\n    }, [lineTension])\r\n    \r\n    return <div className={styles.resistanceGauge}>\r\n        <meter\r\n            className={styles.lineTension}\r\n            min={-100}\r\n            max={100}\r\n            value={lineTension}\r\n            high={50}\r\n            low={-50}\r\n            optimum={0}\r\n        >\r\n        </meter>\r\n        <label\r\n            className={`${styles.lowTension} ${lineTension <= -75 ? styles.danger : ''}`}\r\n            style={{\r\n                ...lowTensionStyle,\r\n                animationDuration: lineTension <= -90 ? '.3s' : '.5s'\r\n            }}\r\n        ></label>\r\n        <label\r\n            className={`${styles.highTension} ${lineTension >= 75 ? styles.danger : ''}`}\r\n            style={{\r\n                ...highTensionStyle,\r\n                animationDuration: lineTension >= 90 ? '.3s' : '.5s'\r\n            }}\r\n        ></label>\r\n    </div>\r\n}\r\n\r\n// Redux connection\r\nconst mapStateToProps = state => ({\r\n    lineTension: lineTensionSelector(state)\r\n})\r\nexport default connect(\r\n    mapStateToProps,\r\n    dispatch => ({})\r\n)(TensionGauge)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\GameNotification\\index.tsx",["380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396"],"C:\\www\\personal\\fishing-game\\src\\interfaces\\game.ts",[],"C:\\www\\personal\\fishing-game\\src\\interfaces\\evolution.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Starter\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Beginner\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Intermediate\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Expert\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Advanced\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\King\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Abyss\\index.tsx",[],{"ruleId":"397","replacedBy":"398"},{"ruleId":"399","replacedBy":"400"},{"ruleId":"397","replacedBy":"398"},{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","severity":1,"message":"402","line":1,"column":43,"nodeType":"403","messageId":"404","endLine":1,"endColumn":52},{"ruleId":"405","severity":1,"message":"406","line":89,"column":8,"nodeType":"407","endLine":89,"endColumn":22,"suggestions":"408"},{"ruleId":"405","severity":1,"message":"409","line":138,"column":8,"nodeType":"407","endLine":138,"endColumn":36,"suggestions":"410"},{"ruleId":"405","severity":1,"message":"411","line":144,"column":8,"nodeType":"407","endLine":144,"endColumn":10,"suggestions":"412"},{"ruleId":"401","severity":1,"message":"413","line":154,"column":17,"nodeType":"403","messageId":"404","endLine":154,"endColumn":23},{"ruleId":"405","severity":1,"message":"414","line":176,"column":9,"nodeType":"407","endLine":176,"endColumn":28,"suggestions":"415"},{"ruleId":"405","severity":1,"message":"416","line":198,"column":8,"nodeType":"407","endLine":198,"endColumn":64,"suggestions":"417"},{"ruleId":"405","severity":1,"message":"418","line":207,"column":12,"nodeType":"407","endLine":207,"endColumn":41,"suggestions":"419"},{"ruleId":"405","severity":1,"message":"420","line":218,"column":9,"nodeType":"407","endLine":218,"endColumn":44,"suggestions":"421"},{"ruleId":"405","severity":1,"message":"422","line":286,"column":8,"nodeType":"407","endLine":286,"endColumn":24,"suggestions":"423"},{"ruleId":"424","severity":1,"message":"425","line":305,"column":17,"nodeType":"426","messageId":"427","endLine":305,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":328,"column":17,"nodeType":"426","messageId":"427","endLine":328,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":343,"column":17,"nodeType":"426","messageId":"427","endLine":343,"endColumn":22},{"ruleId":"405","severity":1,"message":"428","line":361,"column":8,"nodeType":"407","endLine":375,"endColumn":6,"suggestions":"429"},{"ruleId":"405","severity":1,"message":"430","line":396,"column":8,"nodeType":"407","endLine":396,"endColumn":28,"suggestions":"431"},{"ruleId":"424","severity":1,"message":"425","line":509,"column":17,"nodeType":"426","messageId":"427","endLine":509,"endColumn":22},{"ruleId":"405","severity":1,"message":"432","line":63,"column":8,"nodeType":"407","endLine":63,"endColumn":49,"suggestions":"433"},{"ruleId":"405","severity":1,"message":"434","line":42,"column":8,"nodeType":"407","endLine":42,"endColumn":10,"suggestions":"435"},{"ruleId":"424","severity":1,"message":"425","line":48,"column":17,"nodeType":"426","messageId":"427","endLine":48,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":51,"column":17,"nodeType":"426","messageId":"427","endLine":51,"endColumn":22},{"ruleId":"405","severity":1,"message":"436","line":49,"column":53,"nodeType":"407","endLine":49,"endColumn":55,"suggestions":"437"},{"ruleId":"405","severity":1,"message":"436","line":52,"column":54,"nodeType":"407","endLine":52,"endColumn":56,"suggestions":"438"},{"ruleId":"405","severity":1,"message":"439","line":81,"column":12,"nodeType":"407","endLine":81,"endColumn":31,"suggestions":"440"},{"ruleId":"405","severity":1,"message":"441","line":90,"column":8,"nodeType":"407","endLine":90,"endColumn":10,"suggestions":"442"},{"ruleId":"405","severity":1,"message":"443","line":97,"column":8,"nodeType":"407","endLine":97,"endColumn":10,"suggestions":"444"},{"ruleId":"405","severity":1,"message":"445","line":104,"column":12,"nodeType":"407","endLine":104,"endColumn":54,"suggestions":"446"},{"ruleId":"405","severity":1,"message":"447","line":188,"column":26,"nodeType":"403","endLine":188,"endColumn":33},{"ruleId":"405","severity":1,"message":"448","line":193,"column":8,"nodeType":"407","endLine":193,"endColumn":43,"suggestions":"449"},{"ruleId":"401","severity":1,"message":"450","line":67,"column":23,"nodeType":"403","messageId":"404","endLine":67,"endColumn":35},{"ruleId":"405","severity":1,"message":"451","line":92,"column":12,"nodeType":"407","endLine":92,"endColumn":14,"suggestions":"452"},{"ruleId":"405","severity":1,"message":"453","line":100,"column":8,"nodeType":"407","endLine":100,"endColumn":10,"suggestions":"454"},{"ruleId":"405","severity":1,"message":"443","line":103,"column":73,"nodeType":"407","endLine":103,"endColumn":75,"suggestions":"455"},{"ruleId":"405","severity":1,"message":"456","line":113,"column":12,"nodeType":"407","endLine":113,"endColumn":24,"suggestions":"457"},{"ruleId":"405","severity":1,"message":"458","line":195,"column":8,"nodeType":"407","endLine":195,"endColumn":86,"suggestions":"459"},{"ruleId":"405","severity":1,"message":"460","line":209,"column":12,"nodeType":"407","endLine":209,"endColumn":32,"suggestions":"461"},{"ruleId":"405","severity":1,"message":"462","line":351,"column":26,"nodeType":"403","endLine":351,"endColumn":33},{"ruleId":"405","severity":1,"message":"463","line":354,"column":8,"nodeType":"407","endLine":361,"endColumn":6,"suggestions":"464"},{"ruleId":"405","severity":1,"message":"465","line":429,"column":8,"nodeType":"407","endLine":429,"endColumn":31,"suggestions":"466"},{"ruleId":"405","severity":1,"message":"467","line":55,"column":8,"nodeType":"407","endLine":55,"endColumn":10,"suggestions":"468"},{"ruleId":"405","severity":1,"message":"469","line":94,"column":12,"nodeType":"407","endLine":94,"endColumn":57,"suggestions":"470"},{"ruleId":"405","severity":1,"message":"443","line":102,"column":8,"nodeType":"407","endLine":102,"endColumn":10,"suggestions":"471"},{"ruleId":"405","severity":1,"message":"472","line":125,"column":8,"nodeType":"407","endLine":125,"endColumn":19,"suggestions":"473"},{"ruleId":"474","severity":1,"message":"475","line":41,"column":1,"nodeType":"476","endLine":118,"endColumn":2},{"ruleId":"424","severity":1,"message":"425","line":45,"column":13,"nodeType":"426","messageId":"427","endLine":45,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":52,"column":13,"nodeType":"426","messageId":"427","endLine":52,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":55,"column":13,"nodeType":"426","messageId":"427","endLine":55,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":58,"column":13,"nodeType":"426","messageId":"427","endLine":58,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":86,"column":13,"nodeType":"426","messageId":"427","endLine":86,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":104,"column":13,"nodeType":"426","messageId":"427","endLine":104,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":112,"column":13,"nodeType":"426","messageId":"427","endLine":112,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":115,"column":13,"nodeType":"426","messageId":"427","endLine":115,"endColumn":18},{"ruleId":"401","severity":1,"message":"477","line":5,"column":10,"nodeType":"403","messageId":"404","endLine":5,"endColumn":14},{"ruleId":"474","severity":1,"message":"475","line":67,"column":1,"nodeType":"476","endLine":145,"endColumn":2},{"ruleId":"478","severity":1,"message":"479","line":82,"column":41,"nodeType":"480","messageId":"481","endLine":82,"endColumn":42,"fix":"482"},{"ruleId":"424","severity":1,"message":"425","line":109,"column":13,"nodeType":"426","messageId":"427","endLine":109,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":141,"column":13,"nodeType":"426","messageId":"427","endLine":141,"endColumn":18},{"ruleId":"474","severity":1,"message":"475","line":22,"column":1,"nodeType":"476","endLine":32,"endColumn":2},{"ruleId":"424","severity":1,"message":"425","line":29,"column":13,"nodeType":"426","messageId":"427","endLine":29,"endColumn":18},{"ruleId":"474","severity":1,"message":"475","line":33,"column":1,"nodeType":"476","endLine":61,"endColumn":2},{"ruleId":"424","severity":1,"message":"425","line":37,"column":13,"nodeType":"426","messageId":"427","endLine":37,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":41,"column":13,"nodeType":"426","messageId":"427","endLine":41,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":44,"column":13,"nodeType":"426","messageId":"427","endLine":44,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":47,"column":13,"nodeType":"426","messageId":"427","endLine":47,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":50,"column":13,"nodeType":"426","messageId":"427","endLine":50,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":53,"column":13,"nodeType":"426","messageId":"427","endLine":53,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":58,"column":13,"nodeType":"426","messageId":"427","endLine":58,"endColumn":18},{"ruleId":"401","severity":1,"message":"483","line":1,"column":54,"nodeType":"403","messageId":"404","endLine":1,"endColumn":62},{"ruleId":"424","severity":1,"message":"425","line":54,"column":17,"nodeType":"426","messageId":"427","endLine":54,"endColumn":22},{"ruleId":"405","severity":1,"message":"484","line":57,"column":8,"nodeType":"407","endLine":57,"endColumn":33,"suggestions":"485"},{"ruleId":"405","severity":1,"message":"436","line":88,"column":132,"nodeType":"407","endLine":88,"endColumn":134,"suggestions":"486"},{"ruleId":"405","severity":1,"message":"436","line":89,"column":99,"nodeType":"407","endLine":89,"endColumn":101,"suggestions":"487"},{"ruleId":"405","severity":1,"message":"436","line":90,"column":94,"nodeType":"407","endLine":90,"endColumn":96,"suggestions":"488"},{"ruleId":"405","severity":1,"message":"436","line":91,"column":82,"nodeType":"407","endLine":91,"endColumn":84,"suggestions":"489"},{"ruleId":"405","severity":1,"message":"436","line":92,"column":88,"nodeType":"407","endLine":92,"endColumn":90,"suggestions":"490"},{"ruleId":"424","severity":1,"message":"425","line":102,"column":17,"nodeType":"426","messageId":"427","endLine":102,"endColumn":22},{"ruleId":"405","severity":1,"message":"484","line":105,"column":8,"nodeType":"407","endLine":105,"endColumn":33,"suggestions":"491"},{"ruleId":"405","severity":1,"message":"492","line":183,"column":8,"nodeType":"407","endLine":183,"endColumn":70,"suggestions":"493"},{"ruleId":"405","severity":1,"message":"494","line":198,"column":8,"nodeType":"407","endLine":198,"endColumn":24,"suggestions":"495"},{"ruleId":"405","severity":1,"message":"496","line":333,"column":8,"nodeType":"407","endLine":333,"endColumn":54,"suggestions":"497"},{"ruleId":"401","severity":1,"message":"498","line":8,"column":11,"nodeType":"403","messageId":"404","endLine":8,"endColumn":25},{"ruleId":"405","severity":1,"message":"499","line":51,"column":8,"nodeType":"407","endLine":51,"endColumn":29,"suggestions":"500"},{"ruleId":"501","severity":1,"message":"502","line":60,"column":26,"nodeType":"503","messageId":"504","endLine":60,"endColumn":28},{"ruleId":"424","severity":1,"message":"425","line":99,"column":17,"nodeType":"426","messageId":"427","endLine":99,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":105,"column":17,"nodeType":"426","messageId":"427","endLine":105,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":111,"column":17,"nodeType":"426","messageId":"427","endLine":111,"endColumn":22},{"ruleId":"401","severity":1,"message":"505","line":81,"column":11,"nodeType":"403","messageId":"404","endLine":81,"endColumn":19},{"ruleId":"405","severity":1,"message":"436","line":86,"column":109,"nodeType":"407","endLine":86,"endColumn":111,"suggestions":"506"},{"ruleId":"405","severity":1,"message":"436","line":87,"column":102,"nodeType":"407","endLine":87,"endColumn":104,"suggestions":"507"},{"ruleId":"405","severity":1,"message":"436","line":88,"column":74,"nodeType":"407","endLine":88,"endColumn":76,"suggestions":"508"},{"ruleId":"405","severity":1,"message":"436","line":89,"column":114,"nodeType":"407","endLine":89,"endColumn":116,"suggestions":"509"},{"ruleId":"405","severity":1,"message":"436","line":90,"column":117,"nodeType":"407","endLine":90,"endColumn":119,"suggestions":"510"},{"ruleId":"405","severity":1,"message":"511","line":167,"column":12,"nodeType":"407","endLine":167,"endColumn":42,"suggestions":"512"},{"ruleId":"405","severity":1,"message":"513","line":217,"column":12,"nodeType":"407","endLine":217,"endColumn":47,"suggestions":"514"},{"ruleId":"405","severity":1,"message":"515","line":237,"column":12,"nodeType":"407","endLine":237,"endColumn":95,"suggestions":"516"},{"ruleId":"405","severity":1,"message":"517","line":391,"column":8,"nodeType":"407","endLine":391,"endColumn":104,"suggestions":"518"},{"ruleId":"401","severity":1,"message":"519","line":9,"column":11,"nodeType":"403","messageId":"404","endLine":9,"endColumn":16},{"ruleId":"520","severity":1,"message":"521","line":35,"column":23,"nodeType":"522","messageId":"523","endLine":35,"endColumn":32,"fix":"524"},{"ruleId":"405","severity":1,"message":"525","line":66,"column":8,"nodeType":"407","endLine":66,"endColumn":21,"suggestions":"526"},{"ruleId":"405","severity":1,"message":"527","line":89,"column":8,"nodeType":"407","endLine":89,"endColumn":61,"suggestions":"528"},{"ruleId":"405","severity":1,"message":"529","line":166,"column":8,"nodeType":"407","endLine":166,"endColumn":60,"suggestions":"530"},{"ruleId":"405","severity":1,"message":"531","line":188,"column":12,"nodeType":"407","endLine":198,"endColumn":10,"suggestions":"532"},{"ruleId":"405","severity":1,"message":"525","line":206,"column":8,"nodeType":"407","endLine":206,"endColumn":10,"suggestions":"533"},{"ruleId":"401","severity":1,"message":"534","line":244,"column":11,"nodeType":"403","messageId":"404","endLine":244,"endColumn":27},{"ruleId":"405","severity":1,"message":"535","line":27,"column":12,"nodeType":"407","endLine":27,"endColumn":21,"suggestions":"536"},{"ruleId":"520","severity":1,"message":"521","line":46,"column":23,"nodeType":"522","messageId":"523","endLine":46,"endColumn":32,"fix":"537"},{"ruleId":"520","severity":1,"message":"521","line":52,"column":23,"nodeType":"522","messageId":"523","endLine":52,"endColumn":32,"fix":"538"},{"ruleId":"539","severity":1,"message":"540","line":65,"column":61,"nodeType":"541","messageId":"542","endLine":65,"endColumn":63},{"ruleId":"405","severity":1,"message":"525","line":89,"column":8,"nodeType":"407","endLine":89,"endColumn":21,"suggestions":"543"},{"ruleId":"405","severity":1,"message":"544","line":113,"column":8,"nodeType":"407","endLine":113,"endColumn":48,"suggestions":"545"},{"ruleId":"405","severity":1,"message":"529","line":192,"column":8,"nodeType":"407","endLine":192,"endColumn":59,"suggestions":"546"},{"ruleId":"405","severity":1,"message":"547","line":215,"column":12,"nodeType":"407","endLine":224,"endColumn":10,"suggestions":"548"},{"ruleId":"405","severity":1,"message":"525","line":232,"column":8,"nodeType":"407","endLine":232,"endColumn":10,"suggestions":"549"},{"ruleId":"405","severity":1,"message":"494","line":247,"column":8,"nodeType":"407","endLine":247,"endColumn":24,"suggestions":"550"},{"ruleId":"401","severity":1,"message":"534","line":295,"column":11,"nodeType":"403","messageId":"404","endLine":295,"endColumn":27},{"ruleId":"551","severity":1,"message":"552","line":13,"column":21,"nodeType":"553","endLine":13,"endColumn":36},{"ruleId":"551","severity":1,"message":"552","line":28,"column":33,"nodeType":"553","endLine":28,"endColumn":48},{"ruleId":"551","severity":1,"message":"552","line":43,"column":33,"nodeType":"553","endLine":43,"endColumn":48},{"ruleId":"401","severity":1,"message":"554","line":9,"column":42,"nodeType":"403","messageId":"404","endLine":9,"endColumn":51},{"ruleId":"405","severity":1,"message":"555","line":42,"column":8,"nodeType":"407","endLine":42,"endColumn":33,"suggestions":"556"},{"ruleId":"424","severity":1,"message":"425","line":71,"column":17,"nodeType":"426","messageId":"427","endLine":71,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":105,"column":17,"nodeType":"426","messageId":"427","endLine":105,"endColumn":22},{"ruleId":"405","severity":1,"message":"496","line":107,"column":8,"nodeType":"407","endLine":115,"endColumn":6,"suggestions":"557"},{"ruleId":"405","severity":1,"message":"558","line":143,"column":44,"nodeType":"403","endLine":143,"endColumn":57},{"ruleId":"405","severity":1,"message":"559","line":200,"column":12,"nodeType":"407","endLine":200,"endColumn":51,"suggestions":"560"},{"ruleId":"405","severity":1,"message":"561","line":258,"column":8,"nodeType":"407","endLine":258,"endColumn":75,"suggestions":"562"},{"ruleId":"405","severity":1,"message":"472","line":267,"column":8,"nodeType":"407","endLine":267,"endColumn":25,"suggestions":"563"},{"ruleId":"405","severity":1,"message":"564","line":276,"column":8,"nodeType":"407","endLine":276,"endColumn":22,"suggestions":"565"},{"ruleId":"405","severity":1,"message":"566","line":285,"column":12,"nodeType":"407","endLine":285,"endColumn":14,"suggestions":"567"},{"ruleId":"405","severity":1,"message":"568","line":297,"column":8,"nodeType":"407","endLine":297,"endColumn":10,"suggestions":"569"},{"ruleId":"401","severity":1,"message":"570","line":1,"column":41,"nodeType":"403","messageId":"404","endLine":1,"endColumn":49},{"ruleId":"424","severity":1,"message":"425","line":37,"column":17,"nodeType":"426","messageId":"427","endLine":37,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":40,"column":17,"nodeType":"426","messageId":"427","endLine":40,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":43,"column":17,"nodeType":"426","messageId":"427","endLine":43,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":46,"column":17,"nodeType":"426","messageId":"427","endLine":46,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":49,"column":17,"nodeType":"426","messageId":"427","endLine":49,"endColumn":22},{"ruleId":"405","severity":1,"message":"571","line":68,"column":8,"nodeType":"407","endLine":68,"endColumn":21,"suggestions":"572"},{"ruleId":"405","severity":1,"message":"573","line":78,"column":8,"nodeType":"407","endLine":78,"endColumn":18,"suggestions":"574"},{"ruleId":"424","severity":1,"message":"425","line":85,"column":17,"nodeType":"426","messageId":"427","endLine":85,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":88,"column":17,"nodeType":"426","messageId":"427","endLine":88,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":91,"column":17,"nodeType":"426","messageId":"427","endLine":91,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":94,"column":17,"nodeType":"426","messageId":"427","endLine":94,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":97,"column":17,"nodeType":"426","messageId":"427","endLine":97,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":107,"column":17,"nodeType":"426","messageId":"427","endLine":107,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":110,"column":17,"nodeType":"426","messageId":"427","endLine":110,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":113,"column":17,"nodeType":"426","messageId":"427","endLine":113,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":116,"column":17,"nodeType":"426","messageId":"427","endLine":116,"endColumn":22},{"ruleId":"424","severity":1,"message":"425","line":119,"column":17,"nodeType":"426","messageId":"427","endLine":119,"endColumn":22},"no-native-reassign",["575"],"no-negated-in-lhs",["576"],"@typescript-eslint/no-unused-vars","'ReactNode' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'creekBE'. Either include it or remove the dependency array.","ArrayExpression",["577"],"React Hook useEffect has a missing dependency: 'backgroundMusic'. Either include it or remove the dependency array.",["578"],"React Hook useEffect has a missing dependency: 'spendOneMinute'. Either include it or remove the dependency array.",["579"],"'setMap' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'rodDimensions.height'. Either include it or remove the dependency array.",["580"],"React Hook useMemo has an unnecessary dependency: 'playerCoordinates'. Either exclude it or remove the dependency array.",["581"],"React Hook useMemo has a missing dependency: 'map.shorePath.to.y'. Either include it or remove the dependency array.",["582"],"React Hook useMemo has missing dependencies: 'rodAngle' and 'rodDimensions.height'. Either include them or remove the dependency array.",["583"],"React Hook useEffect has a missing dependency: 'updateGlobalPositionState'. Either include it or remove the dependency array. If 'updateGlobalPositionState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["584"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useMemo has missing dependencies: 'isBarometerVisible', 'scrollToBait', and 'scrollToPlayer'. Either include them or remove the dependency array.",["585"],"React Hook useEffect has missing dependencies: 'map.shorePath.from.x', 'map.shorePath.from.y', 'map.shorePath.to.x', and 'map.shorePath.to.y'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMushroom' needs the current value of 'map.shorePath.from.x'.",["586"],"React Hook useMemo has missing dependencies: 'lineStepMatches.steps', 'lineStepMatches.subSteps', and 'nextStep'. Either include them or remove the dependency array.",["587"],"React Hook useEffect has a missing dependency: 'closeMenu'. Either include it or remove the dependency array. If 'closeMenu' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["588"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["589"],["590"],"React Hook useCallback has missing dependencies: 'isPlayerMoving', 'map.width', 'scrollToPlayer', and 'setPlayerCoordinates'. Either include them or remove the dependency array. If 'scrollToPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["591"],"React Hook useLayoutEffect has missing dependencies: 'scrollToPlayer', 'setBaitOffset', 'setBaitType', and 'setRodAngle'. Either include them or remove the dependency array. If 'scrollToPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["592"],"React Hook useEffect has missing dependencies: 'isBarometerVisible' and 'setIsBarometerVisible'. Either include them or remove the dependency array. If 'setIsBarometerVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["593"],"React Hook useCallback has a missing dependency: 'setProcess'. Either include it or remove the dependency array. If 'setProcess' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["594"],"The ref value 'shoreRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'shoreRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'movePlayer', 'shoreRef', and 'throwLine'. Either include them or remove the dependency array.",["595"],"'setHasThrown' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'setBaitOffset', 'setBaitType', 'setProcess', 'setRodAngle', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["596"],"React Hook useEffect has missing dependencies: 'scrollToPlayer', 'setBaitOffset', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["597"],["598"],"React Hook useCallback has missing dependencies: 'setBaitOffset', 'setRodAngle', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["599"],"React Hook useEffect has missing dependencies: 'baitRef', 'lakeRef', 'scrollToBait', 'setBaitOffset', 'setBaitType', 'setIsBarometerVisible', and 'setProcess'. Either include them or remove the dependency array. If 'setIsBarometerVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["600"],"React Hook useCallback has a missing dependency: 'setBaitOffset'. Either include it or remove the dependency array. If 'setBaitOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["601"],"The ref value 'gaugeRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'gaugeRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'changeRodDirection' and 'goBack'. Either include them or remove the dependency array.",["602"],"React Hook useMemo has an unnecessary dependency: 'gaugeValueRef.current'. Either exclude it or remove the dependency array. Mutable values like 'gaugeValueRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["603"],"React Hook useEffect has a missing dependency: 'makeBaitAvailable'. Either include it or remove the dependency array.",["604"],"React Hook useCallback has missing dependencies: 'baitOffset.x', 'baitOffset.y', 'scrollToBait', 'setBaitOffset', and 'setRodAngle'. Either include them or remove the dependency array. If 'setBaitOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["605"],["606"],"React Hook useEffect has a missing dependency: 'reelingSE'. Either include it or remove the dependency array.",["607"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Item' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"608","text":"609"},"'Fragment' is defined but never used.","React Hook useMemo has a missing dependency: 'isEquipment'. Either include it or remove the dependency array.",["610"],["611"],["612"],["613"],["614"],["615"],["616"],"React Hook useMemo has missing dependencies: 'equipItem', 'isEquipment', and 'isEquipped'. Either include them or remove the dependency array.",["617"],"React Hook useMemo has a missing dependency: 'category'. Either include it or remove the dependency array. Outer scope values like 'rodLevels' aren't valid dependencies because mutating them doesn't re-render the component.",["618"],"React Hook useMemo has a missing dependency: 'setCurrentSection'. Either include it or remove the dependency array. If 'setCurrentSection' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["619"],"'FishEntryProps' is defined but never used.","React Hook useMemo has a missing dependency: 'sellerPhrase.length'. Either include it or remove the dependency array.",["620"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'map' is assigned a value but never used.",["621"],["622"],["623"],["624"],["625"],"React Hook useCallback has an unnecessary dependency: 'opacity'. Either exclude it or remove the dependency array.",["626"],"React Hook useCallback has missing dependencies: 'baitFood._id', 'baitFood.category', 'loseBait', 'setGameNotification', and 'setGameProcess'. Either include them or remove the dependency array.",["627"],"React Hook useCallback has unnecessary dependencies: 'fishDirection', 'isInScope', and 'likesBait'. Either exclude them or remove the dependency array.",["628"],"React Hook useEffect has missing dependencies: 'fish', 'isBoss', 'makeBaitAvailable', 'pullChance', 'setGameNotification', 'setGameProcess', and 'setHookedFish'. Either include them or remove the dependency array.",["629"],"'Props' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"630","text":"631"},"React Hook useEffect has a missing dependency: 'setSellerPhrase'. Either include it or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["632"],"React Hook useMemo has missing dependencies: 'saleSE' and 'setSellerPhrase'. Either include them or remove the dependency array.",["633"],"React Hook useMemo has a missing dependency: 'setSellerPhrase'. Either include it or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["634"],"React Hook useCallback has missing dependencies: 'setFocusedItem' and 'setSellerPhrase'. Either include them or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["635"],["636"],"'ForSaleItemProps' is defined but never used.","React Hook useCallback has a missing dependency: 'transition'. Either include it or remove the dependency array.",["637"],{"range":"638","text":"631"},{"range":"639","text":"631"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["640"],"React Hook useMemo has missing dependencies: 'inventoryEntries', 'purchaseSE', 'setSellerPhrase', and 'thankYouSE'. Either include them or remove the dependency array.",["641"],["642"],"React Hook useCallback has missing dependencies: 'setSellerPhrase' and 'thankYouSE'. Either include them or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["643"],["644"],["645"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'GiFishing' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'allCategories'. Either exclude it or remove the dependency array. Outer scope values like 'allCategories' aren't valid dependencies because mutating them doesn't re-render the component.",["646"],["647"],"Assignments to the 'recoverTensionValue' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useCallback has missing dependencies: 'scrollToBait' and 'setRodAngle'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["648"],"React Hook useEffect has a missing dependency: 'incrementLineTension'. Either include it or remove the dependency array. If 'incrementLineTension' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["649"],["650"],"React Hook useEffect has missing dependencies: 'catchNewFish', 'goBack', 'hookedFish.fish', and 'setGameProcess'. Either include them or remove the dependency array. If 'catchNewFish' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["651"],"React Hook useCallback has missing dependencies: 'reelingSE', 'setGameProcess', 'setHookedFish', and 'setLineTension'. Either include them or remove the dependency array. If 'setLineTension' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["652"],"React Hook useEffect has missing dependencies: 'hookedFish.fish.pullChance', 'hookedFish.fish.roamingInterval', and 'setIsFishPulling'. Either include them or remove the dependency array. If 'setIsFishPulling' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["653"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'SEPath'. Either include it or remove the dependency array.",["654"],"React Hook useEffect has missing dependencies: 'destroyNotification' and 'transition'. Either include them or remove the dependency array.",["655"],"no-global-assign","no-unsafe-negation",{"desc":"656","fix":"657"},{"desc":"658","fix":"659"},{"desc":"660","fix":"661"},{"desc":"662","fix":"663"},{"desc":"664","fix":"665"},{"desc":"666","fix":"667"},{"desc":"668","fix":"669"},{"desc":"670","fix":"671"},{"desc":"672","fix":"673"},{"desc":"674","fix":"675"},{"desc":"676","fix":"677"},{"desc":"678","fix":"679"},{"desc":"680","fix":"681"},{"desc":"680","fix":"682"},{"desc":"683","fix":"684"},{"desc":"685","fix":"686"},{"desc":"687","fix":"688"},{"desc":"689","fix":"690"},{"desc":"691","fix":"692"},{"desc":"693","fix":"694"},{"desc":"695","fix":"696"},{"desc":"687","fix":"697"},{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},{"desc":"702","fix":"703"},{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"687","fix":"712"},{"desc":"713","fix":"714"},[2082,2083],"",{"desc":"715","fix":"716"},{"desc":"680","fix":"717"},{"desc":"680","fix":"718"},{"desc":"680","fix":"719"},{"desc":"680","fix":"720"},{"desc":"680","fix":"721"},{"desc":"715","fix":"722"},{"desc":"723","fix":"724"},{"desc":"725","fix":"726"},{"desc":"727","fix":"728"},{"desc":"729","fix":"730"},{"desc":"680","fix":"731"},{"desc":"680","fix":"732"},{"desc":"680","fix":"733"},{"desc":"680","fix":"734"},{"desc":"680","fix":"735"},{"desc":"736","fix":"737"},{"desc":"738","fix":"739"},{"desc":"740","fix":"741"},{"desc":"742","fix":"743"},[1611,1611],"()",{"desc":"744","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},[2170,2170],[2423,2423],{"desc":"744","fix":"756"},{"desc":"757","fix":"758"},{"desc":"759","fix":"760"},{"desc":"761","fix":"762"},{"desc":"752","fix":"763"},{"desc":"725","fix":"764"},{"desc":"765","fix":"766"},{"desc":"767","fix":"768"},{"desc":"769","fix":"770"},{"desc":"771","fix":"772"},{"desc":"773","fix":"774"},{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"781","fix":"782"},{"desc":"783","fix":"784"},"Update the dependencies array to be: [audioEnabled, creekBE]",{"range":"785","text":"786"},"Update the dependencies array to be: [audioEnabled, backgroundMusic, isBGMEnabled]",{"range":"787","text":"788"},"Update the dependencies array to be: [spendOneMinute]",{"range":"789","text":"790"},"Update the dependencies array to be: [playerCoordinates.width, playerCoordinates.x, playerCoordinates.y, rodDimensions.height]",{"range":"791","text":"792"},"Update the dependencies array to be: [map, baitCoordinates, rodDimensions]",{"range":"793","text":"794"},"Update the dependencies array to be: [baitCoordinates.x, baitCoordinates.y, baitOffset.x, baitOffset.y, map.shorePath.to.y]",{"range":"795","text":"796"},"Update the dependencies array to be: [lineOrigin.x, lineOrigin.y, baitOffset.x, baitOffset.y, rodOffset.x, rodOffset.y, rodAngle, rodDimensions.height]",{"range":"797","text":"798"},"Update the dependencies array to be: [baitLakeCoords, updateGlobalPositionState]",{"range":"799","text":"800"},"Update the dependencies array to be: [process, setProcess, playerCoordinates, scrollToPlayer, map, isBarometerVisible, scrollToBait, rodAngle, rodOffset, baitOffset, baitOffsetLimit, baitLakeCoords, baitDistance, rodLevel, lineLength]",{"range":"801","text":"802"},"Update the dependencies array to be: [isPlayerOutOfBaits, map.shorePath.from.x, map.shorePath.from.y, map.shorePath.to.x, map.shorePath.to.y]",{"range":"803","text":"804"},"Update the dependencies array to be: [nextStep, baitDistance, lineStepMatches.steps, lineStepMatches.subSteps]",{"range":"805","text":"806"},"Update the dependencies array to be: [closeMenu]",{"range":"807","text":"808"},"Update the dependencies array to be: [dispatch]",{"range":"809","text":"810"},{"range":"811","text":"810"},"Update the dependencies array to be: [isPlayerMoving, map.width, playerCoordinates, scrollToPlayer, setPlayerCoordinates]",{"range":"812","text":"813"},"Update the dependencies array to be: [scrollToPlayer, setBaitOffset, setBaitType, setRodAngle]",{"range":"814","text":"815"},"Update the dependencies array to be: [isBarometerVisible, setIsBarometerVisible]",{"range":"816","text":"817"},"Update the dependencies array to be: [isPlayerMoving, isMainMenuOpen, baitFood, setProcess]",{"range":"818","text":"819"},"Update the dependencies array to be: [playerCoordinates, isMainMenuOpen, movePlayer, throwLine, shoreRef]",{"range":"820","text":"821"},"Update the dependencies array to be: [setBaitOffset, setBaitType, setProcess, setRodAngle, setRodOffset]",{"range":"822","text":"823"},"Update the dependencies array to be: [scrollToPlayer, setBaitOffset, setRodOffset]",{"range":"824","text":"825"},{"range":"826","text":"817"},"Update the dependencies array to be: [isThrowing, setBaitOffset, setRodAngle, setRodOffset]",{"range":"827","text":"828"},"Update the dependencies array to be: [isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords, setIsBarometerVisible, setBaitOffset, scrollToBait, setBaitType, baitRef, lakeRef, setProcess]",{"range":"829","text":"830"},"Update the dependencies array to be: [rodLevel.maxLength, setBaitOffset, rodAngle]",{"range":"831","text":"832"},"Update the dependencies array to be: [isPreparingThrow, spaceFired, rodAngle, rodOffset, confirmThrow, isThrowing, goBack, changeRodDirection]",{"range":"833","text":"834"},"Update the dependencies array to be: []",{"range":"835","text":"836"},"Update the dependencies array to be: [makeBaitAvailable]",{"range":"837","text":"838"},"Update the dependencies array to be: [baitDistance, isReeling, baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait, goBack]",{"range":"839","text":"840"},{"range":"841","text":"817"},"Update the dependencies array to be: [isReeling, reelingSE]",{"range":"842","text":"843"},"Update the dependencies array to be: [isEquipment, category, rodLevel._id, _id]",{"range":"844","text":"845"},{"range":"846","text":"810"},{"range":"847","text":"810"},{"range":"848","text":"810"},{"range":"849","text":"810"},{"range":"850","text":"810"},{"range":"851","text":"845"},"Update the dependencies array to be: [isEquipment, isEquipped, _id, category, baitFood, removeBait, handleUseBait, equipItem]",{"range":"852","text":"853"},"Update the dependencies array to be: [_id, category]",{"range":"854","text":"855"},"Update the dependencies array to be: [entries, isPlayerOutOfBaits, currentEntryNum, setCurrentSection]",{"range":"856","text":"857"},"Update the dependencies array to be: [sellerPhrase.length, sellerPhraseSpelled]",{"range":"858","text":"859"},{"range":"860","text":"810"},{"range":"861","text":"810"},{"range":"862","text":"810"},{"range":"863","text":"810"},{"range":"864","text":"810"},"Update the dependencies array to be: [setFishCoords, area]",{"range":"865","text":"866"},"Update the dependencies array to be: [hookedFish, giveUpBait, baitFood.category, baitFood._id, setGameNotification, loseBait, setGameProcess]",{"range":"867","text":"868"},"Update the dependencies array to be: [fishCoords, roamingDistance, fishWidth, area]",{"range":"869","text":"870"},"Update the dependencies array to be: [wouldHookSuccessfully, canTryToCatch, isBaitAvailable, fishID, groupID, strength, size, goAway, setHookedFish, fish, pullChance, isBoss, setGameProcess, makeBaitAvailable, setGameNotification]",{"range":"871","text":"872"},"Update the dependencies array to be: [focusedItem, setSellerPhrase]",{"range":"873","text":"874"},"Update the dependencies array to be: [myDoubloons, sellableEntries, focusedItem, setSellerPhrase, sellItem, saleSE]",{"range":"875","text":"876"},"Update the dependencies array to be: [canSell, isConfirmingSale, saleAmount, _id, plural, setSellerPhrase]",{"range":"877","text":"878"},"Update the dependencies array to be: [canSell, isConfirmingSale, setSellerPhrase, saleAmount, plural, _id, sellItem, totalPrice, saleSE, amount, setFocusedItem]",{"range":"879","text":"880"},"Update the dependencies array to be: [setSellerPhrase]",{"range":"881","text":"882"},"Update the dependencies array to be: [onClose, transition]",{"range":"883","text":"884"},{"range":"885","text":"874"},"Update the dependencies array to be: [focusedItem, setSellerPhrase, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries]",{"range":"886","text":"887"},"Update the dependencies array to be: [canBuy, isConfirmingPurchase, amount, _id, plural, setSellerPhrase]",{"range":"888","text":"889"},"Update the dependencies array to be: [canBuy, isConfirmingPurchase, setSellerPhrase, amount, plural, _id, purchaseItem, totalPrice, purchaseSE, thankYouSE]",{"range":"890","text":"891"},{"range":"892","text":"882"},{"range":"893","text":"855"},"Update the dependencies array to be: [baitFood]",{"range":"894","text":"895"},"Update the dependencies array to be: [currentStatusSectionID, doubloons, gameTimeSpentFormatted, fishrodLevel._id, baitFood, baitColor, removeBait, setCurrentSection]",{"range":"896","text":"897"},"Update the dependencies array to be: [baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait]",{"range":"898","text":"899"},"Update the dependencies array to be: [isFishPulling, isPlayerReeling, strengthRatio, fishRodLevel, move, incrementLineTension]",{"range":"900","text":"901"},"Update the dependencies array to be: [isPlayerReeling, reelingSE]",{"range":"902","text":"903"},"Update the dependencies array to be: [baitDistance, catchNewFish, goBack, hookedFish.fish, setGameProcess]",{"range":"904","text":"905"},"Update the dependencies array to be: [reelingSE, setGameProcess, setHookedFish, setLineTension]",{"range":"906","text":"907"},"Update the dependencies array to be: [hookedFish.fish.pullChance, hookedFish.fish.roamingInterval, setIsFishPulling]",{"range":"908","text":"909"},"Update the dependencies array to be: [SEPath, soundEffect]",{"range":"910","text":"911"},"Update the dependencies array to be: [destroyNotification, duration, transition]",{"range":"912","text":"913"},[3283,3297],"[audioEnabled, creekBE]",[5121,5149],"[audioEnabled, backgroundMusic, isBGMEnabled]",[5327,5329],"[spendOneMinute]",[6590,6609],"[playerCoordinates.width, playerCoordinates.x, playerCoordinates.y, rodDimensions.height]",[7537,7593],"[map, baitCoordinates, rodDimensions]",[7888,7917],"[baitCoordinates.x, baitCoordinates.y, baitOffset.x, baitOffset.y, map.shorePath.to.y]",[8642,8677],"[lineOrigin.x, lineOrigin.y, baitOffset.x, baitOffset.y, rodOffset.x, rodOffset.y, rodAngle, rodDimensions.height]",[11134,11150],"[baitLakeCoords, updateGlobalPositionState]",[14436,14730],"[process, setProcess, playerCoordinates, scrollToPlayer, map, isBarometerVisible, scrollToBait, rodAngle, rodOffset, baitOffset, baitOffsetLimit, baitLakeCoords, baitDistance, rodLevel, lineLength]",[15466,15486],"[isPlayerOutOfBaits, map.shorePath.from.x, map.shorePath.from.y, map.shorePath.to.x, map.shorePath.to.y]",[2273,2314],"[nextStep, baitDistance, lineStepMatches.steps, lineStepMatches.subSteps]",[1360,1362],"[closeMenu]",[1723,1725],"[dispatch]",[1827,1829],[3237,3256],"[isPlayerMoving, map.width, playerCoordinates, scrollToPlayer, setPlayerCoordinates]",[3531,3533],"[scrollToPlayer, setBaitOffset, setBaitType, setRodAngle]",[3679,3681],"[isBarometerVisible, setIsBarometerVisible]",[3892,3934],"[isPlayerMoving, isMainMenuOpen, baitFood, setProcess]",[7551,7586],"[playerCoordinates, isMainMenuOpen, movePlayer, throwLine, shoreRef]",[3446,3448],"[setBaitOffset, setBaitType, setProcess, setRodAngle, setRodOffset]",[3642,3644],"[scrollToPlayer, setBaitOffset, setRodOffset]",[3744,3746],[4093,4105],"[isThrowing, setBaitOffset, setRodAngle, setRodOffset]",[8329,8407],"[isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords, setIsBarometerVisible, setBaitOffset, scrollToBait, setBaitType, baitRef, lakeRef, setProcess]",[8932,8952],"[rodLevel.maxLength, setBaitOffset, rodAngle]",[15357,15495],"[isPreparingThrow, spaceFired, rodAngle, rodOffset, confirmThrow, isThrowing, goBack, changeRodDirection]",[18869,18892],"[]",[1908,1910],"[makeBaitAvailable]",[3554,3599],"[baitDistance, isReeling, baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait, goBack]",[3771,3773],[4464,4475],"[isReeling, reelingSE]",[2264,2289],"[isEquipment, category, rodLevel._id, _id]",[3578,3580],[3681,3683],[3779,3781],[3865,3867],[3957,3959],[4435,4460],[7283,7345],"[isEquipment, isEquipped, _id, category, baitFood, removeBait, handleUseBait, equipItem]",[7929,7945],"[_id, category]",[13634,13680],"[entries, isPlayerOutOfBaits, currentEntryNum, setCurrentSection]",[1946,1967],"[sellerPhrase.length, sellerPhraseSpelled]",[3883,3885],[3989,3991],[4067,4069],[4185,4187],[4306,4308],[7461,7491],"[setFishCoords, area]",[9330,9365],"[hookedFish, giveUpBait, baitFood.category, baitFood._id, setGameNotification, loseBait, setGameProcess]",[10220,10303],"[fishCoords, roamingDistance, fishWidth, area]",[16492,16588],"[wouldHookSuccessfully, canTryToCatch, isBaitAvailable, fishID, groupID, strength, size, goAway, setHookedFish, fish, pullChance, isBoss, setGameProcess, makeBaitAvailable, setGameNotification]",[2713,2726],"[focusedItem, setSellerPhrase]",[3609,3662],"[myDoubloons, sellableEntries, focusedItem, setSellerPhrase, sellItem, saleSE]",[6548,6600],"[canSell, isConfirmingSale, saleAmount, _id, plural, setSellerPhrase]",[7526,7744],"[canSell, isConfirmingSale, setSellerPhrase, saleAmount, plural, _id, sellItem, totalPrice, saleSE, amount, setFocusedItem]",[7903,7905],"[setSellerPhrase]",[754,763],"[onClose, transition]",[3691,3704],[4575,4615],"[focusedItem, setSellerPhrase, myDoubloons, purchaseItem, purchaseSE, thankYouSE, inventoryEntries]",[7581,7632],"[canBuy, isConfirmingPurchase, amount, _id, plural, setSellerPhrase]",[8550,8754],"[canBuy, isConfirmingPurchase, setSellerPhrase, amount, plural, _id, purchaseItem, totalPrice, purchaseSE, thankYouSE]",[8917,8919],[9503,9519],[1622,1647],"[baitFood]",[4719,4895],"[currentStatusSectionID, doubloons, gameTimeSpentFormatted, fishrodLevel._id, baitFood, baitColor, removeBait, setCurrentSection]",[7343,7382],"[baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait]",[9664,9731],"[isFishPulling, isPlayerReeling, strengthRatio, fishRodLevel, move, incrementLineTension]",[9953,9970],"[isPlayerReeling, reelingSE]",[10245,10259],"[baitDistance, catchNewFish, goBack, hookedFish.fish, setGameProcess]",[10523,10525],"[reelingSE, setGameProcess, setHookedFish, setLineTension]",[10932,10934],"[hookedFish.fish.pullChance, hookedFish.fish.roamingInterval, setIsFishPulling]",[2272,2285],"[SEPath, soundEffect]",[2690,2700],"[destroyNotification, duration, transition]"]