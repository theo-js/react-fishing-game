[{"C:\\www\\personal\\fishing-game\\src\\index.tsx":"1","C:\\www\\personal\\fishing-game\\src\\reportWebVitals.ts":"2","C:\\www\\personal\\fishing-game\\src\\App.tsx":"3","C:\\www\\personal\\fishing-game\\src\\store\\index.js":"4","C:\\www\\personal\\fishing-game\\src\\components\\Game\\index.tsx":"5","C:\\www\\personal\\fishing-game\\src\\store\\actions\\game.ts":"6","C:\\www\\personal\\fishing-game\\src\\utils\\position.ts":"7","C:\\www\\personal\\fishing-game\\src\\store\\actions\\position.ts":"8","C:\\www\\personal\\fishing-game\\src\\store\\selectors\\game.ts":"9","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\index.ts":"10","C:\\www\\personal\\fishing-game\\src\\utils\\math.ts":"11","C:\\www\\personal\\fishing-game\\src\\store\\actions\\types.ts":"12","C:\\www\\personal\\fishing-game\\src\\components\\Game\\Barometer\\index.tsx":"13","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\index.tsx":"14","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\Initial\\index.tsx":"15","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\ThrowLine\\index.tsx":"16","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\WaitFish\\index.tsx":"17","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Beginner\\index.tsx":"18","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\game.ts":"19","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\inventory.ts":"20","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\position.ts":"21","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\fishing.ts":"22","C:\\www\\personal\\fishing-game\\src\\utils\\throttle.ts":"23","C:\\www\\personal\\fishing-game\\src\\store\\actions\\fishing.ts":"24","C:\\www\\personal\\fishing-game\\src\\components\\Game\\animations\\index.ts":"25","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Inventory\\index.tsx":"26","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\FishArea\\index.tsx":"27","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\index.tsx":"28","C:\\www\\personal\\fishing-game\\src\\components\\ProgressCircle\\index.tsx":"29","C:\\www\\personal\\fishing-game\\src\\components\\fishes\\Default\\index.tsx":"30","C:\\www\\personal\\fishing-game\\src\\components\\Game\\evolution\\index.ts":"31","C:\\www\\personal\\fishing-game\\src\\store\\actions\\inventory.ts":"32","C:\\www\\personal\\fishing-game\\src\\store\\selectors\\inventory.ts":"33","C:\\www\\personal\\fishing-game\\src\\store\\selectors\\position.ts":"34","C:\\www\\personal\\fishing-game\\src\\store\\selectors\\fishing.ts":"35","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\FishGroup\\index.tsx":"36","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Sell\\index.tsx":"37","C:\\www\\personal\\fishing-game\\src\\components\\misc\\Modal\\index.tsx":"38","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Buy\\index.tsx":"39","C:\\www\\personal\\fishing-game\\src\\interfaces\\position.ts":"40","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Credits\\index.tsx":"41"},{"size":500,"mtime":1608227343144,"results":"42","hashOfConfig":"43"},{"size":425,"mtime":1608227343144,"results":"44","hashOfConfig":"43"},{"size":287,"mtime":1609093450458,"results":"45","hashOfConfig":"43"},{"size":402,"mtime":1609447471652,"results":"46","hashOfConfig":"43"},{"size":15264,"mtime":1609655911172,"results":"47","hashOfConfig":"43"},{"size":769,"mtime":1609448166707,"results":"48","hashOfConfig":"43"},{"size":1506,"mtime":1609181776824,"results":"49","hashOfConfig":"43"},{"size":145,"mtime":1608916181029,"results":"50","hashOfConfig":"43"},{"size":710,"mtime":1609550648309,"results":"51","hashOfConfig":"43"},{"size":350,"mtime":1609278467473,"results":"52","hashOfConfig":"43"},{"size":375,"mtime":1609159543027,"results":"53","hashOfConfig":"43"},{"size":658,"mtime":1609657001513,"results":"54","hashOfConfig":"43"},{"size":3438,"mtime":1608922188017,"results":"55","hashOfConfig":"43"},{"size":4183,"mtime":1609761497085,"results":"56","hashOfConfig":"43"},{"size":7726,"mtime":1609448230968,"results":"57","hashOfConfig":"43"},{"size":19532,"mtime":1609302888321,"results":"58","hashOfConfig":"43"},{"size":8159,"mtime":1609188871073,"results":"59","hashOfConfig":"43"},{"size":974,"mtime":1609303189372,"results":"60","hashOfConfig":"43"},{"size":3104,"mtime":1609742350605,"results":"61","hashOfConfig":"43"},{"size":3853,"mtime":1609477947458,"results":"62","hashOfConfig":"43"},{"size":764,"mtime":1609108643860,"results":"63","hashOfConfig":"43"},{"size":528,"mtime":1609161077585,"results":"64","hashOfConfig":"43"},{"size":275,"mtime":1609123618760,"results":"65","hashOfConfig":"43"},{"size":158,"mtime":1609109316260,"results":"66","hashOfConfig":"43"},{"size":1914,"mtime":1609212803604,"results":"67","hashOfConfig":"43"},{"size":7577,"mtime":1609662400349,"results":"68","hashOfConfig":"43"},{"size":1192,"mtime":1609114547105,"results":"69","hashOfConfig":"43"},{"size":4760,"mtime":1609662253628,"results":"70","hashOfConfig":"43"},{"size":1497,"mtime":1608823676820,"results":"71","hashOfConfig":"43"},{"size":14941,"mtime":1609254071431,"results":"72","hashOfConfig":"43"},{"size":429,"mtime":1609197914666,"results":"73","hashOfConfig":"43"},{"size":956,"mtime":1609739091047,"results":"74","hashOfConfig":"43"},{"size":634,"mtime":1609707017096,"results":"75","hashOfConfig":"43"},{"size":236,"mtime":1609106235663,"results":"76","hashOfConfig":"43"},{"size":307,"mtime":1609116077257,"results":"77","hashOfConfig":"43"},{"size":1462,"mtime":1609087432254,"results":"78","hashOfConfig":"43"},{"size":10939,"mtime":1609780251191,"results":"79","hashOfConfig":"43"},{"size":1653,"mtime":1609474919965,"results":"80","hashOfConfig":"43"},{"size":11496,"mtime":1609725628759,"results":"81","hashOfConfig":"43"},{"size":395,"mtime":1608539951678,"results":"82","hashOfConfig":"43"},{"size":1011,"mtime":1609648220182,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"w9s9g4",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"131","usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"86"},"C:\\www\\personal\\fishing-game\\src\\index.tsx",[],["183","184"],"C:\\www\\personal\\fishing-game\\src\\reportWebVitals.ts",[],"C:\\www\\personal\\fishing-game\\src\\App.tsx",[],"C:\\www\\personal\\fishing-game\\src\\store\\index.js",[],["185","186"],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\index.tsx",["187","188","189","190","191","192","193","194","195","196","197","198"],"import React, { useState, useMemo, useCallback, useEffect, useLayoutEffect, useRef } from 'react'\r\nimport styles from './index.module.sass'\r\nimport gameProcesses from './processes/index.json'\r\nimport Initial from './processes/Initial'\r\nimport ThrowLine from './processes/ThrowLine'\r\nimport WaitFish from './processes/WaitFish'\r\nimport Barometer from './Barometer'\r\nimport MainMenu from './MainMenu'\r\nimport { Dimensions, Coordinates, Path, Map } from '../../interfaces/position'\r\nimport { GiFishingHook } from 'react-icons/all'\r\nimport { getVectorLength, pxToM } from '../../utils/position'\r\nimport BeginnerArea from './areas/Beginner'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { isMainMenuOpenSelector } from '../../store/selectors/game'\r\nimport { processSelector, rodLevelSelector } from '../../store/selectors/game'\r\nimport { setGameProcessAction, setRodLevelAction } from '../../store/actions/game'\r\nimport { updatePositionAction } from '../../store/actions/position'\r\n\r\ninterface Props {\r\n    [key: string]: any\r\n}\r\n\r\nconst Game: React.FC<Props> = ({\r\n    process,\r\n    setProcess,\r\n    isMainMenuOpen,\r\n    updateGlobalPositionState,\r\n    rodLevel\r\n}) => {\r\n    // Audio\r\n    const creekBE = useMemo((): HTMLAudioElement => {\r\n        const src = require('../../assets/audio/be/creek.mp3').default\r\n        const audio = new Audio()\r\n        audio.src = src\r\n        audio.loop = true\r\n        return audio\r\n    }, [])\r\n    const [audioEnabled, setAudioEnabled] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        if (audioEnabled) {\r\n            const playPromise = creekBE.play()\r\n            if (typeof playPromise !== 'undefined') {\r\n                playPromise\r\n                    .then(() => null)\r\n                    .catch(() => console.log('Failed playing \"creek\" background effect'))\r\n            }\r\n        } else creekBE.pause()\r\n    }, [audioEnabled])\r\n    // Enable audio\r\n    useEffect(() => {\r\n        function handler (): void {\r\n            setAudioEnabled(true)\r\n        }\r\n        if (!audioEnabled) {\r\n            document.body.addEventListener('click', handler, false)\r\n            document.body.addEventListener('touchstart', handler, false)\r\n            document.body.addEventListener('keypress', handler, false)\r\n        } else {\r\n            document.body.removeEventListener('click', handler, false)\r\n            document.body.removeEventListener('touchstart', handler, false)\r\n            document.body.removeEventListener('keypress', handler, false)\r\n        }\r\n        return () => {\r\n            document.body.removeEventListener('click', handler, false)\r\n            document.body.removeEventListener('touchstart', handler, false)\r\n            document.body.removeEventListener('keypress', handler, false)\r\n        }\r\n    }, [audioEnabled])\r\n\r\n    // Refs\r\n    const playerRef = useRef<HTMLDivElement>(null)\r\n    const playerPositionRef = useRef<HTMLDivElement>(null)\r\n    const shoreRef = useRef<HTMLDivElement>(null)\r\n    const lakeRef = useRef<HTMLDivElement>(null)\r\n    const baitRef = useRef<HTMLDivElement>(null)\r\n    const lineRef = useRef(null)\r\n\r\n    // State\r\n    const [map, setMap] = useState<Map>({\r\n        width: 4200,\r\n        height: 3200,\r\n        shorePath: { from: { x: 0, y: 0 }, to: { x: 4200, y: 200 }},\r\n        lakePath: { from: { x: 0, y: 0 }, to: { x: 4200, y: 3000 }}\r\n    })\r\n    const [playerCoordinates, setPlayerCoordinates] = useState<Coordinates | undefined>({\r\n        x: map.width / 2 - (50/*playerWidth*//2),\r\n        y: map.shorePath.to.y / 2,\r\n        width: 50\r\n    })\r\n\r\n    const rodDimensions = useMemo((): Dimensions => ({ height: 150, width: 10 }), [])\r\n    const [rodOffset, setRodOffset] = useState<Coordinates>({ x: 0, y: -20 })\r\n    const [rodAngle, setRodAngle] = useState<number>(0) \r\n\r\n    const [baitType, setBaitType] = useState('default')\r\n    const baitCoordinates = useMemo((): Coordinates => ({\r\n        x: playerCoordinates.x + playerCoordinates.width/2 + 1,\r\n        y: playerCoordinates.y * 3/2 + rodDimensions.height + 14,\r\n        width: 20,\r\n        height: 30\r\n    }), [playerCoordinates])\r\n    const [baitOffset, setBaitOffset] = useState<Coordinates>({ x: 0, y: -20, transition: '.2 all ease' })\r\n    // Line length in px\r\n    const lineLength = useMemo(() => {\r\n        return getVectorLength({ from: {x: 0, y: 0}, to: { x: baitOffset.x, y: baitOffset.y } })\r\n    }, [baitOffset])\r\n    // Display rounded line length in meters\r\n    const baitDistance = useMemo(() => {\r\n        return Math.round(pxToM(lineLength)*10)/10\r\n    }, [lineLength])\r\n\r\n    const baitOffsetLimit = useMemo(():Path => {\r\n        return ({\r\n            from: { // Min offset\r\n                x: -baitCoordinates.x, // Lake left border\r\n                y: 0 // Lake top border\r\n            },\r\n            to: { // Max offset\r\n                x: map.width - baitCoordinates.x - baitCoordinates.width, // Lake right border\r\n                y: map.lakePath.to.y - rodDimensions.height // Lake bottom border\r\n            }\r\n        })\r\n    }, [map, baitCoordinates, playerCoordinates, rodDimensions])\r\n\r\n    // Coordinates of bait relative to lake\r\n    const baitLakeCoords = useMemo(\r\n        (): Coordinates => {\r\n            return ({\r\n                x: baitCoordinates.x + baitOffset.x,\r\n                y: baitCoordinates.y - map.shorePath.to.y + baitOffset.y\r\n            })\r\n        }, [baitOffset, baitCoordinates]\r\n    )\r\n\r\n    const lineOrigin = useMemo((): Coordinates => ({\r\n        x: playerCoordinates.x + playerCoordinates.width/2 + rodOffset.x - (Math.sin(rodAngle*Math.PI/180) * rodDimensions.height / 2),\r\n        y: playerCoordinates.y * 3/2 + rodDimensions.height + rodOffset.y - Math.abs((Math.sin(rodAngle*Math.PI/180/2) * rodDimensions.height / 2)),\r\n    }), [playerCoordinates, rodDimensions, rodOffset, rodAngle])\r\n\r\n    const lineEdge = useMemo((): Coordinates => ({\r\n        x: lineOrigin.x + baitOffset.x - rodOffset.x + (Math.sin(rodAngle*Math.PI/180) * rodDimensions.height / 2),\r\n        y: lineOrigin.y + baitOffset.y - rodOffset.y + (Math.abs(Math.sin(rodAngle*Math.PI/180/2) * rodDimensions.height / 2))\r\n    }), [lineOrigin, baitOffset, rodOffset])\r\n\r\n    const linePath = useMemo((): Path => ({\r\n        from: lineOrigin,\r\n        to: lineEdge\r\n    }), [lineOrigin, lineEdge])\r\n\r\n    const [isBarometerVisible, setIsBarometerVisible] = useState<boolean>(false)\r\n\r\n    // Scroll functions\r\n    const scrollToPlayer = useCallback(\r\n        (behavior: 'smooth' | 'auto' | undefined = 'smooth'): void => {\r\n            if (playerPositionRef.current) {\r\n                playerPositionRef.current.scrollIntoView({\r\n                    behavior,\r\n                    block: 'start',\r\n                    inline: 'center'\r\n                })\r\n            }\r\n        }, []\r\n    )\r\n    const scrollToBait = useCallback(\r\n        (behavior: 'smooth' | 'auto' | undefined = 'auto'): void => {\r\n            if (baitRef.current) {\r\n                baitRef.current.scrollIntoView({\r\n                    behavior,\r\n                    block: 'center',\r\n                    inline: 'center'\r\n                })\r\n            }\r\n        }, []\r\n    )\r\n\r\n    // Disable scroll on mobile devices\r\n    useEffect(() => {\r\n        const doc: any = document // Override type to use eventlistener 'passive' option\r\n        doc.addEventListener('touchstart', e => e.preventDefault())\r\n        doc.addEventListener('touchmove', e => e.preventDefault(), { passive: false })\r\n        doc.addEventListener('touchforcechange', e => e.preventDefault(), { passive: false })\r\n        return () => {\r\n            doc.removeEventListener('touchstart', e => e.preventDefault())\r\n            doc.removeEventListener('touchmove', e => e.preventDefault(), { passive: false })\r\n            doc.removeEventListener('touchforcechange', e => e.preventDefault(), { passive: false })\r\n        }\r\n    }, [])\r\n    // Disable default keyboard behaviour\r\n    useEffect(() => {\r\n        function preventDefault (e: any) {\r\n            switch(e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                case 37: // Left\r\n                case 38: // Top\r\n                case 39: // Right\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n            }\r\n        }\r\n        window.addEventListener('keydown', preventDefault, false)\r\n        return () => window.removeEventListener('keydown', preventDefault, false)\r\n    }, [])\r\n\r\n    // Update global state\r\n    useEffect(() => {\r\n        updateGlobalPositionState({\r\n            baitLakeCoords\r\n        })\r\n    }, [baitLakeCoords])\r\n\r\n    // Allow actions depending on game phase\r\n    const currentProcess = useMemo(() => {\r\n        switch(process) {\r\n            case gameProcesses.INITIAL:\r\n                return <Initial\r\n                    setProcess={setProcess}\r\n                    playerCoordinates={playerCoordinates}\r\n                    setPlayerCoordinates={setPlayerCoordinates}\r\n                    scrollToPlayer={scrollToPlayer}\r\n                    shoreRef={shoreRef}\r\n                    map={map}\r\n                    isBarometerVisible={isBarometerVisible}\r\n                    setIsBarometerVisible={setIsBarometerVisible}\r\n                 />\r\n                break\r\n            case gameProcesses.THROW_LINE:\r\n                return <ThrowLine\r\n                    setProcess={setProcess}\r\n                    scrollToBait={scrollToBait}\r\n                    scrollToPlayer={scrollToPlayer}\r\n                    rodAngle={rodAngle}\r\n                    setRodAngle={setRodAngle}\r\n                    playerCoordinates={playerCoordinates}\r\n                    rodOffset={rodOffset}\r\n                    setRodOffset={setRodOffset}\r\n                    baitOffset={baitOffset}\r\n                    setBaitOffset={setBaitOffset}\r\n                    baitOffsetLimit={baitOffsetLimit}\r\n                    baitLakeCoords={baitLakeCoords}\r\n                    baitDistance={baitDistance}\r\n                    rodLevel={rodLevel}\r\n                    baitRef={baitRef}\r\n                    setBaitType={setBaitType}\r\n                    lakeRef={lakeRef}\r\n                    isBarometerVisible={isBarometerVisible}\r\n                    setIsBarometerVisible={setIsBarometerVisible}\r\n                 />\r\n                break\r\n            case gameProcesses.WAIT_FISH:\r\n                return <WaitFish\r\n                    setProcess={setProcess}\r\n                    scrollToPlayer={scrollToPlayer}\r\n                    scrollToBait={scrollToBait}\r\n                    baitOffset={baitOffset}\r\n                    setBaitOffset={setBaitOffset}\r\n                    baitDistance={baitDistance}\r\n                    lineLength={lineLength}\r\n                    setBaitType={setBaitType}\r\n                    setRodAngle={setRodAngle}\r\n                    baitRef={baitRef}\r\n                    isBarometerVisible={isBarometerVisible}\r\n                    setIsBarometerVisible={setIsBarometerVisible}\r\n                 />\r\n                break\r\n            default: return null\r\n        }\r\n    }, [\r\n        process,\r\n        setProcess,\r\n        playerCoordinates,\r\n        rodAngle,\r\n        rodOffset,\r\n        baitOffset,\r\n        baitLakeCoords,\r\n        baitOffsetLimit,\r\n        baitDistance,\r\n        lineLength,\r\n        rodLevel,\r\n        setIsBarometerVisible,\r\n        map\r\n    ])\r\n    \r\n    const fishAreas = useMemo((): React.ReactNode => <BeginnerArea path={{ from: {x: 1700, y: 200}, to: {x: 2400, y: 400} }} />, [] )\r\n    \r\n    return <div className={styles.game}>\r\n        <div\r\n            className={styles.shore}\r\n            style={{\r\n                width: `${map.width}px`,\r\n                height: `${map.shorePath.to.y}px`\r\n            }}\r\n            ref={shoreRef}\r\n        >\r\n            <div\r\n                className={styles.playerPosition}\r\n                style={{\r\n                    top: 0,\r\n                    bottom: 0,\r\n                    width: playerCoordinates.width,\r\n                    left: playerCoordinates.x,\r\n                }}\r\n                ref={playerPositionRef}\r\n            >\r\n                <div className={styles.player} ref={playerRef}>\r\n\r\n                </div>\r\n                <div\r\n                    className={`${styles.fishingRod} ${rodLevel.className}`}\r\n                    style={{\r\n                        left: `${playerCoordinates.width/2 - 10/2}px`,\r\n                        top: `${playerCoordinates.y *3/2}px`,\r\n                        height: `${rodDimensions.height}px`,\r\n                        width: `${rodDimensions.width}px`,\r\n                        transform: `translate(${rodOffset.x}px, ${rodOffset.y}px) rotate(${rodAngle}deg)`\r\n                    }}\r\n                >\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <svg\r\n            className={styles.line}\r\n            ref={lineRef}\r\n            style={{ width: map.width, height: map.shorePath.to.y + map.lakePath.to.y }}\r\n        >\r\n            <line\r\n                x1={linePath.from.x}\r\n                y1={linePath.from.y}\r\n                x2={linePath.to.x}\r\n                y2={linePath.to.y}\r\n                 />\r\n        </svg>\r\n        <div className={styles.bait}\r\n            ref={baitRef}\r\n            style={{\r\n                left: baitCoordinates.x - baitCoordinates.width / 2,\r\n                top: baitCoordinates.y - baitCoordinates.height / 2,\r\n                width: baitCoordinates.width,\r\n                height: baitCoordinates.height,\r\n                transform: `translate(${baitOffset.x}px, ${baitOffset.y}px)`,\r\n                transition: baitOffset.transition || 'none'\r\n            }}\r\n        >\r\n            <Bait type={baitType} />\r\n        </div>\r\n        <div\r\n            className={styles.lake}\r\n            style={{\r\n                width: `${map.width}px`,\r\n                height: `${map.lakePath.to.y}px`\r\n            }}\r\n            ref={lakeRef}\r\n        >\r\n            {currentProcess}\r\n            {fishAreas}\r\n        </div>\r\n        {isBarometerVisible && <Barometer\r\n            rodLevel={rodLevel}\r\n            baitDistance={baitDistance}\r\n         />}\r\n        {isMainMenuOpen && <MainMenu />}\r\n    </div>\r\n}\r\n\r\ninterface BaitProps {\r\n    type: string\r\n}\r\nexport const Bait: React.FC<BaitProps> = ({ type = 'default' }) => {\r\n    let bait = null\r\n    switch (type) {\r\n        case 'immersed':\r\n            bait = <GiFishingHook className={styles.immersed} />\r\n            break\r\n        case 'default':\r\n        default:\r\n            bait = <GiFishingHook />\r\n    }\r\n    return bait\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    process: processSelector(state),\r\n    rodLevel: rodLevelSelector(state),\r\n    isMainMenuOpen: isMainMenuOpenSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    setProcess: (newProcess: string) => dispatch(setGameProcessAction(newProcess)),\r\n    setRodLevel: (fishrodID: string) => dispatch(setRodLevelAction(fishrodID)),\r\n    updateGlobalPositionState: (positionObject: any) => dispatch(updatePositionAction(positionObject))\r\n})\r\nconst GameConnected = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Game)\r\n\r\nexport default GameConnected","C:\\www\\personal\\fishing-game\\src\\store\\actions\\game.ts",[],"C:\\www\\personal\\fishing-game\\src\\utils\\position.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\position.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\selectors\\game.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\reducers\\index.ts",[],"C:\\www\\personal\\fishing-game\\src\\utils\\math.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\types.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\Barometer\\index.tsx",["199"],"import React, { useMemo } from 'react'\r\nimport { pxToM } from '../../../utils/position'\r\nimport { FishRodLevel } from '../../../interfaces/evolution'\r\nimport styles from './index.module.sass'\r\n\r\ninterface Props {\r\n    rodLevel: FishRodLevel,\r\n    baitDistance: number\r\n}\r\n\r\ninterface StepMatch {\r\n    steps: number[],\r\n    subSteps: number[]\r\n}\r\n\r\nexport const Barometer: React.FC<Props> = ({\r\n    rodLevel,\r\n    baitDistance\r\n}) => {\r\n    const maxLength = useMemo((): number => pxToM(rodLevel.maxLength), [rodLevel])\r\n    const lineStepLength = useMemo((): number => 10, [])\r\n    const lineSteps = useMemo((): number => Math.ceil(maxLength/lineStepLength), [maxLength, lineStepLength])\r\n    const lineStepMatches = useMemo((): StepMatch => {\r\n        let matches = { steps: [], subSteps: [] }\r\n        for(let i = 0; i < (lineSteps+1)*2 - 1; i++) {\r\n            if (i%2 === 0) {\r\n                matches.steps.push(i*lineStepLength/2)\r\n            } else {\r\n                matches.subSteps.push(i*lineStepLength/2)\r\n            }\r\n        }\r\n        return matches\r\n    }, [lineSteps, lineStepLength])\r\n    const nextStep = useMemo((): number => {\r\n        return lineSteps*lineStepLength\r\n    }, [lineSteps, lineStepLength])\r\n    const lineStepsJSX = useMemo(() => {\r\n        let JSX = []\r\n        // How much times step length in maxLength\r\n        for (let i = 0; i <= nextStep; i++) {\r\n            const isReached = baitDistance >= i ? styles.reached : ''\r\n            if (lineStepMatches.steps.includes(i)) {\r\n                // Step\r\n                JSX.push(<div key={i} className={`${styles.step} ${isReached} ${i === 0 ? styles.origin : ''}`}>\r\n                    <span><strong>{i}</strong></span>\r\n                </div>)\r\n            } else if (lineStepMatches.subSteps.includes(i)) {\r\n                // Substep\r\n                JSX.push(<div key={i} className={`${styles.subStep} ${isReached}`}></div>)\r\n            } else continue\r\n        }\r\n        return JSX\r\n    }, [lineSteps, lineStepLength, baitDistance])\r\n    const linePercentage = useMemo((): number => baitDistance/maxLength*100, [baitDistance, maxLength])\r\n\r\n    return <div className={`${styles.barometer} ${rodLevel.className}`}>\r\n        <nav>\r\n            <div className={styles.handle}></div>\r\n            <div className={styles.tip}>\r\n                <div className={styles.lineLengthScale}>\r\n                    <div\r\n                        className={styles.lengthLimit}\r\n                        style={{ width: `${maxLength/nextStep*100}%` }}\r\n                    >\r\n                        <meter\r\n                            className={styles.lineLength}\r\n                            min={0}\r\n                            max={maxLength}\r\n                            value={baitDistance}\r\n                            high={maxLength*3/4}\r\n                            low={maxLength/4}\r\n                            optimum={maxLength}\r\n                        >\r\n                        </meter>\r\n                        <label style={{ width: `${linePercentage}%` }}>\r\n                            <span className={styles.tooltip}>\r\n                                <span><strong>{baitDistance}</strong>m</span>\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n                    {lineStepsJSX}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n}\r\n\r\nexport default Barometer","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\index.tsx",["200","201","202"],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\Initial\\index.tsx",["203","204","205","206","207","208","209","210"],"import React, { Dispatch, SetStateAction, useCallback, useRef, useEffect, useLayoutEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport gameProcesses from '../index.json'\r\nimport { Coordinates, Map } from '../../../../interfaces/position'\r\nimport throttle from '../../../../utils/throttle'\r\nimport { FaFish, IoClose, GiLightBackpack } from 'react-icons/all'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { isMainMenuOpenSelector, isMainMenuClosingSelector } from '../../../../store/selectors/game'\r\nimport { openMainMenuAction, closeMainMenuAction } from '../../../../store/actions/game'\r\n\r\ninterface Props {\r\n    setProcess: Dispatch<SetStateAction<string>>,\r\n    playerCoordinates: Coordinates,\r\n    setPlayerCoordinates: Dispatch<SetStateAction<Coordinates>>,\r\n    scrollToPlayer: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    shoreRef: any,\r\n    map: Map,\r\n    setIsBarometerVisible: Dispatch<SetStateAction<boolean>>,\r\n    isBarometerVisible: boolean\r\n}\r\n\r\nenum Direction {\r\n    LEFT = 'LEFT',\r\n    RIGHT = \"RIGHT\"\r\n}\r\n\r\nexport default (({ setProcess, playerCoordinates, setPlayerCoordinates, scrollToPlayer, shoreRef, map, isBarometerVisible, setIsBarometerVisible }) => {\r\n    // REDUX\r\n    const dispatch = useDispatch()\r\n    const openMainMenu = useCallback(\r\n        (): void => dispatch(openMainMenuAction()), []\r\n    )\r\n    const closeMainMenu = useCallback(\r\n        (): void => dispatch(closeMainMenuAction()), []\r\n    )\r\n    const isMainMenuOpen = useSelector(isMainMenuOpenSelector)\r\n    const isMainMenuClosing = useSelector(isMainMenuClosingSelector)\r\n\r\n    // STATE\r\n    const [isPlayerMoving, setIsPlayerMoving] = useState<boolean>(false)\r\n    const lastTouchX = useRef<number>(null)\r\n\r\n    const movePlayer = useCallback(\r\n        (direction: Direction, value: number): void => {\r\n            // Set isPlayerMoving if it's not already\r\n            if (!isPlayerMoving)setIsPlayerMoving(true)\r\n\r\n            if (direction === Direction.LEFT) {\r\n                // Prevent player from leaving map, left side\r\n                if (playerCoordinates.x - value < 0) {\r\n                    return setPlayerCoordinates({ ...playerCoordinates, x: 0 })\r\n                }\r\n                setPlayerCoordinates({ ...playerCoordinates, x: playerCoordinates.x - value })\r\n            } else if (direction === Direction.RIGHT) {\r\n                // Prevent player from leaving map, right side\r\n                if (map.width - playerCoordinates.x < value + playerCoordinates.width) {\r\n                    return setPlayerCoordinates({ ...playerCoordinates, x: map.width - playerCoordinates.width })\r\n                }\r\n                setPlayerCoordinates({ ...playerCoordinates, x: playerCoordinates.x + value })\r\n            }\r\n            scrollToPlayer('auto')\r\n        }, [playerCoordinates]\r\n    )\r\n\r\n    // Initialize scroll position at player's position\r\n    useLayoutEffect(() => {\r\n        scrollToPlayer('auto')\r\n    }, [])\r\n\r\n    // Hide barometer\r\n        useEffect(() => {\r\n        if (isBarometerVisible) {\r\n            setIsBarometerVisible(false)\r\n        }\r\n    }, [])\r\n\r\n    const throwLine = useCallback(\r\n        (): void => {\r\n            if (!isPlayerMoving && !isMainMenuOpen) {\r\n                setProcess(gameProcesses.THROW_LINE)\r\n            }\r\n        }, [isPlayerMoving, isMainMenuOpen]\r\n    )\r\n\r\n    // Attach event listeners\r\n    useEffect(() => {\r\n        function handleKeyDown (e: KeyboardEvent): void {\r\n            const { keyCode } = e\r\n            switch (keyCode) {\r\n                case 37: // Left\r\n                    e.preventDefault()\r\n                    movePlayer(Direction.LEFT, 40)\r\n                    break\r\n                case 38: // Top\r\n                    e.preventDefault()\r\n                    break\r\n                case 39: // Right\r\n                    e.preventDefault()\r\n                    movePlayer(Direction.RIGHT, 40)\r\n                    break\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    e.preventDefault()\r\n                    throwLine()\r\n                    break\r\n            }\r\n        }\r\n        const handleKeyDownThrottle = throttle(handleKeyDown, 100)\r\n        function preventVerticalScroll (e: KeyboardEvent): void {\r\n            const { keyCode } = e\r\n            switch (keyCode) {\r\n                case 38: // Top\r\n                    e.preventDefault()\r\n                    break\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n            }\r\n        }\r\n        function handleKeyUp (e: KeyboardEvent): void {\r\n            setIsPlayerMoving(false)\r\n        }\r\n        function handleClick (e: any): void {\r\n            const { layerX } = e\r\n            const difference = layerX - playerCoordinates.x\r\n            movePlayer(difference >= 0 ? Direction.RIGHT : Direction.LEFT, Math.abs(difference))\r\n            setIsPlayerMoving(false)\r\n        }\r\n        function handleTouchMove (e: TouchEvent) {\r\n            const currentTouchX = e.touches[0].clientX\r\n            if (lastTouchX.current !== null) {\r\n                if (currentTouchX < lastTouchX.current) {\r\n                    // Swipe left\r\n                    movePlayer(Direction.RIGHT, 20)\r\n                } else if (currentTouchX > lastTouchX.current) {\r\n                    // Swipe right\r\n                    movePlayer(Direction.LEFT, 20)\r\n                }\r\n            }\r\n            lastTouchX.current = currentTouchX\r\n        }\r\n        const handleTouchMoveThrottle = throttle(handleTouchMove, 100)\r\n        function handleTouchEnd (e: TouchEvent) {\r\n            setIsPlayerMoving(false)\r\n        }\r\n\r\n        if (!isMainMenuOpen) {\r\n            document.addEventListener('keydown', handleKeyDownThrottle, false)\r\n            document.addEventListener('keydown', preventVerticalScroll, true)\r\n            document.addEventListener('keyup', handleKeyUp, false)\r\n            if (shoreRef && shoreRef.current) {\r\n                shoreRef.current.addEventListener('click', handleClick, false)\r\n            }\r\n            document.addEventListener('touchmove', handleTouchMoveThrottle, false)\r\n            document.addEventListener('touchend', handleTouchEnd, false)\r\n        }\r\n\r\n        return (): void => {\r\n            document.removeEventListener('keydown', handleKeyDownThrottle, false)\r\n            document.removeEventListener('keydown', preventVerticalScroll, true)\r\n            document.removeEventListener('keyup', handleKeyUp, false)\r\n            if (shoreRef && shoreRef.current) {\r\n                shoreRef.current.removeEventListener('click', handleClick, false)\r\n            }\r\n            document.removeEventListener('touchmove', handleTouchMoveThrottle, false)\r\n            document.removeEventListener('touchend', handleTouchEnd, false)\r\n        }\r\n    }, [playerCoordinates, isMainMenuOpen])\r\n\r\n    if (!isPlayerMoving) {\r\n        return <nav className={`menu ${styles.navigation} ${isMainMenuOpen && !isMainMenuClosing ? styles.open : ''}`}>\r\n            <button\r\n                className={`btn ${styles.openMainMenuBTN}`}\r\n                onClick={isMainMenuOpen ? closeMainMenu : openMainMenu}\r\n            >\r\n                {isMainMenuOpen ? <IoClose /> : <GiLightBackpack />}\r\n            </button>\r\n            <button \r\n                className={`btn btn-primary ${styles.fishBTN}`}\r\n                onClick={throwLine}\r\n            >\r\n                Fish here ? <FaFish />\r\n            </button>\r\n        </nav>\r\n    }\r\n\r\n    return null\r\n}) as React.FC<Props>","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\ThrowLine\\index.tsx",["211","212","213","214","215","216","217","218","219","220"],"import React, { Dispatch, SetStateAction, ReactNode, useCallback, useRef, useEffect, useState, useMemo } from 'react'\r\nimport gameProcesses from '../index.json'\r\nimport ProgressCircle from '../../../ProgressCircle'\r\nimport { Coordinates, Path } from '../../../../interfaces/position'\r\nimport { FishRodLevel } from '../../../../interfaces/evolution'\r\nimport { getVectorLength, getNextCoordinatesOfPath } from '../../../../utils/position'\r\nimport throttle from '../../../../utils/throttle'\r\nimport { splashAnim } from '../../animations'\r\nimport styles from './index.module.sass'\r\n\r\ninterface Props {\r\n    setProcess: Dispatch<SetStateAction<string>>,\r\n    scrollToBait: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    scrollToPlayer: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    rodAngle: number,\r\n    setRodAngle: Dispatch<SetStateAction<number>>,\r\n    rodOffset: Coordinates,\r\n    setRodOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitOffset: Coordinates,\r\n    setBaitOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitDistance: number,\r\n    baitOffsetLimit: Path,\r\n    baitLakeCoords: Coordinates,\r\n    lakeRef: any,\r\n    baitRef: any,\r\n    setBaitType: Dispatch<SetStateAction<string>>,\r\n    playerCoordinates: Coordinates,\r\n    rodLevel: FishRodLevel,\r\n    setIsBarometerVisible: Dispatch<SetStateAction<boolean>>,\r\n    isBarometerVisible: boolean\r\n}\r\n\r\nconst maxAngle: number = 70\r\nconst minAngle: number = -70\r\n\r\nexport default (({\r\n    setProcess,\r\n    scrollToBait,\r\n    scrollToPlayer,\r\n    rodAngle,\r\n    setRodAngle,\r\n    rodOffset,\r\n    setRodOffset,\r\n    baitOffset,\r\n    setBaitOffset,\r\n    baitDistance,\r\n    baitOffsetLimit,\r\n    baitRef,\r\n    baitLakeCoords,\r\n    lakeRef,\r\n    setBaitType,\r\n    playerCoordinates,\r\n    rodLevel,\r\n    isBarometerVisible,\r\n    setIsBarometerVisible\r\n }) => {\r\n     // Audio\r\n    const baitDropSE = useMemo(() => require('../../../../assets/audio/se/bait-drop.mp3').default, [])\r\n    const badassSE = useMemo(() => require('../../../../assets/audio/se/badass.mp3').default, [])\r\n\r\n    // State\r\n    const [gaugeValue, setGaugeValue] = useState<number>(0)\r\n    const [spaceFired, setSpaceFired] = useState<boolean>(false)\r\n    const [isPushing, setIsPushing] = useState<boolean>(false)\r\n    const [isPreparingThrow, setIsPreparingThrow] = useState<boolean>(false)\r\n    const [isThrowing, setIsThrowing] = useState<boolean>(false)\r\n    const [hasThrown, setHasThrown] = useState<boolean>(false)\r\n\r\n    // Refs\r\n    const lastTouchX = useRef<number>(null)\r\n    const gaugeRef = useRef<any>(null)\r\n    const gaugeValueRef = useRef<number>(0)\r\n    const requestRef = useRef<any>(null)\r\n    const directionRef = useRef<number>(rodAngle)\r\n    const stepRef = useRef<number>(0)\r\n    const remainingDistanceRef = useRef<number>(0)\r\n    const baitDropSERef = useRef<HTMLAudioElement>(new Audio())\r\n    baitDropSERef.current.src = baitDropSE\r\n    const badassSERef = useRef<HTMLAudioElement>(new Audio())\r\n    badassSERef.current.src = badassSE\r\n\r\n    // Go back to initial process\r\n    const goBack = useCallback(\r\n        (): void => {\r\n            // Set fishing rod to initial position before\r\n            setRodAngle(0)\r\n            setRodOffset({ x: 0, y: -20 })\r\n            setBaitOffset({ x: 0, y: -20, transition: '.2s ease all' })\r\n            setBaitType('default')\r\n            setProcess(gameProcesses.INITIAL)\r\n        }, []\r\n    )\r\n\r\n    // Move fishing rod forward on process start\r\n    useEffect(() => {\r\n        setRodOffset({ x: 0, y: 0 })\r\n        setBaitOffset({ x: 0, y: 0 })\r\n        scrollToPlayer()\r\n    }, [])\r\n\r\n    // Hide barometer\r\n    useEffect(() => isBarometerVisible && setIsBarometerVisible(false), [])\r\n\r\n    // Move fishing rod direction\r\n    const changeRodDirection = useCallback(\r\n        (angle: number) => {\r\n            if (!isThrowing) {\r\n                setRodAngle(angle)\r\n                setRodOffset({ x: -angle/4, y: -Math.abs(angle)/2 })\r\n                setBaitOffset({x: -angle, y: -Math.abs(angle)/2 })\r\n            }\r\n        }, [isThrowing]\r\n    )\r\n\r\n    // Throw bait at the right distance and direction\r\n    useEffect(() => {\r\n        if (isThrowing) {\r\n            // Display barometer\r\n            setIsBarometerVisible(true)\r\n            // Initial throw speed\r\n            stepRef.current = remainingDistanceRef.current / 15 // stepRef.current is the distance travelled in px / frame\r\n\r\n            const move = (): void => {\r\n                if (remainingDistanceRef.current > 0) {\r\n                    // Bait is still moving\r\n                    // Get next coordinates\r\n                    let nextCoords: Coordinates = getNextCoordinatesOfPath(directionRef.current, stepRef.current)\r\n                    let nextOffset: Coordinates = { x: baitOffset.x - nextCoords.x, y: baitOffset.y + nextCoords.y }\r\n                    remainingDistanceRef.current = Math.floor(remainingDistanceRef.current - stepRef.current)\r\n                    /*\r\n                        Detect collision against lake borders before it happens\r\n                        and change direction in that case\r\n                    */\r\n                    if (nextOffset.x > baitOffsetLimit.to.x) {\r\n                        // Handle right limit collision\r\n                        // Deviate\r\n                        directionRef.current *= -1\r\n                        // Kinetic energy loss\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    } else if (nextOffset.y > baitOffsetLimit.to.y) {\r\n                        // Handle bottom limit collision\r\n                        directionRef.current = directionRef.current - 270\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    } else if (nextOffset.x < baitOffsetLimit.from.x) {\r\n                        // Handle left limit collision\r\n                        directionRef.current *= -1\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    /*} else if (nextOffset.y < baitOffsetLimit.from.y) {\r\n                        // Handle top limit collision\r\n                        directionRef.current = directionRef.current - 270\r\n                        remainingDistanceRef.current = remainingDistanceRef.current - stepRef.current\r\n                    */\r\n                    }\r\n\r\n                    // Apply translation and scroll\r\n                    setBaitOffset(nextOffset)\r\n                    scrollToBait()\r\n\r\n                    // Ease-out\r\n                    stepRef.current *= .999 // Deceleration coeff\r\n                    throttle(move, 100)\r\n                } else {\r\n                    // Bait has reached the correct distance\r\n                    setIsThrowing(false)\r\n                    setBaitType('immersed')\r\n                    // Play bait drop sound effect\r\n                    const baitDropSEPromise = baitDropSERef.current.play()\r\n                    if (typeof baitDropSEPromise !== 'undefined') {\r\n                        baitDropSEPromise\r\n                        .then(() => null)\r\n                        .catch(err => console.log(err))\r\n                    }\r\n                    // Play \"badass\"\" sound effect if throw was particularly high\r\n                    if (gaugeValueRef.current >= 90) {\r\n                        window.setTimeout(() => {\r\n                            const badassSEPromise = badassSERef.current.play()\r\n                            if (typeof badassSEPromise !== 'undefined') {\r\n                                badassSEPromise\r\n                                .then(() => null)\r\n                                .catch(() => console.log('Failed to play \"badass\" sound effect'))\r\n                            }\r\n                        }, 1000)\r\n                    }\r\n                    // Play splash animation on bait\r\n                    baitRef.current && splashAnim(baitLakeCoords, lakeRef.current)\r\n                    // Wait for fish\r\n                    gaugeValueRef.current = 0\r\n                    setProcess(gameProcesses.WAIT_FISH)\r\n                    return\r\n                }\r\n            }\r\n            throttle(move, 100)()\r\n        }\r\n    }, [isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords])\r\n\r\n    const confirmThrow = useCallback(\r\n        (): void => {\r\n            if (gaugeValueRef.current >= 5) {\r\n                const reach = Math.round(gaugeValueRef.current)/100 * rodLevel.maxLength\r\n                remainingDistanceRef.current = reach\r\n                setIsThrowing(true)\r\n                setBaitOffset({ x: 0, y: 0 })\r\n                // Initial direction\r\n                directionRef.current = rodAngle\r\n            }\r\n            setIsPreparingThrow(false)\r\n            setGaugeValue(0)\r\n        }, [rodLevel, rodAngle]\r\n    )\r\n\r\n    // Attach event listeners\r\n    useEffect(() => {\r\n        function handleKeyDown (e: KeyboardEvent): void {\r\n            const { keyCode } = e\r\n            switch (keyCode) {\r\n                case 8: // Backspace\r\n                case 46: // Delete\r\n                case 48: // 0\r\n                    e.preventDefault()\r\n                    if (!isThrowing) {\r\n                        goBack()\r\n                    }\r\n                    break\r\n                case 37: // Left\r\n                    e.preventDefault()\r\n                    if (!isThrowing) {\r\n                        // Increase fishrod angle\r\n                        const addOffset = 4\r\n                        if (rodAngle < maxAngle) {\r\n                            let newAngle = 0\r\n                            if (rodAngle + addOffset >= maxAngle) newAngle = maxAngle\r\n                            else newAngle = rodAngle + addOffset\r\n                            changeRodDirection(newAngle)\r\n                        }\r\n                    }\r\n                    break\r\n                case 38: // Top\r\n                    e.preventDefault()\r\n                    break\r\n                case 39: // Right\r\n                    e.preventDefault()\r\n                    if (!isThrowing) {\r\n                        // Decrease fishrod angle\r\n                        const subOffset = 4\r\n                        if (rodAngle > minAngle) {\r\n                            let newAngle = 0\r\n                            if (rodAngle - subOffset <= minAngle) newAngle = minAngle\r\n                            else newAngle = rodAngle - subOffset\r\n                            changeRodDirection(newAngle)\r\n                        }\r\n                    }\r\n                    break\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    e.preventDefault()\r\n                    if (!isThrowing) {\r\n                        if (!spaceFired) { // Prevent mousedown event from firing multiple times\r\n                            setSpaceFired(true)\r\n                            if(!isPreparingThrow) {\r\n                                setIsPreparingThrow(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    break\r\n            }\r\n        }\r\n        function handleKeyUp (e: KeyboardEvent): void {\r\n            if (!isThrowing) {\r\n                const { keyCode } = e\r\n                switch (keyCode) {\r\n                    case 32:\r\n                        setSpaceFired(false)\r\n                        if (isPreparingThrow) {\r\n                            confirmThrow()\r\n                        }\r\n                        break\r\n                }\r\n            }\r\n        }\r\n        function handleMouseDown (e: Event): void {\r\n            if (!isThrowing) {\r\n                setSpaceFired(true)\r\n                if(!isPreparingThrow) {\r\n                    setIsPreparingThrow(true)\r\n\r\n                }\r\n            }\r\n        }\r\n        function handleMouseUp (e: Event): void {\r\n            setSpaceFired(false)\r\n            if (isPreparingThrow) {\r\n                confirmThrow()\r\n            }\r\n        }\r\n        function handleTouchMove (e: TouchEvent) {\r\n            const currentTouchX = e.touches[0].clientX\r\n            if (lastTouchX.current !== null && !isThrowing) {\r\n                e.stopPropagation()\r\n                if (currentTouchX > lastTouchX.current) {\r\n                    // Swap right\r\n                    // Decrease fishrod angle\r\n                    const subOffset: number = 8\r\n                    if (rodAngle > minAngle) {\r\n                        let newAngle: number = 0\r\n                        if (rodAngle - subOffset <= minAngle) newAngle = minAngle\r\n                        else newAngle = rodAngle - subOffset\r\n                        changeRodDirection(newAngle)\r\n                    }\r\n                } else if (currentTouchX < lastTouchX.current) {\r\n                    // Swap left\r\n                    // Increase fishrod angle\r\n                    const addOffset: number = 6\r\n                    if (rodAngle < maxAngle) {\r\n                        let newAngle: number = 0\r\n                        if (rodAngle + addOffset >= maxAngle) newAngle = maxAngle\r\n                        else newAngle = rodAngle + addOffset\r\n                        changeRodDirection(newAngle)\r\n                    }\r\n                }\r\n            }\r\n            lastTouchX.current = currentTouchX\r\n        }\r\n        const handleTouchMoveThrottle = throttle(handleTouchMove, 50)\r\n    \r\n        document.addEventListener('keydown', handleKeyDown, false)\r\n        document.addEventListener('keyup', handleKeyUp, false)\r\n        document.addEventListener('mousedown', handleMouseDown, false)\r\n        document.addEventListener('mouseup', handleMouseUp, false)\r\n        // Touch events\r\n        document.addEventListener('touchmove', handleTouchMoveThrottle, false)\r\n        if (gaugeRef.current) {\r\n            gaugeRef.current.addEventListener('touchstart', (e: TouchEvent) => {setIsPushing(true); handleMouseDown(e)}, false)\r\n            gaugeRef.current.addEventListener('touchmove', (e: TouchEvent) => {e.stopPropagation(); e.preventDefault()}, false)\r\n            gaugeRef.current.addEventListener('touchend', (e: TouchEvent) => {setIsPushing(false); handleMouseUp(e)}, false)\r\n        }\r\n\r\n        return (): void => {\r\n            document.removeEventListener('keydown', handleKeyDown, false)\r\n            document.removeEventListener('keyup', handleKeyUp, false)\r\n            document.removeEventListener('mousedown', handleMouseDown, false)\r\n            document.removeEventListener('mouseup', handleMouseUp, false)\r\n            document.removeEventListener('touchmove', handleTouchMoveThrottle, false)\r\n            if (gaugeRef.current) {\r\n                gaugeRef.current.removeEventListener('touchstart', (e: TouchEvent) => {setIsPushing(true); handleMouseDown(e)}, false)\r\n                gaugeRef.current.removeEventListener('touchmove', (e: TouchEvent) => {e.stopPropagation(); e.preventDefault()}, false)\r\n                gaugeRef.current.removeEventListener('touchend', (e: TouchEvent) => {setIsPushing(false); handleMouseUp(e)}, false)\r\n            }\r\n        }\r\n    }, [\r\n        isPreparingThrow,\r\n        spaceFired,\r\n        rodAngle,\r\n        rodOffset,\r\n        confirmThrow,\r\n        isThrowing\r\n    ])\r\n\r\n    // Add mousemove event\r\n    useEffect(() => {\r\n        function handleMouseMove (e: MouseEvent): void {\r\n            // Follow mouse\r\n            const { offsetX, pageY } = e\r\n            const centerX: number = playerCoordinates.x + playerCoordinates.width/2\r\n            const centerY: number = playerCoordinates.y * 3/2\r\n            const adjacent: number = getVectorLength({ from: { x: centerX, y: centerY }, to: { x: centerX, y: pageY } })\r\n            const opposite: number = offsetX - centerX\r\n            // tan(rodAngle) = opposite/adjacent\r\n            const angleRadians: number = Math.atan(opposite/adjacent)\r\n            const angleDegrees: number = angleRadians*180/Math.PI\r\n            if (!Number.isNaN(angleDegrees) && angleDegrees >= minAngle && angleDegrees <= maxAngle) {\r\n                // Move rod as angle changes\r\n                changeRodDirection(-angleDegrees)\r\n            }\r\n        }\r\n        const handleMouseMoveThrottle = throttle(handleMouseMove, 50)\r\n\r\n        // Disable mousemove event once bait has been thrown\r\n        if (isThrowing) {\r\n            window.removeEventListener('mousemove', handleMouseMoveThrottle, false)\r\n        } else {\r\n            window.addEventListener('mousemove', handleMouseMoveThrottle, false)\r\n        }\r\n        \r\n        return () => window.removeEventListener('mousemove', handleMouseMoveThrottle, false)\r\n    }, [playerCoordinates, changeRodDirection, isThrowing])\r\n\r\n    // Prepare throw\r\n    useEffect(() => {\r\n        function prepare (timestamp: number): void {\r\n            if (isPreparingThrow) {\r\n                if (gaugeValueRef.current < 100) {\r\n                    let nextValue = gaugeValueRef.current + gaugeValueRef.current/20 + .5\r\n                    if (nextValue > 100) nextValue = 100\r\n                    gaugeValueRef.current = nextValue //= Math.min(timestamp, gaugeValueRef.current + 1)\r\n                    setGaugeValue(gaugeValueRef.current)\r\n                    requestRef.current = requestAnimationFrame(prepare)\r\n                } else {\r\n                    // Value has reached max: set down to zero and cancel throw\r\n                    gaugeValueRef.current = 0\r\n                    setGaugeValue(0)  \r\n                    setIsPreparingThrow(false)\r\n                }\r\n            }\r\n        }\r\n        if (isPreparingThrow) {\r\n            // Prepare throw\r\n            requestRef.current = requestAnimationFrame(prepare)\r\n        } else {\r\n            if (requestRef.current) {\r\n                cancelAnimationFrame(requestRef.current)\r\n                requestRef.current = null\r\n            }\r\n        }\r\n\r\n        return () => cancelAnimationFrame(requestRef.current)\r\n    }, [isPreparingThrow, confirmThrow])\r\n\r\n    const gaugeMessage = useMemo((): ReactNode => {\r\n        if (!gaugeValueRef) return null\r\n        if (gaugeValueRef.current === null || gaugeValueRef.current < 5) return <span className={`${styles.gaugeMSG} ${styles.pushHere}`}>Push</span>\r\n        if (gaugeValueRef.current >= 5 && gaugeValueRef.current < 50) return <span className={styles.gaugeMSG}>Hold</span>\r\n        if (gaugeValueRef.current >= 50 && gaugeValueRef.current < 80) return <span className={`${styles.gaugeMSG} ${styles.high}`}>Release</span>\r\n        if (gaugeValueRef.current >= 80) return <span className={`${styles.gaugeMSG} ${styles.optimal}`}>Now</span>\r\n    }, [gaugeValueRef.current])\r\n\r\n    // Hide menu when player is throwing fishing line\r\n    if (isThrowing) return null\r\n\r\n    return <nav className={`${styles.navigation} menu`}>\r\n        <button\r\n            className={`btn btn-cancel ${styles.cancelBTN}`}\r\n            onClick={goBack}\r\n        >\r\n            Cancel\r\n        </button>\r\n        <div className={`${styles.gauge} ${isPushing && isPreparingThrow ? styles.userPush : ''}`} ref={gaugeRef}>\r\n            <ProgressCircle\r\n                value={gaugeValue}\r\n                trackClass={styles.track}\r\n                centerClass={styles.center}\r\n            >\r\n                {gaugeMessage}\r\n            </ProgressCircle>\r\n        </div>\r\n    </nav>\r\n}) as React.FC<Props>","C:\\www\\personal\\fishing-game\\src\\components\\Game\\processes\\WaitFish\\index.tsx",["221","222","223"],"import React, { FC, useState, useEffect, useMemo, useCallback, Dispatch, SetStateAction } from 'react'\r\nimport gameProcesses from '../index.json'\r\nimport { Coordinates } from '../../../../interfaces/position'\r\nimport throttle from '../../../../utils/throttle'\r\nimport { BsArrowRepeat } from 'react-icons/bs'\r\nimport styles from './index.module.sass'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { makeBaitAvailableAction } from '../../../../store/actions/fishing'\r\n\r\ninterface Props {\r\n    baitOffset: Coordinates,\r\n    setBaitOffset: Dispatch<SetStateAction<Coordinates>>,\r\n    baitDistance: number,\r\n    lineLength: number,\r\n    setBaitType: Dispatch<SetStateAction<string>>,\r\n    setProcess: Dispatch<SetStateAction<string>>,\r\n    setRodAngle: Dispatch<SetStateAction<number>>,\r\n    baitRef: any,\r\n    scrollToPlayer: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    scrollToBait: (behavior?: 'smooth' | 'auto' | undefined) => void,\r\n    setIsBarometerVisible: Dispatch<SetStateAction<boolean>>,\r\n    isBarometerVisible: boolean\r\n}\r\n\r\nconst WaitFish: FC<Props> = ({\r\n    baitOffset,\r\n    setBaitOffset,\r\n    baitDistance,\r\n    lineLength,\r\n    setBaitType,\r\n    baitRef,\r\n    setProcess,\r\n    setRodAngle,\r\n    scrollToPlayer,\r\n    scrollToBait,\r\n    isBarometerVisible,\r\n    setIsBarometerVisible\r\n}) => {\r\n    // Audio\r\n    const reelingSE = useMemo((): HTMLAudioElement => {\r\n        const se = new Audio(require('../../../../assets/audio/se/reeling.mp3').default)\r\n        se.loop = true\r\n        return se\r\n    }, [])\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const makeBaitAvailable = useCallback(\r\n        (bool: boolean) => dispatch(makeBaitAvailableAction(bool)), [dispatch]\r\n    )\r\n    // Fishes can only detect/interact with the bait during this process\r\n    useEffect(() => {\r\n        makeBaitAvailable(true)\r\n        return () => makeBaitAvailable(false)\r\n    })\r\n\r\n    // State\r\n    const [isReeling, setIsReeling] = useState<boolean>(false)\r\n    const [isMouseDown, setIsMouseDown] = useState<boolean | null>(null)\r\n\r\n    // Go back to previous process (retry throwing line)\r\n    const goBack = useCallback(\r\n        (): void => {\r\n            setBaitType('default')\r\n            scrollToPlayer('smooth')\r\n            setProcess(gameProcesses.THROW_LINE)\r\n        }, [scrollToPlayer, setProcess, setBaitType]\r\n    )\r\n\r\n    const reelIn = useCallback(\r\n        ():void => {\r\n            if (baitDistance > 0) {\r\n                // REEL IN\r\n                !isReeling && setIsReeling(true)\r\n                // Line length that we need to reel in during this execution\r\n                const step: number = 4\r\n                // Find out angle\r\n                const angleRadians: number = Math.atan(baitOffset.x/baitOffset.y)\r\n                const angleDegrees: number = angleRadians*180/Math.PI\r\n                // Find out next offset coords from angle and hypotenuse\r\n                const hypotenuse: number = lineLength - step\r\n                const opposite: number = Math.sin(angleRadians) * hypotenuse\r\n                const adjacent: number = Math.cos(angleRadians) * hypotenuse\r\n                // Apply translation and lean fishrod towards target\r\n                setBaitOffset({ x: opposite, y: adjacent })\r\n                setRodAngle(-angleDegrees)\r\n                // Scroll to new position\r\n                scrollToBait()\r\n            } else {\r\n                // PLAYER HAS REELED ALL THE LINE IN\r\n                setIsReeling(false)\r\n                goBack()\r\n            }\r\n        }, [lineLength, isReeling, baitDistance, goBack]\r\n    )\r\n\r\n    // Show barometer if it's not visible\r\n    useEffect(() => {\r\n        if (!isBarometerVisible) {\r\n            setIsBarometerVisible(true)\r\n        }\r\n    }, [])\r\n\r\n    // Reeling effects\r\n    useEffect(() => {\r\n        if (isReeling) {\r\n            // Play sound effect\r\n            const reelingSEPromise = reelingSE.play()\r\n            if (typeof reelingSEPromise !== 'undefined') {\r\n                reelingSEPromise\r\n                .then(() => null)\r\n                .catch(() => console.log('Failed to play reeling SE'))\r\n            }\r\n        } else {\r\n            // Stop sound effect if it's playing\r\n            if (!reelingSE.paused) {\r\n                reelingSE.pause()\r\n                reelingSE.currentTime = 0\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if (!reelingSE.paused) reelingSE.pause()\r\n        }\r\n    }, [isReeling])\r\n\r\n    // Attach event listeners\r\n    // Cancel event\r\n    useEffect(() => {\r\n        function handleBackSpace (e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 8: // Backspace\r\n                case 46: // Delete\r\n                case 48: // 0\r\n                    e.preventDefault()\r\n                    goBack()\r\n                    break\r\n            }\r\n        }\r\n        document.addEventListener('keydown', handleBackSpace, true)\r\n        return () => document.removeEventListener('keydown', handleBackSpace, true)\r\n    }, [goBack])\r\n    // Space/Enter keys\r\n    useEffect(() => {\r\n        function handleSpace (e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    e.preventDefault()\r\n                    reelIn()\r\n                    break\r\n            }\r\n        }\r\n        const handleSpaceThrottle = throttle(handleSpace, 1000)\r\n        function handleSpaceUp (e: KeyboardEvent): void {\r\n            switch (e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    // Stop reeling\r\n                    setIsReeling(false)\r\n                    break\r\n            }\r\n        } \r\n        \r\n        document.addEventListener('keydown', handleSpaceThrottle, true)\r\n        document.addEventListener('keyup', handleSpaceUp, false)\r\n        return () => {\r\n            document.removeEventListener('keydown', handleSpaceThrottle, true)\r\n            document.removeEventListener('keyup', handleSpaceUp, false)\r\n        }\r\n    }, [reelIn])\r\n    // Mousedown/up\r\n    useEffect(() => {\r\n        function handleMouseDown (e: MouseEvent): void {\r\n            setIsMouseDown(true)\r\n        }\r\n        function handleMouseUp (e: MouseEvent) : void {\r\n            setIsMouseDown(false)\r\n        }\r\n        document.body.addEventListener('mousedown', handleMouseDown, false)\r\n        document.body.addEventListener('mouseup', handleMouseUp, false)\r\n        document.body.addEventListener('touchstart', handleMouseDown, false)\r\n        document.body.addEventListener('touchend', handleMouseUp, false)\r\n\r\n        return () => {\r\n            document.body.removeEventListener('mousedown', handleMouseDown, false)\r\n            document.body.removeEventListener('mouseup', handleMouseUp, false)\r\n            document.body.removeEventListener('touchstart', handleMouseDown, false)\r\n            document.body.removeEventListener('touchend', handleMouseUp, false)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        if (isMouseDown) {\r\n            // Mouse down\r\n            throttle(reelIn, 1000)()\r\n        } else if (isMouseDown === false) {\r\n            // Mouse up\r\n            setIsReeling(false)\r\n            // Reinitialize isMouseDown state\r\n            setIsMouseDown(null)\r\n        }\r\n    }, [isMouseDown, reelIn])\r\n\r\n    // Disable other keys\r\n    useEffect(() => {\r\n        function disableKeys (e: KeyboardEvent): void {\r\n            switch(e.keyCode) {\r\n                case 37: // Left\r\n                case 38: // Top\r\n                case 39: // Right\r\n                case 40: // Bottom\r\n                    e.preventDefault()\r\n                    break\r\n            }\r\n        }\r\n        document.addEventListener('keydown', disableKeys, false)\r\n        return () => document.removeEventListener('keydown', disableKeys, false)\r\n    }, [])\r\n\r\n    return <nav className={styles.navigation}>\r\n        <button\r\n            className={`btn btn-cancel ${styles.repeatBTN}`}\r\n            onClick={goBack}\r\n        >\r\n            <BsArrowRepeat />\r\n        </button>\r\n    </nav>\r\n}\r\n\r\nexport default WaitFish","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\Beginner\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\store\\reducers\\game.ts",["224","225","226","227","228","229"],"C:\\www\\personal\\fishing-game\\src\\store\\reducers\\inventory.ts",["230","231","232","233","234"],"import {\r\n    ADD_INVENTORY_ENTRY,\r\n    REMOVE_INVENTORY_ENTRY\r\n} from '../actions/types'\r\nimport { Item, InventoryEntry } from '../../interfaces/items'\r\nimport allItems from '../../components/items/items.json'\r\n\r\ninterface State {\r\n    entries: InventoryEntry[],\r\n    maxEntries: number\r\n}\r\n\r\nconst initialEntries: InventoryEntry[] = [\r\n    {\r\n        item: allItems['Mushroom'],\r\n        amount: 3\r\n    },\r\n    {\r\n        item: allItems['Fly'],\r\n        amount: 1\r\n    },\r\n    {\r\n        item: allItems['Angelfish'],\r\n        amount: 1\r\n    }\r\n]\r\n\r\nconst initialState = localStorage['inventory'] ?\r\n    JSON.parse(localStorage['inventory']) \r\n    : ({\r\n        entries: initialEntries,\r\n        maxEntries: 20\r\n    })\r\n\r\nexport default function (state: State = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_INVENTORY_ENTRY: {\r\n            let newState = state\r\n            // Check if item is already in inventory\r\n            const itemInInventory = state.entries.find(entry => entry.item._id === action.payload.itemID)\r\n\r\n            if (itemInInventory) {\r\n                // Add amount only\r\n                let newAmount = itemInInventory.amount + action.payload.amount\r\n                if (newAmount > 99) newAmount = 99 // Limit max amount to 99\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.map(entry => {\r\n                        if (entry.item._id === action.payload.itemID) {\r\n                            return { ... entry, amount: newAmount }\r\n                        }\r\n                        return entry\r\n                    })\r\n                }\r\n            } else {\r\n                // Add new entry to inventory\r\n                if (state.entries.length < state.maxEntries) {\r\n                    // Find item data\r\n                    const item = allItems[action.payload.itemID]\r\n                    if (!item) {\r\n                        // This item does not exist !\r\n                        return state\r\n                    } else {\r\n                        newState = {\r\n                            ...state,\r\n                            entries: [...state.entries, { item, amount: action.payload.amount }]\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Error: your inventory is full\r\n                    return state\r\n                }\r\n            }\r\n\r\n            localStorage['inventory'] = JSON.stringify(newState)\r\n            return newState\r\n            break\r\n        }\r\n        case REMOVE_INVENTORY_ENTRY: {\r\n            let newState = state\r\n            // Check if item is already in inventory\r\n            const itemInInventory = state.entries.find(entry => entry.item._id === action.payload.itemID)\r\n            if (!itemInInventory) return state\r\n\r\n            // Check if new amount is a positive integer\r\n            let newAmount = itemInInventory.amount - action.payload.amount\r\n\r\n            if (newAmount <= 0) {\r\n                // Remove entry from inventory\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.filter(entry => entry.item._id !== action.payload.itemID)\r\n                }\r\n            } else {\r\n                // Keep entry and replace amount\r\n                newState = {\r\n                    ...state,\r\n                    entries: state.entries.map(entry => {\r\n                        if (entry.item._id === action.payload.itemID) {\r\n                            return { ...entry, amount: newAmount }\r\n                        }\r\n                        return entry\r\n                    })\r\n                }\r\n            }\r\n\r\n            localStorage['inventory'] = JSON.stringify(newState)\r\n            return newState\r\n            break\r\n        }\r\n        default: return state\r\n    }\r\n}","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\position.ts",["235","236"],"import { Map, Coordinates } from '../../interfaces/position'\r\nimport { UPDATE_POSITION } from '../actions/types'\r\n\r\ninterface State {\r\n    map: Map,\r\n    baitLakeCoords: Coordinates\r\n}\r\n\r\nconst initialMap: Map = {\r\n    width: 4200,\r\n    height: 3200,\r\n    shorePath: { from: { x: 0, y: 0 }, to: { x: 4200, y: 200 }},\r\n    lakePath: { from: { x: 0, y: 0 }, to: { x: 4200, y: 3000 }}\r\n}\r\n\r\n\r\nconst initialState = {\r\n    map: initialMap,\r\n    baitLakeCoords: { x: 0, y: 0 }\r\n}\r\n\r\nexport default function (state = initialState, action: any): State {\r\n    switch(action.type) {\r\n        case UPDATE_POSITION:\r\n            return ({\r\n                ...state,\r\n                ...action.payload\r\n            })\r\n            break\r\n        default: return state\r\n    }\r\n}","C:\\www\\personal\\fishing-game\\src\\store\\reducers\\fishing.ts",["237","238"],"import { MAKE_BAIT_AVAILABLE } from '../actions/types'\r\n\r\ninterface State {\r\n    isBaitAvailable: boolean,\r\n    baitFood: string,\r\n    didFishBite: boolean\r\n}\r\n\r\nconst initialState = {\r\n    isBaitAvailable: false,\r\n    baitFood: 'mushroom',\r\n    didFishBite: false\r\n}\r\n\r\nexport default function(state: State = initialState, action): State {\r\n    switch(action.type) {\r\n        case MAKE_BAIT_AVAILABLE:\r\n            return { ...state, isBaitAvailable: action.payload }\r\n            break\r\n        default: return state\r\n    }\r\n}","C:\\www\\personal\\fishing-game\\src\\utils\\throttle.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\fishing.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\animations\\index.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Inventory\\index.tsx",["239","240","241","242"],"import React, { Dispatch, SetStateAction, ReactNode, useMemo, useState, useCallback, useRef } from 'react'\r\nimport { InventoryEntry, ItemCategory } from '../../../../interfaces/items'\r\nimport Modal from '../../../misc/Modal'\r\nimport categories from '../../../items/categories.json'\r\nimport { SectionID } from '../index'\r\nimport styles from './index.module.sass'\r\n\r\n// Redux\r\nimport { connect, useDispatch } from 'react-redux'\r\nimport { inventoryEntriesSelector, maxEntriesSelector } from '../../../../store/selectors/inventory'\r\nimport { deleteItemAction, removeInventoryEntryAction } from '../../../../store/actions/inventory'\r\n\r\ninterface Props {\r\n    entries: InventoryEntry[],\r\n    maxEntries: number,\r\n    setCurrentSection: Dispatch<SetStateAction<SectionID>>\r\n}\r\n\r\ninterface EntryProps {\r\n    entry: InventoryEntry,\r\n    handleSelect: () => void,\r\n    isSelected: boolean\r\n}\r\n\r\ninterface DetailsProps {\r\n    entry: InventoryEntry\r\n}\r\n\r\nexport const Entry: React.FC<EntryProps> = ({ entry, handleSelect, isSelected }) => {\r\n    const { amount, item } = entry\r\n    const { category, image } = item\r\n    const itemCategory = useMemo((): ItemCategory => categories[category], [category])\r\n    const { colors } = itemCategory\r\n\r\n    return <li\r\n        className={`${styles.entry} ${isSelected ? styles.selected : ''}`}\r\n        onClick={handleSelect}\r\n    >\r\n        <figure\r\n            className={styles.image}\r\n            dangerouslySetInnerHTML={{ __html: image }}\r\n            style={{ color: colors[1] }}\r\n        >\r\n        </figure>\r\n        <span className={styles.amount}>&times;<strong>{amount}</strong></span>\r\n    </li>\r\n}\r\n\r\nexport const Details: React.FC<DetailsProps> = ({ entry }) => {\r\n    const { item } = entry\r\n    const { _id, description, category } = item\r\n    const itemCategory = useMemo((): ItemCategory => categories[category], [category])\r\n\r\n    const [modal, setModal] = useState<ReactNode>(null)\r\n    const modalRef = useRef<any>(null)\r\n\r\n    const handleConfirm = useCallback(\r\n        (onConfirm, msg = 'Are you sure ?'): void => {\r\n            setModal(\r\n                <Modal\r\n                    ref={modalRef}\r\n                    onClose={setModal}\r\n                    className={styles.modal}\r\n                >\r\n                    <h3>{msg}</h3>\r\n                    <ul className={styles.actionsList}>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => modalRef.current.closeModal()}\r\n                                className={`btn btn-cancel`}\r\n                            >Cancel</button>\r\n                        </li>\r\n                        <li>\r\n                            <button\r\n                                onClick={() => {\r\n                                    onConfirm()\r\n                                    modalRef.current.closeModal()\r\n                                }}\r\n                                className={`btn btn-primary`}\r\n                            >Confirm</button>\r\n                        </li>\r\n                    </ul>\r\n                </Modal>\r\n            )\r\n        }, []\r\n    )\r\n\r\n    // Redux\r\n    const dispatch = useDispatch()\r\n    const removeItem = useCallback((itemID: string, amount: number): void => dispatch(removeInventoryEntryAction(itemID, amount)), [])\r\n    const deleteEntry = useCallback((itemID: string): void => dispatch(deleteItemAction(itemID)), [])\r\n\r\n    return <aside className={styles.details}>\r\n        <h3\r\n            style={{\r\n                background: `-webkit-linear-gradient(${itemCategory.colors.join(', ')})`\r\n            }}\r\n        >\r\n            {_id}\r\n        </h3>\r\n        <article className={styles.description} style={{ color: itemCategory.colors[0] }}>\r\n            {description}\r\n        </article>\r\n        <ul className={styles.actions}>\r\n            <li>\r\n                <button\r\n                    className={`btn btn-primary`}\r\n                    title={`Try to use ${_id.toLowerCase()}`}\r\n                >Use</button>\r\n            </li>\r\n            <li>\r\n                <button\r\n                    className={`btn btn-cancel`}\r\n                    title={`Remove a chosen amount of ${_id.toLowerCase()} from the inventory`}\r\n                >Drop</button></li>\r\n            <li>\r\n                <button\r\n                    className={`btn btn-cancel`} \r\n                    title={`Remove every ${_id.toLowerCase()} from the inventory`}\r\n                    onClick={() => handleConfirm(() => deleteEntry(_id), `Drop every ${_id.toLowerCase()} ?`)}\r\n                >\r\n                    Drop all\r\n                </button>\r\n            </li>\r\n        </ul>\r\n        {modal && modal}\r\n    </aside>\r\n}\r\n\r\nexport const Inventory: React.FC<Props> = ({\r\n    entries = [],\r\n    maxEntries,\r\n    setCurrentSection\r\n}) => {\r\n    const [currentEntryNum, setCurrentEntryNum] = useState<number>(null)\r\n    const remainingEntries = useMemo((): number => maxEntries - entries.length, [entries, maxEntries])\r\n    const entriesJSX = useMemo((): (ReactNode[]) => {\r\n        return entries.map((entry: InventoryEntry, index: number) => {\r\n            const isSelected: boolean = currentEntryNum === index\r\n            return <Entry\r\n                key={entry.item._id}\r\n                entry={entry}\r\n                handleSelect={() => !isSelected ? setCurrentEntryNum(index) : setCurrentEntryNum(null)}\r\n                isSelected={isSelected}\r\n             />\r\n        })\r\n    }, [entries, currentEntryNum])\r\n\r\n    const remainingEntriesJSX = useMemo((): (ReactNode[] | ReactNode | null) => {\r\n        if (typeof remainingEntries !== 'number' || remainingEntries <= 0) return null\r\n        let remaining = []\r\n        for (let i = 0; i < remainingEntries; i++) {\r\n            remaining.push(\r\n                <li key={i} className={`${styles.entry} ${styles.empty}`}></li>\r\n            )\r\n        }\r\n        return remaining\r\n    }, [remainingEntries])\r\n\r\n    const detailsJSX = useMemo((): (ReactNode | null) => {\r\n        if (!entries || entries.length <= 0) {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                <h3>Your inventory is empty ...</h3>\r\n                <p>Lost all your <em>baits</em> ?</p>\r\n                <p>\r\n                    You can buy new ones at the&nbsp;\r\n                    <span className={styles.link} onClick={() => setCurrentSection(SectionID.SHOPPING)}>fishing shop</span>\r\n                    ; otherwise, you might as well look after something edible for fish consumption somewhere on the shore.\r\n                </p>\r\n            </aside>\r\n        }\r\n        if (currentEntryNum === null) {\r\n            return <aside className={`${styles.details} ${styles.msg}`}>\r\n                <h3>Select an item</h3>\r\n            </aside>\r\n        }\r\n        \r\n        const currentEntry = entries[currentEntryNum]\r\n        if (!currentEntry) return null\r\n        return <Details entry={currentEntry} />\r\n    }, [entries, currentEntryNum])\r\n\r\n    return <div className={styles.inventory}>\r\n        <main className={styles.entries}>\r\n            <ul className={styles.entriesList}>\r\n                {entriesJSX}\r\n                {remainingEntriesJSX}\r\n            </ul>\r\n        </main>\r\n        {detailsJSX}\r\n    </div>\r\n}\r\n\r\n// Connect to Redux\r\nconst mapStateToProps = state => ({\r\n    entries: inventoryEntriesSelector(state),\r\n    maxEntries: maxEntriesSelector(state)\r\n})\r\nconst mapDispatchToProps = dispatch => ({})\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Inventory)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\FishArea\\index.tsx",["243","244"],"import React, { ReactNode, FC, useMemo } from 'react'\r\nimport FishGroup from '../FishGroup'\r\nimport { Path } from '../../../../interfaces/position'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\ninterface FishEntry {\r\n    amount: number,\r\n    component: any,\r\n    props: any\r\n}\r\n\r\ninterface Props {\r\n    path: Path,\r\n    fishes: FishEntry[],\r\n}\r\n\r\nconst FishArea: FC<Props> = ({ path, fishes }) => {\r\n    return <FishGroup path={path} render={groupProps => {\r\n        return (\r\n         /* Pass props to each fish */\r\n        fishes\r\n        .map((fishEntry: FishEntry) => {\r\n            const { amount, props } = fishEntry\r\n            const Fish: any = fishEntry.component\r\n            // Render \"amount\" times the provided component\r\n            let result = []\r\n            for (let i = 0; i < amount; i++) {\r\n                result.push(\r\n                    <Fish\r\n                        key={uuid()}\r\n                        {...props}\r\n                        {...groupProps}\r\n                        area={groupProps.path}\r\n                     />\r\n                )\r\n            }\r\n            return result\r\n        })\r\n        .flat()\r\n    )}} />\r\n}\r\n\r\nexport default React.memo(FishArea)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\index.tsx",["245","246","247","248","249"],"import React, { ReactNode, useState, useMemo, useEffect, useRef } from 'react'\r\nimport Buy from './Buy'\r\nimport Sell from './Sell'\r\nimport { randomIntFromInterval } from '../../../../utils/math'\r\nimport { GiPirateCaptain } from 'react-icons/all'\r\nimport styles from './index.module.sass'\r\n\r\ninterface Props {\r\n    [key: string]: any\r\n}\r\n\r\nexport enum ContentID {\r\n    ROOT = 'ROOT',\r\n    BUY = 'BUY',\r\n    SELL = 'SELL'\r\n}\r\n\r\n// Seller comments\r\nexport const greetings: string[] = [\r\n    'Ahoy, Matey ! What brings you here ?',\r\n    'The better your fish rod, the bigger fishes you\\'ll catch ! How convenient that I\\'m selling some',\r\n    'Do you have some fish for me ?'\r\n]\r\nexport const thanks: string[] = [\r\n    'Thank ya !',\r\n    'It\\'s a pleasure doing business with ye',\r\n    'Don\\'t ya lose it, mate !'\r\n]\r\nexport const randomGreeting = (): string => greetings[randomIntFromInterval(0, greetings.length - 1)]\r\nexport const randomThanks = (): string => thanks[randomIntFromInterval(0, thanks.length - 1)]\r\n\r\nconst Shop: React.FC<Props> = () => {\r\n    const [currentContentID, setCurrentContentID] = useState<ContentID>(ContentID.ROOT)\r\n\r\n    // Seller comments\r\n    const [sellerPhrase, setSellerPhrase] = useState<string>(randomGreeting())\r\n    const [sellerPhraseSpelled, setSellerPhraseSpelled] = useState<string>('')\r\n    const sellerPhraseSpelledJSX = useMemo((): ReactNode[] => {\r\n        return sellerPhraseSpelled.split('').map((letter: string, index: number) => (\r\n            <span\r\n                key={index}\r\n                className={styles.letter}\r\n                style={{ filter: index >= sellerPhraseSpelled.length - 5 ? `hue-rotate(${index*360/sellerPhrase.length}deg)` : 'hue-rotate(0)' }}\r\n            >{letter}</span>\r\n        ))\r\n    }, [sellerPhraseSpelled])\r\n    // Spell seller's text letter by letter\r\n    const spellingIntervalID = useRef<number>(null)\r\n    const lastSellerPhraseRef = useRef<string>(null)\r\n    useEffect(() => {\r\n        // Restart process if seller's dialog changes\r\n        if (\r\n            lastSellerPhraseRef && lastSellerPhraseRef.current &&\r\n            spellingIntervalID && spellingIntervalID.current &&\r\n            sellerPhrase != lastSellerPhraseRef.current\r\n        ) {\r\n            setSellerPhraseSpelled('')\r\n            window.clearInterval(spellingIntervalID.current)\r\n        }\r\n\r\n        spellingIntervalID.current = window.setInterval(() => {            \r\n            if (sellerPhraseSpelled.length < sellerPhrase.length) {\r\n                setSellerPhraseSpelled(sellerPhraseSpelled + sellerPhrase[sellerPhraseSpelled.length])\r\n            } else {\r\n                window.clearInterval(spellingIntervalID.current)\r\n            }\r\n        }, 20)\r\n        lastSellerPhraseRef.current = sellerPhrase\r\n        \r\n        return () => {\r\n            window.clearInterval(spellingIntervalID.current)\r\n        }\r\n    }, [sellerPhrase, sellerPhraseSpelled])\r\n\r\n    const currentContentJSX = useMemo((): ReactNode => {\r\n        switch(currentContentID) {\r\n            case ContentID.ROOT:\r\n                return <div className={styles.root}>\r\n                    <ul>\r\n                        <li>\r\n                            <button onClick={() => setCurrentContentID(ContentID.BUY)} className={`btn btn-primary`}>\r\n                                I want to buy\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={() => setCurrentContentID(ContentID.SELL)} className={`btn btn-primary`}>\r\n                                I have stuff for you\r\n                            </button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                break\r\n            case ContentID.BUY:\r\n                return <Buy\r\n                    setSellerPhrase={setSellerPhrase}\r\n                    setCurrentContentID={setCurrentContentID}\r\n                 />\r\n                break\r\n            case ContentID.SELL:\r\n                return <Sell\r\n                    setSellerPhrase={setSellerPhrase}\r\n                    setCurrentContentID={setCurrentContentID}\r\n                 />\r\n                break\r\n            default: return null\r\n        }\r\n    }, [currentContentID])\r\n \r\n    return <div className={styles.shop}>\r\n        <main className={styles.mainContent}>\r\n            {currentContentJSX}\r\n        </main>\r\n        <section className={styles.seller}>\r\n            <figure className={styles.sellerFigure}>\r\n                <GiPirateCaptain />\r\n                <figcaption>Captain Joe</figcaption>\r\n            </figure>\r\n            <p className={styles.sellerPhrase}>{sellerPhraseSpelledJSX}</p>\r\n        </section>\r\n    </div>\r\n}\r\n\r\nexport default Shop","C:\\www\\personal\\fishing-game\\src\\components\\ProgressCircle\\index.tsx",[],"C:\\www\\personal\\fishing-game\\src\\components\\fishes\\Default\\index.tsx",["250","251","252","253","254","255","256","257","258"],"import React, { Fragment, useCallback, ReactNode, useState, useMemo, useEffect, useRef } from 'react'\r\nimport { Coordinates, Path, Map } from '../../../interfaces/position'\r\nimport { randomIntFromInterval, probability, toDeg } from '../../../utils/math'\r\nimport { getNextCoordinatesOfPath, areCoordinatesInPath, getAngleFromVerticalAxis } from '../../../utils/position'\r\nimport { takeBaitAnim } from '../../Game/animations'\r\nimport { FaHeart, FaTimes } from 'react-icons/fa'\r\nimport styles from './index.module.sass'\r\nimport gameProcesses from '../../Game/processes/index.json'\r\n\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { mapSelector, baitLakeCoordsSelector } from '../../../store/selectors/position'\r\nimport { isBaitAvailableSelector, baitFoodSelector } from'../../../store/selectors/fishing'\r\nimport { makeBaitAvailableAction } from '../../../store/actions/fishing'\r\nimport { setGameProcessAction } from '../../../store/actions/game'\r\n\r\ninterface Props {\r\n    size?: number, // Size of the fish in px; width = 1em\r\n    area?: Path, // Path of the area the fish belongs to\r\n    detectionScope?: number, // Number of pixels around fish where it can detect the bait,\r\n    roamingInterval?: number, // Interval in milliseconds between fish moves when it's roaming\r\n    roamingDistance?: number, // Distance in px that fish travels when it's roaming\r\n    edibleFoods?: string[], // What foods the fish likes\r\n    biteChance: number, // Probability that the fish will take the bait if it's attracted to it (min: 0; max: 1)\r\n    catchTimeLapse: number[] // Interval of time in which player is able to hook the fish after it took the bait; first n is the delay after the bait was taken, second is the duration\r\n    className?: string,\r\n    children?: ReactNode,\r\n    // Redux\r\n    map?: Map,\r\n    baitLakeCoords?: Coordinates\r\n}\r\n\r\n// Lake is the referential of fish coords\r\nconst Fish: React.FC<Props> = ({\r\n    size = 20,\r\n    area,\r\n    detectionScope = 75,\r\n    roamingInterval,\r\n    roamingDistance,\r\n    edibleFoods = ['mushroom'],\r\n    biteChance = .75,\r\n    catchTimeLapse =  [0, 1500],\r\n    className = '',\r\n    children,\r\n}) => {\r\n    // REDUX\r\n    const baitLakeCoords: Coordinates = useSelector(baitLakeCoordsSelector)\r\n    const map: Map = useSelector(mapSelector)\r\n    const isBaitAvailable: boolean = useSelector(isBaitAvailableSelector)\r\n    const baitFood: string = useSelector(baitFoodSelector)\r\n    const dispatch = useDispatch()\r\n    const makeBaitAvailable = useCallback((bool: boolean): void => dispatch(makeBaitAvailableAction(bool)), [])\r\n    const setGameProcess = useCallback((newProcess: string): void => dispatch(setGameProcessAction(newProcess)), [])\r\n    \r\n    // REFS\r\n    const fishPathRef = useRef<HTMLDivElement>(null)\r\n\r\n    // STATE\r\n    const [fishDirection, setFishDirection] = useState<number>(randomIntFromInterval(-180, 180))\r\n    const [isRoaming, setIsRoaming] = useState<boolean>(true)\r\n    const [moveTransition, setMoveTransition] = useState<string>('none')\r\n    const [wouldHookSuccessfully, setWouldHookSuccessfully] = useState<boolean>(false)\r\n    const [canTryToCatch, setCanTryToCatch] = useState<boolean>(false)\r\n    const [isStruggling, setIsStruggling] = useState<boolean>(false)\r\n\r\n    // Initialize fish position somewhere inside the area/group it belongs to\r\n    const [fishCoords, setFishCoords] = useState<Coordinates>({\r\n        x: randomIntFromInterval(area.from.x, area.to.x),\r\n        y: randomIntFromInterval(area.from.y, area.to.y)\r\n    })\r\n    const fishWidth = useMemo((): number => size, [size])\r\n    const fishHeight = useMemo((): number => size*3/8, [size])\r\n    const isFishHorizontal = useMemo((): boolean => (fishDirection <= 135 && fishDirection >= 45) || (fishDirection >= -135 && fishDirection <= -45), [fishDirection])\r\n    const rectWidth = useMemo((): number => isFishHorizontal ? fishWidth : fishHeight, [isFishHorizontal, fishWidth, fishHeight])\r\n    const rectHeight = useMemo((): number => isFishHorizontal ? fishHeight : fishWidth, [isFishHorizontal, fishWidth, fishHeight])\r\n\r\n    const fishPath = useMemo((): Path => {\r\n        const halfWidth: number = rectWidth/2\r\n        const halfHeight: number = rectHeight/2\r\n        return ({\r\n            from: {\r\n                x: fishCoords.x - halfWidth,\r\n                y: fishCoords.y - halfHeight\r\n            },\r\n            to: {\r\n                x: fishCoords.x + halfWidth,\r\n                y: fishCoords.y + halfHeight\r\n            }\r\n        })\r\n    }, [fishCoords, rectWidth, rectHeight])\r\n\r\n    const detectionPath = useMemo((): Path => {\r\n        return ({\r\n            from: {\r\n                x: fishPath.from.x - detectionScope,\r\n                y: fishPath.from.y - detectionScope\r\n            },\r\n            to: {\r\n                x: fishPath.to.x + detectionScope,\r\n                y: fishPath.to.y + detectionScope\r\n            }\r\n        })\r\n    }, [fishPath, detectionScope])\r\n\r\n    // Check when bait gets within fish's detection scope\r\n    const isInScope = useMemo((): boolean => {\r\n        return isBaitAvailable && areCoordinatesInPath(baitLakeCoords, detectionPath)\r\n    }, [baitLakeCoords, detectionPath, isBaitAvailable])\r\n\r\n    // Check whether fish likes the food on the fishing hook\r\n    const likesBait = useMemo(() => edibleFoods.includes(baitFood), [edibleFoods, baitFood])\r\n\r\n    // FUNCTIONS\r\n    const giveUpBait = useCallback(\r\n        (): void => {\r\n            window.clearTimeout(hookStartTimerIDRef.current)\r\n            window.clearTimeout(hookFailTimerIDRef.current)\r\n            window.clearTimeout(hookSucceedTimerIDRef.current)\r\n            console.log('giving up')\r\n            return setIsRoaming(true)\r\n        }, []\r\n    )\r\n\r\n    // This function gets called when a fish takes the bait and the player reacted too late\r\n    const handleHookFail = useCallback(\r\n        (): void => {\r\n            // Alert('Too late ... The fish went away with your bait !')\r\n            if (!inScopeRef.current) return giveUpBait()\r\n            console.log('Too late ...')\r\n            setWouldHookSuccessfully(false)\r\n            setCanTryToCatch(false)\r\n            setIsRoaming(true)\r\n            makeBaitAvailable(true)\r\n        }, []\r\n    )\r\n\r\n    const randomMove = useCallback(\r\n        (): void => {\r\n            if (typeof document.hidden === \"undefined\" || document.hidden === false) {\r\n                const newAngle: number = randomIntFromInterval(-180, 180)\r\n                const distance: number = roamingDistance || fishWidth\r\n                const offsetCoords: Coordinates = getNextCoordinatesOfPath(newAngle, distance)\r\n                const newCoords: Coordinates = {\r\n                    x: fishCoords.x + offsetCoords.x,\r\n                    y: fishCoords.y + offsetCoords.y\r\n                }\r\n        \r\n                // Only move if newCoords are inside fish area\r\n                if (areCoordinatesInPath(newCoords, area)) {\r\n                    setFishDirection(-newAngle)\r\n                    setFishCoords(newCoords)\r\n                }\r\n            }\r\n        }, [fishCoords, fishDirection, roamingDistance, fishWidth, area, isInScope, likesBait]\r\n    )\r\n\r\n    const approachBait = useCallback(\r\n        (): void => {\r\n            // Lean towards bait from current position\r\n            const angle: number = toDeg(getAngleFromVerticalAxis({ from: baitLakeCoords, to: fishCoords }))\r\n            setMoveTransition('2s all ease-in-out')\r\n            setFishDirection(angle)\r\n            // Handle offset\r\n            let offsetX: number = 0\r\n            let offsetY: number = 0\r\n\r\n            offsetX = (angle > 0 && angle < 45) || (angle > 135 && angle <= 180) ? rectWidth/2 : offsetX\r\n            offsetX = angle < 0 ? -rectWidth : offsetX\r\n            offsetX = (angle < 45 && angle > -45) || angle > 135 ?  -rectHeight/2 : offsetX\r\n            offsetY = Math.abs(angle) > 90 ? rectHeight/2 : -rectHeight/2\r\n\r\n            setFishCoords({\r\n                x: baitLakeCoords.x + offsetX,\r\n                y: baitLakeCoords.y + offsetY\r\n            })\r\n        }, [baitLakeCoords, fishCoords, rectHeight, rectWidth]\r\n    )\r\n\r\n    // Handle take bait\r\n    // Timer IDs\r\n    const hookStartTimerIDRef = useRef<number>(null)\r\n    const hookSucceedTimerIDRef = useRef<number>(null)\r\n    const hookFailTimerIDRef = useRef<number>(null)\r\n    // We need to access current values of these refs during setTimeout\r\n    const inScopeRef = useRef<boolean>(null)\r\n    // Map dependencies to refs\r\n    useEffect(() => {\r\n        inScopeRef.current = isInScope\r\n    }, [isInScope])\r\n    const takeBait = useCallback(\r\n        (): void => {\r\n             // Stop roaming and approach bait\r\n            setIsRoaming(false)\r\n            const [delay, duration] = catchTimeLapse\r\n            const approachDuration = 4000\r\n            approachBait()\r\n            console.log('approaching bait')\r\n            \r\n            hookFailTimerIDRef.current = window.setTimeout(\r\n                handleHookFail, approachDuration + delay + duration\r\n            )\r\n\r\n            hookSucceedTimerIDRef.current = window.setTimeout(() => {\r\n                if (!inScopeRef.current) return giveUpBait()\r\n                setWouldHookSuccessfully(true)\r\n                console.log('can catch fish !')\r\n            }, approachDuration + delay)\r\n\r\n            // Fish will approach bait during x seconds before taking it\r\n            hookStartTimerIDRef.current = window.setTimeout(() => {\r\n                // If bait went out of scope or is unavailable, stop\r\n                if (!inScopeRef.current) {\r\n                    return giveUpBait()\r\n                }\r\n                \r\n                setCanTryToCatch(true)\r\n                // Prevent more than one fish at a time to get hooked\r\n                makeBaitAvailable(false)\r\n                takeBaitAnim(fishPathRef.current)\r\n                // \"takes bait\"; if tries to hook now, too early\r\n            }, approachDuration)\r\n        }, [\r\n            catchTimeLapse,\r\n            approachBait,\r\n            handleHookFail,\r\n            giveUpBait\r\n        ]\r\n    )\r\n    // Allow player to hook the fish during the right timelapse\r\n    useEffect(() => {\r\n        function handleHook (): void {\r\n            if (isBaitAvailable) {\r\n                if (wouldHookSuccessfully) {\r\n                    //  Hooked successfully\r\n                    alert('Hooked !')\r\n                    window.clearTimeout(hookFailTimerIDRef.current)\r\n                    setIsStruggling(true)\r\n                    setWouldHookSuccessfully(false)\r\n                    setCanTryToCatch(false)\r\n                } else {\r\n                    // Too early\r\n                    alert('Too early !')\r\n                    makeBaitAvailable(true)\r\n                }\r\n            } else console.log('Tried to hook but bait is not available ...')\r\n        }\r\n        function handleKeyPress (e: KeyboardEvent): void {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            switch(e.keyCode) {\r\n                case 32: // Space\r\n                case 13: // Enter\r\n                    handleHook()\r\n                    break\r\n            }\r\n        }\r\n        function handleClick (e: MouseEvent): void {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            handleHook()\r\n        }\r\n        function handleTouch (e: TouchEvent): void {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            handleHook()\r\n        }\r\n\r\n        if (canTryToCatch) {\r\n            document.addEventListener('keypress', handleKeyPress, true)\r\n            document.body.addEventListener('click', handleClick, true)\r\n            document.body.addEventListener('touchstart', handleTouch, true)\r\n        } else {\r\n            document.removeEventListener('keypress', handleKeyPress, true)\r\n            document.body.removeEventListener('click', handleClick, true)\r\n            document.body.removeEventListener('touchstart', handleTouch, true)\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('keypress', handleKeyPress, false)\r\n            document.body.removeEventListener('click', handleClick, true)\r\n            document.body.removeEventListener('touchstart', handleTouch, true)\r\n        }\r\n    }, [wouldHookSuccessfully, canTryToCatch, isBaitAvailable])\r\n\r\n    // Default fish behaviour when it's roaming\r\n    useEffect(() => {\r\n        let intervalID = null\r\n        const handleRoaming = (): void => {\r\n            if (!isInScope || !likesBait) randomMove()\r\n            else {\r\n                // Decide whether to take the bait\r\n                if (probability(biteChance)) {\r\n                    takeBait()\r\n                } else randomMove()\r\n            }\r\n        }\r\n\r\n        if (isRoaming) {\r\n            intervalID = window.setInterval(handleRoaming, roamingInterval || randomIntFromInterval(3000, 6000))\r\n            setMoveTransition('1s all ease')\r\n        } else {\r\n            window.clearInterval(intervalID)\r\n        }\r\n\r\n        return () => {\r\n            window.clearInterval(intervalID)\r\n        }\r\n    }, [\r\n        isRoaming,\r\n        randomMove,\r\n        roamingInterval,\r\n        likesBait,\r\n        isInScope,\r\n        biteChance,\r\n        takeBait\r\n    ])\r\n\r\n    return <><div\r\n        className={`${styles.defaultFish} ${isStruggling ? styles.struggling : ''} ${className}`}\r\n        style={{\r\n            fontSize: `${size}px`,\r\n            animationDelay: `${Math.random()}s`,\r\n            transform: `\r\n                translate(\r\n                    ${fishPath.from.x - (isFishHorizontal ? 0 : fishHeight/2)}px,\r\n                     ${fishPath.from.y + (isFishHorizontal ? 0 : fishHeight)}px\r\n                )\r\n                 rotate(${fishDirection + 90}deg)\r\n            `,\r\n            left: 0,\r\n            top: 0,\r\n            transition: moveTransition\r\n        }}\r\n    >\r\n        {children}\r\n    </div>\r\n    <div\r\n        className={styles.fishPath}\r\n        ref={fishPathRef}\r\n        style={{\r\n            left: fishPath.from.x,\r\n            top: fishPath.from.y,\r\n            width: fishPath.to.x - fishPath.from.x,\r\n            height: fishPath.to.y - fishPath.from.y,\r\n            transition: moveTransition\r\n        }}\r\n    >\r\n        {isInScope && (\r\n            /* Emoji indicating whether the fish is attracted by the bait */\r\n            <div className={styles.likeStatus}>\r\n                {likesBait ? <FaHeart className={styles.heart} />\r\n                : <FaTimes className={styles.times} />}\r\n            </div>\r\n        )}\r\n    </div>\r\n    <div\r\n        className={styles.detectionPath}\r\n        style={{\r\n            left: detectionPath.from.x,\r\n            top: detectionPath.from.y,\r\n            width: detectionPath.to.x - detectionPath.from.x,\r\n            height: detectionPath.to.y - detectionPath.from.y\r\n        }}\r\n    ></div>\r\n    </>\r\n}\r\n\r\nexport default React.memo(Fish)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\evolution\\index.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\actions\\inventory.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\selectors\\inventory.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\selectors\\position.ts",[],"C:\\www\\personal\\fishing-game\\src\\store\\selectors\\fishing.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\areas\\FishGroup\\index.tsx",["259","260"],"import React, { ReactNode, Fragment, useEffect, useState, useRef, useMemo } from 'react'\r\nimport { Path } from '../../../../interfaces/position'\r\nimport styles from './index.module.sass'\r\n\r\ninterface Props {\r\n    path: Path,\r\n    render?: (Path) => ReactNode\r\n}\r\n\r\nconst FishGroup = ({ path, render }) => {\r\n    const [isGroupVisible, setIsGroupVisible] = useState<boolean>(false)\r\n    const groupRef = useRef<HTMLDivElement>(null)\r\n\r\n    // Use intersection observer API to render fishes only if their area is in viewport\r\n    useEffect(() => {\r\n        const options: any = {\r\n            root: null,\r\n            rootMargin: '0px',\r\n            threshold: 0.1\r\n        }\r\n        const observer: IntersectionObserver = new IntersectionObserver((entries, observer) => {\r\n            const group = entries[0]\r\n            group.isIntersecting ? setIsGroupVisible(true) : setIsGroupVisible(false)\r\n        }, options)\r\n\r\n        if (groupRef.current) observer.observe(groupRef.current)\r\n\r\n        return () => observer.disconnect()\r\n    }, [])\r\n\r\n    return <>\r\n        <div\r\n            ref={groupRef}\r\n            className={styles.fishGroup}\r\n            style={{\r\n                left: path.from.x,\r\n                top: path.from.y,\r\n                width: path.to.x - path.from.x,\r\n                height: path.to.y - path.from.y\r\n            }}\r\n        ></div>\r\n    {isGroupVisible && render({ path })}\r\n    </>\r\n}\r\n\r\nexport default React.memo(FishGroup)","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Sell\\index.tsx",["261","262","263","264","265","266","267"],"C:\\www\\personal\\fishing-game\\src\\components\\misc\\Modal\\index.tsx",["268"],"import React, { ReactNode, useState, useCallback, useImperativeHandle, useRef, useEffect } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport styles from './index.module.sass'\r\n\r\ninterface Props {\r\n    onClose: any,\r\n    className?: string,\r\n    style?: any,\r\n    transition?: number,\r\n    children?: ReactNode\r\n}\r\n\r\nconst Modal = React.forwardRef<any, Props>(({\r\n    onClose,\r\n    transition = .3,\r\n    className = '',\r\n    style = {},\r\n    children\r\n}, ref) => {\r\n    const [isClosing, setIsClosing] = useState<boolean>(false)\r\n    const closeModal = useCallback(\r\n        (): void => {\r\n            setIsClosing(true)\r\n            timerID.current = window.setTimeout(() => {\r\n                onClose()\r\n            }, transition*1000)\r\n        }, [onClose]\r\n    )\r\n    const timerID = useRef<number>(null)\r\n    useEffect(() => () => window.clearTimeout(timerID.current), [])\r\n    useImperativeHandle(ref, () => ({ closeModal }), [closeModal])\r\n\r\n    return ReactDOM.createPortal(\r\n        (\r\n            <div\r\n                className={`${styles.modalWrapper} ${isClosing ? styles.closing : ''}`}\r\n                onClick={closeModal}\r\n                style={{ transition: `all ease ${transition}s`, animationDuration: `${transition}s` }}\r\n            >\r\n                <div className={`${styles.modalWindow} ${className}`} style={style} onClick={e => e.stopPropagation()}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        ), document.getElementById('portal')\r\n    )\r\n})\r\n\r\nModal.defaultProps = {\r\n    children: null,\r\n    style: null,\r\n    className: '',\r\n    onClose: () => false\r\n}\r\n\r\nexport default Modal","C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Shop\\Buy\\index.tsx",["269","270","271","272","273","274","275","276"],"C:\\www\\personal\\fishing-game\\src\\interfaces\\position.ts",[],"C:\\www\\personal\\fishing-game\\src\\components\\Game\\MainMenu\\Credits\\index.tsx",["277"],"import React from 'react'\r\nimport styles from './index.module.sass'\r\n\r\nconst Credits = () => <div className={styles.credits}>\r\n    <main>\r\n        <h3>Credits</h3>\r\n        <section className={styles.audioSection}>\r\n            <h4>Audio</h4>\r\n            <ul className={styles.creditList}>\r\n                <li>\r\n                    <h5>\r\n                        \"Coins Purchase 01\"&nbsp;\r\n                        <address>\r\n                            by&nbsp;\r\n                            <a\r\n                                href=\"https://freesound.org/people/rhodesmas/sounds/321263/\"\r\n                                title=\"Rhodesmas' work\"\r\n                                target=\"_blank\"\r\n                                rel=\"author\"\r\n                            >rhodesmas</a>\r\n                        </address>\r\n                    </h5>\r\n                    <p>Modified from .wav to .mp3</p>\r\n                </li>\r\n            </ul>\r\n        </section>\r\n    </main>\r\n</div>\r\n\r\nexport default Credits",{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","replacedBy":"281"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","replacedBy":"281"},{"ruleId":"282","severity":1,"message":"283","line":1,"column":60,"nodeType":"284","messageId":"285","endLine":1,"endColumn":75},{"ruleId":"286","severity":1,"message":"287","line":50,"column":8,"nodeType":"288","endLine":50,"endColumn":22,"suggestions":"289"},{"ruleId":"282","severity":1,"message":"290","line":81,"column":17,"nodeType":"284","messageId":"285","endLine":81,"endColumn":23},{"ruleId":"286","severity":1,"message":"291","line":103,"column":9,"nodeType":"288","endLine":103,"endColumn":28,"suggestions":"292"},{"ruleId":"286","severity":1,"message":"293","line":125,"column":8,"nodeType":"288","endLine":125,"endColumn":64,"suggestions":"294"},{"ruleId":"286","severity":1,"message":"295","line":134,"column":12,"nodeType":"288","endLine":134,"endColumn":41,"suggestions":"296"},{"ruleId":"286","severity":1,"message":"297","line":145,"column":9,"nodeType":"288","endLine":145,"endColumn":44,"suggestions":"298"},{"ruleId":"286","severity":1,"message":"299","line":213,"column":8,"nodeType":"288","endLine":213,"endColumn":24,"suggestions":"300"},{"ruleId":"301","severity":1,"message":"302","line":229,"column":17,"nodeType":"303","messageId":"304","endLine":229,"endColumn":22},{"ruleId":"301","severity":1,"message":"302","line":252,"column":17,"nodeType":"303","messageId":"304","endLine":252,"endColumn":22},{"ruleId":"301","severity":1,"message":"302","line":268,"column":17,"nodeType":"303","messageId":"304","endLine":268,"endColumn":22},{"ruleId":"286","severity":1,"message":"305","line":271,"column":8,"nodeType":"288","endLine":285,"endColumn":6,"suggestions":"306"},{"ruleId":"286","severity":1,"message":"307","line":53,"column":8,"nodeType":"288","endLine":53,"endColumn":49,"suggestions":"308"},{"ruleId":"286","severity":1,"message":"309","line":41,"column":8,"nodeType":"288","endLine":41,"endColumn":10,"suggestions":"310"},{"ruleId":"301","severity":1,"message":"302","line":47,"column":17,"nodeType":"303","messageId":"304","endLine":47,"endColumn":22},{"ruleId":"301","severity":1,"message":"302","line":50,"column":17,"nodeType":"303","messageId":"304","endLine":50,"endColumn":22},{"ruleId":"286","severity":1,"message":"311","line":33,"column":53,"nodeType":"288","endLine":33,"endColumn":55,"suggestions":"312"},{"ruleId":"286","severity":1,"message":"311","line":36,"column":54,"nodeType":"288","endLine":36,"endColumn":56,"suggestions":"313"},{"ruleId":"286","severity":1,"message":"314","line":64,"column":12,"nodeType":"288","endLine":64,"endColumn":31,"suggestions":"315"},{"ruleId":"286","severity":1,"message":"316","line":70,"column":8,"nodeType":"288","endLine":70,"endColumn":10,"suggestions":"317"},{"ruleId":"286","severity":1,"message":"318","line":77,"column":8,"nodeType":"288","endLine":77,"endColumn":10,"suggestions":"319"},{"ruleId":"286","severity":1,"message":"320","line":84,"column":12,"nodeType":"288","endLine":84,"endColumn":44,"suggestions":"321"},{"ruleId":"286","severity":1,"message":"322","line":168,"column":26,"nodeType":"284","endLine":168,"endColumn":33},{"ruleId":"286","severity":1,"message":"323","line":173,"column":8,"nodeType":"288","endLine":173,"endColumn":43,"suggestions":"324"},{"ruleId":"282","severity":1,"message":"325","line":67,"column":23,"nodeType":"284","messageId":"285","endLine":67,"endColumn":35},{"ruleId":"286","severity":1,"message":"326","line":91,"column":12,"nodeType":"288","endLine":91,"endColumn":14,"suggestions":"327"},{"ruleId":"286","severity":1,"message":"328","line":99,"column":8,"nodeType":"288","endLine":99,"endColumn":10,"suggestions":"329"},{"ruleId":"286","severity":1,"message":"318","line":102,"column":73,"nodeType":"288","endLine":102,"endColumn":75,"suggestions":"330"},{"ruleId":"286","severity":1,"message":"331","line":112,"column":12,"nodeType":"288","endLine":112,"endColumn":24,"suggestions":"332"},{"ruleId":"286","severity":1,"message":"333","line":194,"column":8,"nodeType":"288","endLine":194,"endColumn":86,"suggestions":"334"},{"ruleId":"286","severity":1,"message":"335","line":208,"column":12,"nodeType":"288","endLine":208,"endColumn":32,"suggestions":"336"},{"ruleId":"286","severity":1,"message":"337","line":349,"column":26,"nodeType":"284","endLine":349,"endColumn":33},{"ruleId":"286","severity":1,"message":"338","line":352,"column":8,"nodeType":"288","endLine":359,"endColumn":6,"suggestions":"339"},{"ruleId":"286","severity":1,"message":"340","line":427,"column":8,"nodeType":"288","endLine":427,"endColumn":31,"suggestions":"341"},{"ruleId":"286","severity":1,"message":"342","line":95,"column":12,"nodeType":"288","endLine":95,"endColumn":57,"suggestions":"343"},{"ruleId":"286","severity":1,"message":"318","line":103,"column":8,"nodeType":"288","endLine":103,"endColumn":10,"suggestions":"344"},{"ruleId":"286","severity":1,"message":"345","line":126,"column":8,"nodeType":"288","endLine":126,"endColumn":19,"suggestions":"346"},{"ruleId":"347","severity":1,"message":"348","line":32,"column":1,"nodeType":"349","endLine":92,"endColumn":2},{"ruleId":"301","severity":1,"message":"302","line":36,"column":13,"nodeType":"303","messageId":"304","endLine":36,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":39,"column":13,"nodeType":"303","messageId":"304","endLine":39,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":42,"column":13,"nodeType":"303","messageId":"304","endLine":42,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":70,"column":13,"nodeType":"303","messageId":"304","endLine":70,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":88,"column":13,"nodeType":"303","messageId":"304","endLine":88,"endColumn":18},{"ruleId":"282","severity":1,"message":"350","line":5,"column":10,"nodeType":"284","messageId":"285","endLine":5,"endColumn":14},{"ruleId":"347","severity":1,"message":"348","line":35,"column":1,"nodeType":"349","endLine":113,"endColumn":2},{"ruleId":"351","severity":1,"message":"352","line":50,"column":41,"nodeType":"353","messageId":"354","endLine":50,"endColumn":42,"fix":"355"},{"ruleId":"301","severity":1,"message":"302","line":77,"column":13,"nodeType":"303","messageId":"304","endLine":77,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":109,"column":13,"nodeType":"303","messageId":"304","endLine":109,"endColumn":18},{"ruleId":"347","severity":1,"message":"348","line":22,"column":1,"nodeType":"349","endLine":32,"endColumn":2},{"ruleId":"301","severity":1,"message":"302","line":29,"column":13,"nodeType":"303","messageId":"304","endLine":29,"endColumn":18},{"ruleId":"347","severity":1,"message":"348","line":15,"column":1,"nodeType":"349","endLine":22,"endColumn":2},{"ruleId":"301","severity":1,"message":"302","line":19,"column":13,"nodeType":"303","messageId":"304","endLine":19,"endColumn":18},{"ruleId":"282","severity":1,"message":"356","line":90,"column":11,"nodeType":"284","messageId":"285","endLine":90,"endColumn":21},{"ruleId":"286","severity":1,"message":"311","line":90,"column":132,"nodeType":"288","endLine":90,"endColumn":134,"suggestions":"357"},{"ruleId":"286","severity":1,"message":"311","line":91,"column":99,"nodeType":"288","endLine":91,"endColumn":101,"suggestions":"358"},{"ruleId":"286","severity":1,"message":"359","line":181,"column":8,"nodeType":"288","endLine":181,"endColumn":34,"suggestions":"360"},{"ruleId":"282","severity":1,"message":"361","line":1,"column":17,"nodeType":"284","messageId":"285","endLine":1,"endColumn":26},{"ruleId":"282","severity":1,"message":"362","line":1,"column":32,"nodeType":"284","messageId":"285","endLine":1,"endColumn":39},{"ruleId":"286","severity":1,"message":"363","line":46,"column":8,"nodeType":"288","endLine":46,"endColumn":29,"suggestions":"364"},{"ruleId":"365","severity":1,"message":"366","line":55,"column":26,"nodeType":"367","messageId":"368","endLine":55,"endColumn":28},{"ruleId":"301","severity":1,"message":"302","line":92,"column":17,"nodeType":"303","messageId":"304","endLine":92,"endColumn":22},{"ruleId":"301","severity":1,"message":"302","line":98,"column":17,"nodeType":"303","messageId":"304","endLine":98,"endColumn":22},{"ruleId":"301","severity":1,"message":"302","line":104,"column":17,"nodeType":"303","messageId":"304","endLine":104,"endColumn":22},{"ruleId":"282","severity":1,"message":"369","line":8,"column":8,"nodeType":"284","messageId":"285","endLine":8,"endColumn":21},{"ruleId":"282","severity":1,"message":"370","line":48,"column":11,"nodeType":"284","messageId":"285","endLine":48,"endColumn":19},{"ruleId":"286","severity":1,"message":"311","line":52,"column":109,"nodeType":"288","endLine":52,"endColumn":111,"suggestions":"371"},{"ruleId":"282","severity":1,"message":"372","line":53,"column":11,"nodeType":"284","messageId":"285","endLine":53,"endColumn":25},{"ruleId":"286","severity":1,"message":"311","line":53,"column":114,"nodeType":"288","endLine":53,"endColumn":116,"suggestions":"373"},{"ruleId":"286","severity":1,"message":"374","line":134,"column":12,"nodeType":"288","endLine":134,"endColumn":14,"suggestions":"375"},{"ruleId":"286","severity":1,"message":"376","line":154,"column":12,"nodeType":"288","endLine":154,"endColumn":95,"suggestions":"377"},{"ruleId":"286","severity":1,"message":"378","line":222,"column":12,"nodeType":"288","endLine":227,"endColumn":10,"suggestions":"379"},{"ruleId":"286","severity":1,"message":"380","line":283,"column":8,"nodeType":"288","endLine":283,"endColumn":63,"suggestions":"381"},{"ruleId":"282","severity":1,"message":"362","line":1,"column":67,"nodeType":"284","messageId":"285","endLine":1,"endColumn":74},{"ruleId":"282","severity":1,"message":"382","line":5,"column":11,"nodeType":"284","messageId":"285","endLine":5,"endColumn":16},{"ruleId":"383","severity":1,"message":"384","line":35,"column":23,"nodeType":"385","messageId":"386","endLine":35,"endColumn":32,"fix":"387"},{"ruleId":"286","severity":1,"message":"388","line":66,"column":8,"nodeType":"288","endLine":66,"endColumn":21,"suggestions":"389"},{"ruleId":"286","severity":1,"message":"390","line":89,"column":8,"nodeType":"288","endLine":89,"endColumn":61,"suggestions":"391"},{"ruleId":"286","severity":1,"message":"392","line":166,"column":8,"nodeType":"288","endLine":166,"endColumn":60,"suggestions":"393"},{"ruleId":"286","severity":1,"message":"394","line":188,"column":12,"nodeType":"288","endLine":198,"endColumn":10,"suggestions":"395"},{"ruleId":"286","severity":1,"message":"388","line":206,"column":8,"nodeType":"288","endLine":206,"endColumn":10,"suggestions":"396"},{"ruleId":"282","severity":1,"message":"397","line":244,"column":11,"nodeType":"284","messageId":"285","endLine":244,"endColumn":27},{"ruleId":"286","severity":1,"message":"398","line":27,"column":12,"nodeType":"288","endLine":27,"endColumn":21,"suggestions":"399"},{"ruleId":"383","severity":1,"message":"384","line":41,"column":23,"nodeType":"385","messageId":"386","endLine":41,"endColumn":32,"fix":"400"},{"ruleId":"383","severity":1,"message":"384","line":47,"column":23,"nodeType":"385","messageId":"386","endLine":47,"endColumn":32,"fix":"401"},{"ruleId":"286","severity":1,"message":"388","line":75,"column":8,"nodeType":"288","endLine":75,"endColumn":21,"suggestions":"402"},{"ruleId":"286","severity":1,"message":"403","line":98,"column":8,"nodeType":"288","endLine":98,"endColumn":48,"suggestions":"404"},{"ruleId":"286","severity":1,"message":"392","line":179,"column":8,"nodeType":"288","endLine":179,"endColumn":59,"suggestions":"405"},{"ruleId":"286","severity":1,"message":"406","line":202,"column":12,"nodeType":"288","endLine":211,"endColumn":10,"suggestions":"407"},{"ruleId":"286","severity":1,"message":"388","line":219,"column":8,"nodeType":"288","endLine":219,"endColumn":10,"suggestions":"408"},{"ruleId":"282","severity":1,"message":"397","line":262,"column":11,"nodeType":"284","messageId":"285","endLine":262,"endColumn":27},{"ruleId":"409","severity":1,"message":"410","line":18,"column":33,"nodeType":"411","endLine":18,"endColumn":48},"no-native-reassign",["412"],"no-negated-in-lhs",["413"],"@typescript-eslint/no-unused-vars","'useLayoutEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'creekBE'. Either include it or remove the dependency array.","ArrayExpression",["414"],"'setMap' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'rodDimensions.height'. Either include it or remove the dependency array.",["415"],"React Hook useMemo has an unnecessary dependency: 'playerCoordinates'. Either exclude it or remove the dependency array.",["416"],"React Hook useMemo has a missing dependency: 'map.shorePath.to.y'. Either include it or remove the dependency array.",["417"],"React Hook useMemo has missing dependencies: 'rodAngle' and 'rodDimensions.height'. Either include them or remove the dependency array.",["418"],"React Hook useEffect has a missing dependency: 'updateGlobalPositionState'. Either include it or remove the dependency array. If 'updateGlobalPositionState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["419"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useMemo has missing dependencies: 'isBarometerVisible', 'scrollToBait', and 'scrollToPlayer'. Either include them or remove the dependency array.",["420"],"React Hook useMemo has missing dependencies: 'lineStepMatches.steps', 'lineStepMatches.subSteps', and 'nextStep'. Either include them or remove the dependency array.",["421"],"React Hook useEffect has a missing dependency: 'closeMenu'. Either include it or remove the dependency array. If 'closeMenu' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["422"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["423"],["424"],"React Hook useCallback has missing dependencies: 'isPlayerMoving', 'map.width', 'scrollToPlayer', and 'setPlayerCoordinates'. Either include them or remove the dependency array. If 'scrollToPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["425"],"React Hook useLayoutEffect has a missing dependency: 'scrollToPlayer'. Either include it or remove the dependency array. If 'scrollToPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["426"],"React Hook useEffect has missing dependencies: 'isBarometerVisible' and 'setIsBarometerVisible'. Either include them or remove the dependency array. If 'setIsBarometerVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["427"],"React Hook useCallback has a missing dependency: 'setProcess'. Either include it or remove the dependency array. If 'setProcess' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["428"],"The ref value 'shoreRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'shoreRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'movePlayer', 'shoreRef', and 'throwLine'. Either include them or remove the dependency array.",["429"],"'setHasThrown' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'setBaitOffset', 'setBaitType', 'setProcess', 'setRodAngle', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["430"],"React Hook useEffect has missing dependencies: 'scrollToPlayer', 'setBaitOffset', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["431"],["432"],"React Hook useCallback has missing dependencies: 'setBaitOffset', 'setRodAngle', and 'setRodOffset'. Either include them or remove the dependency array. If 'setRodAngle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["433"],"React Hook useEffect has missing dependencies: 'baitRef', 'lakeRef', 'scrollToBait', 'setBaitOffset', 'setBaitType', 'setIsBarometerVisible', and 'setProcess'. Either include them or remove the dependency array. If 'setIsBarometerVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["434"],"React Hook useCallback has a missing dependency: 'setBaitOffset'. Either include it or remove the dependency array. If 'setBaitOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["435"],"The ref value 'gaugeRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'gaugeRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'changeRodDirection' and 'goBack'. Either include them or remove the dependency array.",["436"],"React Hook useMemo has an unnecessary dependency: 'gaugeValueRef.current'. Either exclude it or remove the dependency array. Mutable values like 'gaugeValueRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["437"],"React Hook useCallback has missing dependencies: 'baitOffset.x', 'baitOffset.y', 'scrollToBait', 'setBaitOffset', and 'setRodAngle'. Either include them or remove the dependency array. If 'setBaitOffset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["438"],["439"],"React Hook useEffect has a missing dependency: 'reelingSE'. Either include it or remove the dependency array.",["440"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Item' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"441","text":"442"},"'removeItem' is assigned a value but never used.",["443"],["444"],"React Hook useMemo has a missing dependency: 'setCurrentSection'. Either include it or remove the dependency array. If 'setCurrentSection' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["445"],"'ReactNode' is defined but never used.","'useMemo' is defined but never used.","React Hook useMemo has a missing dependency: 'sellerPhrase.length'. Either include it or remove the dependency array.",["446"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'gameProcesses' is defined but never used.","'map' is assigned a value but never used.",["447"],"'setGameProcess' is assigned a value but never used.",["448"],"React Hook useCallback has missing dependencies: 'giveUpBait' and 'makeBaitAvailable'. Either include them or remove the dependency array.",["449"],"React Hook useCallback has unnecessary dependencies: 'fishDirection', 'isInScope', and 'likesBait'. Either exclude them or remove the dependency array.",["450"],"React Hook useCallback has a missing dependency: 'makeBaitAvailable'. Either include it or remove the dependency array.",["451"],"React Hook useEffect has a missing dependency: 'makeBaitAvailable'. Either include it or remove the dependency array.",["452"],"'Props' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"453","text":"454"},"React Hook useEffect has a missing dependency: 'setSellerPhrase'. Either include it or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["455"],"React Hook useMemo has missing dependencies: 'saleSE' and 'setSellerPhrase'. Either include them or remove the dependency array.",["456"],"React Hook useMemo has a missing dependency: 'setSellerPhrase'. Either include it or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["457"],"React Hook useCallback has missing dependencies: 'setFocusedItem' and 'setSellerPhrase'. Either include them or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["458"],["459"],"'ForSaleItemProps' is defined but never used.","React Hook useCallback has a missing dependency: 'transition'. Either include it or remove the dependency array.",["460"],{"range":"461","text":"454"},{"range":"462","text":"454"},["463"],"React Hook useMemo has missing dependencies: 'purchaseSE', 'setSellerPhrase', and 'thankYouSE'. Either include them or remove the dependency array.",["464"],["465"],"React Hook useCallback has missing dependencies: 'setSellerPhrase' and 'thankYouSE'. Either include them or remove the dependency array. If 'setSellerPhrase' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["466"],["467"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"486","fix":"488"},{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},{"desc":"493","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"514","fix":"515"},{"desc":"493","fix":"516"},{"desc":"517","fix":"518"},[1513,1514],"",{"desc":"486","fix":"519"},{"desc":"486","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"486","fix":"525"},{"desc":"486","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},[1611,1611],"()",{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},[1965,1965],[2218,2218],{"desc":"535","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"543","fix":"554"},"Update the dependencies array to be: [audioEnabled, creekBE]",{"range":"555","text":"556"},"Update the dependencies array to be: [playerCoordinates.width, playerCoordinates.x, playerCoordinates.y, rodDimensions.height]",{"range":"557","text":"558"},"Update the dependencies array to be: [map, baitCoordinates, rodDimensions]",{"range":"559","text":"560"},"Update the dependencies array to be: [baitCoordinates.x, baitCoordinates.y, baitOffset.x, baitOffset.y, map.shorePath.to.y]",{"range":"561","text":"562"},"Update the dependencies array to be: [lineOrigin.x, lineOrigin.y, baitOffset.x, baitOffset.y, rodOffset.x, rodOffset.y, rodAngle, rodDimensions.height]",{"range":"563","text":"564"},"Update the dependencies array to be: [baitLakeCoords, updateGlobalPositionState]",{"range":"565","text":"566"},"Update the dependencies array to be: [process, setProcess, playerCoordinates, scrollToPlayer, map, isBarometerVisible, scrollToBait, rodAngle, rodOffset, baitOffset, baitOffsetLimit, baitLakeCoords, baitDistance, rodLevel, lineLength]",{"range":"567","text":"568"},"Update the dependencies array to be: [nextStep, baitDistance, lineStepMatches.steps, lineStepMatches.subSteps]",{"range":"569","text":"570"},"Update the dependencies array to be: [closeMenu]",{"range":"571","text":"572"},"Update the dependencies array to be: [dispatch]",{"range":"573","text":"574"},{"range":"575","text":"574"},"Update the dependencies array to be: [isPlayerMoving, map.width, playerCoordinates, scrollToPlayer, setPlayerCoordinates]",{"range":"576","text":"577"},"Update the dependencies array to be: [scrollToPlayer]",{"range":"578","text":"579"},"Update the dependencies array to be: [isBarometerVisible, setIsBarometerVisible]",{"range":"580","text":"581"},"Update the dependencies array to be: [isPlayerMoving, isMainMenuOpen, setProcess]",{"range":"582","text":"583"},"Update the dependencies array to be: [playerCoordinates, isMainMenuOpen, movePlayer, throwLine, shoreRef]",{"range":"584","text":"585"},"Update the dependencies array to be: [setBaitOffset, setBaitType, setProcess, setRodAngle, setRodOffset]",{"range":"586","text":"587"},"Update the dependencies array to be: [scrollToPlayer, setBaitOffset, setRodOffset]",{"range":"588","text":"589"},{"range":"590","text":"581"},"Update the dependencies array to be: [isThrowing, setBaitOffset, setRodAngle, setRodOffset]",{"range":"591","text":"592"},"Update the dependencies array to be: [isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords, setIsBarometerVisible, setBaitOffset, scrollToBait, setBaitType, baitRef, lakeRef, setProcess]",{"range":"593","text":"594"},"Update the dependencies array to be: [rodLevel.maxLength, setBaitOffset, rodAngle]",{"range":"595","text":"596"},"Update the dependencies array to be: [isPreparingThrow, spaceFired, rodAngle, rodOffset, confirmThrow, isThrowing, goBack, changeRodDirection]",{"range":"597","text":"598"},"Update the dependencies array to be: []",{"range":"599","text":"600"},"Update the dependencies array to be: [baitDistance, isReeling, baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait, goBack]",{"range":"601","text":"602"},{"range":"603","text":"581"},"Update the dependencies array to be: [isReeling, reelingSE]",{"range":"604","text":"605"},{"range":"606","text":"574"},{"range":"607","text":"574"},"Update the dependencies array to be: [entries, currentEntryNum, setCurrentSection]",{"range":"608","text":"609"},"Update the dependencies array to be: [sellerPhrase.length, sellerPhraseSpelled]",{"range":"610","text":"611"},{"range":"612","text":"574"},{"range":"613","text":"574"},"Update the dependencies array to be: [giveUpBait, makeBaitAvailable]",{"range":"614","text":"615"},"Update the dependencies array to be: [fishCoords, roamingDistance, fishWidth, area]",{"range":"616","text":"617"},"Update the dependencies array to be: [catchTimeLapse, approachBait, handleHookFail, giveUpBait, makeBaitAvailable]",{"range":"618","text":"619"},"Update the dependencies array to be: [wouldHookSuccessfully, canTryToCatch, isBaitAvailable, makeBaitAvailable]",{"range":"620","text":"621"},"Update the dependencies array to be: [focusedItem, setSellerPhrase]",{"range":"622","text":"623"},"Update the dependencies array to be: [myDoubloons, sellableEntries, focusedItem, setSellerPhrase, sellItem, saleSE]",{"range":"624","text":"625"},"Update the dependencies array to be: [canSell, isConfirmingSale, saleAmount, _id, plural, setSellerPhrase]",{"range":"626","text":"627"},"Update the dependencies array to be: [canSell, isConfirmingSale, setSellerPhrase, saleAmount, plural, _id, sellItem, totalPrice, saleSE, amount, setFocusedItem]",{"range":"628","text":"629"},"Update the dependencies array to be: [setSellerPhrase]",{"range":"630","text":"631"},"Update the dependencies array to be: [onClose, transition]",{"range":"632","text":"633"},{"range":"634","text":"623"},"Update the dependencies array to be: [focusedItem, setSellerPhrase, myDoubloons, purchaseItem, purchaseSE, thankYouSE]",{"range":"635","text":"636"},"Update the dependencies array to be: [canBuy, isConfirmingPurchase, amount, _id, plural, setSellerPhrase]",{"range":"637","text":"638"},"Update the dependencies array to be: [canBuy, isConfirmingPurchase, setSellerPhrase, amount, plural, _id, purchaseItem, totalPrice, purchaseSE, thankYouSE]",{"range":"639","text":"640"},{"range":"641","text":"631"},[1881,1895],"[audioEnabled, creekBE]",[4098,4117],"[playerCoordinates.width, playerCoordinates.x, playerCoordinates.y, rodDimensions.height]",[5045,5101],"[map, baitCoordinates, rodDimensions]",[5396,5425],"[baitCoordinates.x, baitCoordinates.y, baitOffset.x, baitOffset.y, map.shorePath.to.y]",[6150,6185],"[lineOrigin.x, lineOrigin.y, baitOffset.x, baitOffset.y, rodOffset.x, rodOffset.y, rodAngle, rodDimensions.height]",[8642,8658],"[baitLakeCoords, updateGlobalPositionState]",[11147,11441],"[process, setProcess, playerCoordinates, scrollToPlayer, map, isBarometerVisible, scrollToBait, rodAngle, rodOffset, baitOffset, baitOffsetLimit, baitLakeCoords, baitDistance, rodLevel, lineLength]",[1988,2029],"[nextStep, baitDistance, lineStepMatches.steps, lineStepMatches.subSteps]",[1329,1331],"[closeMenu]",[1391,1393],"[dispatch]",[1495,1497],[2853,2872],"[isPlayerMoving, map.width, playerCoordinates, scrollToPlayer, setPlayerCoordinates]",[3007,3009],"[scrollToPlayer]",[3159,3161],"[isBarometerVisible, setIsBarometerVisible]",[3360,3392],"[isPlayerMoving, isMainMenuOpen, setProcess]",[7009,7044],"[playerCoordinates, isMainMenuOpen, movePlayer, throwLine, shoreRef]",[3408,3410],"[setBaitOffset, setBaitType, setProcess, setRodAngle, setRodOffset]",[3604,3606],"[scrollToPlayer, setBaitOffset, setRodOffset]",[3706,3708],[4055,4067],"[isThrowing, setBaitOffset, setRodAngle, setRodOffset]",[8291,8369],"[isThrowing, hasThrown, rodLevel, baitOffset, baitOffsetLimit, baitLakeCoords, setIsBarometerVisible, setBaitOffset, scrollToBait, setBaitType, baitRef, lakeRef, setProcess]",[8894,8914],"[rodLevel.maxLength, setBaitOffset, rodAngle]",[15289,15427],"[isPreparingThrow, spaceFired, rodAngle, rodOffset, confirmThrow, isThrowing, goBack, changeRodDirection]",[18801,18824],"[]",[3552,3597],"[baitDistance, isReeling, baitOffset.x, baitOffset.y, lineLength, setBaitOffset, setRodAngle, scrollToBait, goBack]",[3769,3771],[4462,4473],"[isReeling, reelingSE]",[3319,3321],[3422,3424],[6983,7009],"[entries, currentEntryNum, setCurrentSection]",[1767,1788],"[sellerPhrase.length, sellerPhraseSpelled]",[2586,2588],[2704,2706],[6232,6234],"[giveUpBait, makeBaitAvailable]",[7089,7172],"[fishCoords, roamingDistance, fishWidth, area]",[9987,10108],"[catchTimeLapse, approachBait, handleHookFail, giveUpBait, makeBaitAvailable]",[12294,12349],"[wouldHookSuccessfully, canTryToCatch, isBaitAvailable, makeBaitAvailable]",[2713,2726],"[focusedItem, setSellerPhrase]",[3609,3662],"[myDoubloons, sellableEntries, focusedItem, setSellerPhrase, sellItem, saleSE]",[6548,6600],"[canSell, isConfirmingSale, saleAmount, _id, plural, setSellerPhrase]",[7526,7744],"[canSell, isConfirmingSale, setSellerPhrase, saleAmount, plural, _id, sellItem, totalPrice, saleSE, amount, setFocusedItem]",[7903,7905],"[setSellerPhrase]",[754,763],"[onClose, transition]",[3077,3090],[3912,3952],"[focusedItem, setSellerPhrase, myDoubloons, purchaseItem, purchaseSE, thankYouSE]",[6971,7022],"[canBuy, isConfirmingPurchase, amount, _id, plural, setSellerPhrase]",[7940,8144],"[canBuy, isConfirmingPurchase, setSellerPhrase, amount, plural, _id, purchaseItem, totalPrice, purchaseSE, thankYouSE]",[8307,8309]]